package org.eposoft.jccd.parser.java.antlr3;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.BitSet;
import org.antlr.runtime.DFA;
import org.antlr.runtime.EarlyExitException;
import org.antlr.runtime.IntStream;
import org.antlr.runtime.MismatchedSetException;
import org.antlr.runtime.NoViableAltException;
import org.antlr.runtime.Parser;
import org.antlr.runtime.ParserRuleReturnScope;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.Token;
import org.antlr.runtime.TokenStream;
import org.antlr.runtime.tree.CommonTree;
import org.antlr.runtime.tree.CommonTreeAdaptor;
import org.antlr.runtime.tree.RewriteEarlyExitException;
import org.antlr.runtime.tree.RewriteRuleSubtreeStream;
import org.antlr.runtime.tree.RewriteRuleTokenStream;
import org.antlr.runtime.tree.TreeAdaptor;

/**
 * An ANTLRv3 capable Java 1.5 grammar for building ASTs.
 *
 * Note that there's also the tree grammar 'JavaTreeParser.g' that can be fed
 * with this grammer's output.
 *
 *
 * Please report any detected errors or even suggestions regarding this grammar
 * to
 *
 *          dieter [D O T] habelitz [A T] habelitz [D O T] com
 *
 *      with the subject
 *
 *          jsom grammar: [your subject note]
 *
 * To generate a parser based on this grammar you'll need ANTLRv3, which you can
 * get from 'http://www.antlr.org'.
 *
 *
 * This grammar is published under the ...
 *
 * BSD licence
 * 
 * Copyright (c) 2007-2008 by HABELITZ Software Developments
 *
 * All rights reserved.
 * 
 * http://www.habelitz.com
 *
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY HABELITZ SOFTWARE DEVELOPMENTS ('HSD') ``AS IS'' 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL 'HSD' BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
public class Antlr3JavaParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "AND_ASSIGN", "ASSIGN", "AT", "BIT_SHIFT_RIGHT", "BIT_SHIFT_RIGHT_ASSIGN", "COLON", "COMMA", "DEC", "DIV", "DIV_ASSIGN", "DOT", "DOTSTAR", "ELLIPSIS", "EQUAL", "GREATER_OR_EQUAL", "GREATER_THAN", "INC", "LBRACK", "LCURLY", "LESS_OR_EQUAL", "LESS_THAN", "LOGICAL_AND", "LOGICAL_NOT", "LOGICAL_OR", "LPAREN", "MINUS", "MINUS_ASSIGN", "MOD", "MOD_ASSIGN", "NOT", "NOT_EQUAL", "OR", "OR_ASSIGN", "PLUS", "PLUS_ASSIGN", "QUESTION", "RBRACK", "RCURLY", "RPAREN", "SEMI", "SHIFT_LEFT", "SHIFT_LEFT_ASSIGN", "SHIFT_RIGHT", "SHIFT_RIGHT_ASSIGN", "STAR", "STAR_ASSIGN", "XOR", "XOR_ASSIGN", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", "EXTENDS", "FALSE", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "IMPLEMENTS", "INSTANCEOF", "INTERFACE", "IMPORT", "INT", "LONG", "NATIVE", "NEW", "NULL", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT", "TRUE", "TRY", "VOID", "VOLATILE", "WHILE", "ANNOTATION_INIT_ARRAY_ELEMENT", "ANNOTATION_INIT_BLOCK", "ANNOTATION_INIT_DEFAULT_KEY", "ANNOTATION_INIT_KEY_LIST", "ANNOTATION_LIST", "ANNOTATION_METHOD_DECL", "ANNOTATION_SCOPE", "ANNOTATION_TOP_LEVEL_SCOPE", "ARGUMENT_LIST", "ARRAY_DECLARATOR", "ARRAY_DECLARATOR_LIST", "ARRAY_ELEMENT_ACCESS", "ARRAY_INITIALIZER", "BLOCK_SCOPE", "CAST_EXPR", "CATCH_CLAUSE_LIST", "CLASS_CONSTRUCTOR_CALL", "CLASS_INSTANCE_INITIALIZER", "CLASS_STATIC_INITIALIZER", "CLASS_TOP_LEVEL_SCOPE", "CONSTRUCTOR_DECL", "ENUM_TOP_LEVEL_SCOPE", "EXPR", "EXTENDS_BOUND_LIST", "EXTENDS_CLAUSE", "FOR_CONDITION", "FOR_EACH", "FOR_INIT", "FOR_UPDATE", "FORMAL_PARAM_LIST", "FORMAL_PARAM_STD_DECL", "FORMAL_PARAM_VARARG_DECL", "FUNCTION_METHOD_DECL", "GENERIC_TYPE_ARG_LIST", "GENERIC_TYPE_PARAM_LIST", "INTERFACE_TOP_LEVEL_SCOPE", "IMPLEMENTS_CLAUSE", "LABELED_STATEMENT", "LOCAL_MODIFIER_LIST", "JAVA_SOURCE", "METHOD_CALL", "MODIFIER_LIST", "PARENTESIZED_EXPR", "POST_DEC", "POST_INC", "PRE_DEC", "PRE_INC", "QUALIFIED_TYPE_IDENT", "STATIC_ARRAY_CREATOR", "SUPER_CONSTRUCTOR_CALL", "SWITCH_BLOCK_LABEL_LIST", "THIS_CONSTRUCTOR_CALL", "THROWS_CLAUSE", "TYPE", "UNARY_MINUS", "UNARY_PLUS", "VAR_DECLARATION", "VAR_DECLARATOR", "VAR_DECLARATOR_LIST", "VOID_METHOD_DECL", "IDENT", "HEX_LITERAL", "OCTAL_LITERAL", "DECIMAL_LITERAL", "FLOATING_POINT_LITERAL", "CHARACTER_LITERAL", "STRING_LITERAL", "HEX_DIGIT", "INTEGER_TYPE_SUFFIX", "EXPONENT", "FLOAT_TYPE_SUFFIX", "ESCAPE_SEQUENCE", "UNICODE_ESCAPE", "OCTAL_ESCAPE", "JAVA_ID_START", "JAVA_ID_PART", "WS", "COMMENT", "LINE_COMMENT"
    };
    public static final int PACKAGE=84;
    public static final int EXPONENT=173;
    public static final int STAR=49;
    public static final int WHILE=103;
    public static final int MOD=32;
    public static final int MOD_ASSIGN=33;
    public static final int CASE=58;
    public static final int CHAR=60;
    public static final int NEW=82;
    public static final int DO=64;
    public static final int GENERIC_TYPE_PARAM_LIST=138;
    public static final int CLASS_INSTANCE_INITIALIZER=121;
    public static final int ARRAY_ELEMENT_ACCESS=115;
    public static final int FOR_CONDITION=129;
    public static final int NOT=34;
    public static final int VAR_DECLARATION=160;
    public static final int ANNOTATION_METHOD_DECL=109;
    public static final int EOF=-1;
    public static final int DIV_ASSIGN=14;
    public static final int LOGICAL_AND=26;
    public static final int BREAK=56;
    public static final int UNARY_PLUS=159;
    public static final int BIT_SHIFT_RIGHT_ASSIGN=9;
    public static final int TYPE=157;
    public static final int RPAREN=43;
    public static final int INC=21;
    public static final int FINAL=70;
    public static final int IMPORT=78;
    public static final int STRING_LITERAL=170;
    public static final int FOR_UPDATE=132;
    public static final int FLOATING_POINT_LITERAL=168;
    public static final int CAST_EXPR=118;
    public static final int NOT_EQUAL=35;
    public static final int VOID_METHOD_DECL=163;
    public static final int THIS=95;
    public static final int RETURN=88;
    public static final int DOUBLE=65;
    public static final int ENUM_TOP_LEVEL_SCOPE=125;
    public static final int VOID=101;
    public static final int SUPER=92;
    public static final int COMMENT=181;
    public static final int ANNOTATION_INIT_KEY_LIST=107;
    public static final int JAVA_ID_START=178;
    public static final int FLOAT_TYPE_SUFFIX=174;
    public static final int PRE_DEC=149;
    public static final int RBRACK=41;
    public static final int IMPLEMENTS_CLAUSE=140;
    public static final int SWITCH_BLOCK_LABEL_LIST=154;
    public static final int LINE_COMMENT=182;
    public static final int PRIVATE=85;
    public static final int STATIC=90;
    public static final int BLOCK_SCOPE=117;
    public static final int ANNOTATION_INIT_DEFAULT_KEY=106;
    public static final int SWITCH=93;
    public static final int NULL=83;
    public static final int VAR_DECLARATOR=161;
    public static final int MINUS_ASSIGN=31;
    public static final int ELSE=66;
    public static final int STRICTFP=91;
    public static final int CHARACTER_LITERAL=169;
    public static final int PRE_INC=150;
    public static final int ANNOTATION_LIST=108;
    public static final int ELLIPSIS=17;
    public static final int NATIVE=81;
    public static final int OCTAL_ESCAPE=177;
    public static final int UNARY_MINUS=158;
    public static final int THROWS=97;
    public static final int LCURLY=23;
    public static final int INT=79;
    public static final int FORMAL_PARAM_VARARG_DECL=135;
    public static final int METHOD_CALL=144;
    public static final int ASSERT=54;
    public static final int TRY=100;
    public static final int INTERFACE_TOP_LEVEL_SCOPE=139;
    public static final int SHIFT_LEFT=45;
    public static final int WS=180;
    public static final int SHIFT_RIGHT=47;
    public static final int FORMAL_PARAM_STD_DECL=134;
    public static final int LOCAL_MODIFIER_LIST=142;
    public static final int OR=36;
    public static final int LESS_THAN=25;
    public static final int SHIFT_RIGHT_ASSIGN=48;
    public static final int EXTENDS_BOUND_LIST=127;
    public static final int JAVA_SOURCE=143;
    public static final int CATCH=59;
    public static final int FALSE=69;
    public static final int INTEGER_TYPE_SUFFIX=172;
    public static final int DECIMAL_LITERAL=167;
    public static final int THROW=96;
    public static final int FOR_INIT=131;
    public static final int DEC=12;
    public static final int PROTECTED=86;
    public static final int CLASS=61;
    public static final int LBRACK=22;
    public static final int BIT_SHIFT_RIGHT=8;
    public static final int THROWS_CLAUSE=156;
    public static final int GREATER_OR_EQUAL=19;
    public static final int FOR=73;
    public static final int THIS_CONSTRUCTOR_CALL=155;
    public static final int LOGICAL_NOT=27;
    public static final int FLOAT=72;
    public static final int ABSTRACT=53;
    public static final int AND=4;
    public static final int POST_DEC=147;
    public static final int AND_ASSIGN=5;
    public static final int STATIC_ARRAY_CREATOR=152;
    public static final int MODIFIER_LIST=145;
    public static final int ANNOTATION_SCOPE=110;
    public static final int LPAREN=29;
    public static final int IF=74;
    public static final int AT=7;
    public static final int ESCAPE_SEQUENCE=175;
    public static final int CONSTRUCTOR_DECL=124;
    public static final int LABELED_STATEMENT=141;
    public static final int UNICODE_ESCAPE=176;
    public static final int EXPR=126;
    public static final int SYNCHRONIZED=94;
    public static final int BOOLEAN=55;
    public static final int CLASS_TOP_LEVEL_SCOPE=123;
    public static final int IMPLEMENTS=75;
    public static final int CONTINUE=62;
    public static final int COMMA=11;
    public static final int TRANSIENT=98;
    public static final int EQUAL=18;
    public static final int XOR_ASSIGN=52;
    public static final int LOGICAL_OR=28;
    public static final int IDENT=164;
    public static final int QUALIFIED_TYPE_IDENT=151;
    public static final int ARGUMENT_LIST=112;
    public static final int PLUS=38;
    public static final int HEX_LITERAL=165;
    public static final int ANNOTATION_INIT_BLOCK=105;
    public static final int DOT=15;
    public static final int SHIFT_LEFT_ASSIGN=46;
    public static final int FORMAL_PARAM_LIST=133;
    public static final int GENERIC_TYPE_ARG_LIST=137;
    public static final int ANNOTATION_TOP_LEVEL_SCOPE=111;
    public static final int DOTSTAR=16;
    public static final int BYTE=57;
    public static final int XOR=51;
    public static final int JAVA_ID_PART=179;
    public static final int GREATER_THAN=20;
    public static final int VOLATILE=102;
    public static final int PARENTESIZED_EXPR=146;
    public static final int CLASS_STATIC_INITIALIZER=122;
    public static final int ARRAY_DECLARATOR_LIST=114;
    public static final int LESS_OR_EQUAL=24;
    public static final int DEFAULT=63;
    public static final int OCTAL_LITERAL=166;
    public static final int HEX_DIGIT=171;
    public static final int SHORT=89;
    public static final int INSTANCEOF=76;
    public static final int MINUS=30;
    public static final int EXTENDS_CLAUSE=128;
    public static final int TRUE=99;
    public static final int SEMI=44;
    public static final int STAR_ASSIGN=50;
    public static final int VAR_DECLARATOR_LIST=162;
    public static final int ARRAY_DECLARATOR=113;
    public static final int COLON=10;
    public static final int OR_ASSIGN=37;
    public static final int ENUM=67;
    public static final int QUESTION=40;
    public static final int FINALLY=71;
    public static final int RCURLY=42;
    public static final int PLUS_ASSIGN=39;
    public static final int ASSIGN=6;
    public static final int ANNOTATION_INIT_ARRAY_ELEMENT=104;
    public static final int FUNCTION_METHOD_DECL=136;
    public static final int INTERFACE=77;
    public static final int POST_INC=148;
    public static final int DIV=13;
    public static final int CLASS_CONSTRUCTOR_CALL=120;
    public static final int LONG=80;
    public static final int FOR_EACH=130;
    public static final int EXTENDS=68;
    public static final int PUBLIC=87;
    public static final int ARRAY_INITIALIZER=116;
    public static final int CATCH_CLAUSE_LIST=119;
    public static final int SUPER_CONSTRUCTOR_CALL=153;

        public Antlr3JavaParser(TokenStream input) {
            super(input);
            ruleMemo = new HashMap[355+1];
         }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return tokenNames; }
    public String getGrammarFileName() { return "/home/bigben/Desktop/Java.g"; }


        
        private boolean mMessageCollectionEnabled = false;
        private boolean mHasErrors = false;
        private List<String> mMessages;

        /**
         *  Switches error message collection on or of.
         *
         *  The standard destination for parser error messages is <code>System.err</code>.
         *  However, if <code>true</code> gets passed to this method this default
         *  behaviour will be switched off and all error messages will be collected
         *  instead of written to anywhere.
         *
         *  The default value is <code>false</code>.
         *
         *  @param pNewState  <code>true</code> if error messages should be collected.
         */
        public void enableErrorMessageCollection(boolean pNewState) {
            mMessageCollectionEnabled = pNewState;
            if (mMessages == null && mMessageCollectionEnabled) {
                mMessages = new ArrayList<String>();
            }
        }
        
        /**
         *  Collects an error message or passes the error message to <code>
         *  super.emitErrorMessage(...)</code>.
         *
         *  The actual behaviour depends on whether collecting error messages
         *  has been enabled or not.
         *
         *  @param pMessage  The error message.
         */
         @Override
        public void emitErrorMessage(String pMessage) {
            if (mMessageCollectionEnabled) {
                mMessages.add(pMessage);
            } else {
                super.emitErrorMessage(pMessage);
            }
        }
        
        /**
         *  Returns collected error messages.
         *
         *  @return  A list holding collected error messages or <code>null</code> if
         *           collecting error messages hasn't been enabled. Of course, this
         *           list may be empty if no error message has been emited.
         */
        public List<String> getMessages() {
            return mMessages;
        }
        
        /**
         *  Tells if parsing a Java source has caused any error messages.
         *
         *  @return  <code>true</code> if parsing a Java source has caused at least one error message.
         */
        public boolean hasErrors() {
            return mHasErrors;
        }


    public static class javaSource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start javaSource
    // /home/bigben/Desktop/Java.g:324:1: javaSource : compilationUnit -> ^( JAVA_SOURCE compilationUnit ) ;
    public final javaSource_return javaSource() throws RecognitionException {
        javaSource_return retval = new javaSource_return();
        retval.start = input.LT(1);
        int javaSource_StartIndex = input.index();
        CommonTree root_0 = null;

        compilationUnit_return compilationUnit1 = null;


        RewriteRuleSubtreeStream stream_compilationUnit=new RewriteRuleSubtreeStream(adaptor,"rule compilationUnit");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // /home/bigben/Desktop/Java.g:325:5: ( compilationUnit -> ^( JAVA_SOURCE compilationUnit ) )
            // /home/bigben/Desktop/Java.g:325:9: compilationUnit
            {
            pushFollow(FOLLOW_compilationUnit_in_javaSource4506);
            compilationUnit1=compilationUnit();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_compilationUnit.add(compilationUnit1.getTree());

            // AST REWRITE
            // elements: compilationUnit
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 326:9: -> ^( JAVA_SOURCE compilationUnit )
            {
                // /home/bigben/Desktop/Java.g:326:13: ^( JAVA_SOURCE compilationUnit )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(JAVA_SOURCE, "JAVA_SOURCE"), root_1);

                adaptor.addChild(root_1, stream_compilationUnit.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 1, javaSource_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end javaSource

    public static class compilationUnit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compilationUnit
    // /home/bigben/Desktop/Java.g:329:1: compilationUnit : annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* ;
    public final compilationUnit_return compilationUnit() throws RecognitionException {
        compilationUnit_return retval = new compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.index();
        CommonTree root_0 = null;

        annotationList_return annotationList2 = null;

        packageDeclaration_return packageDeclaration3 = null;

        importDeclaration_return importDeclaration4 = null;

        typeDecls_return typeDecls5 = null;



        try {
            if ( backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // /home/bigben/Desktop/Java.g:330:5: ( annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )* )
            // /home/bigben/Desktop/Java.g:330:9: annotationList ( packageDeclaration )? ( importDeclaration )* ( typeDecls )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_annotationList_in_compilationUnit4542);
            annotationList2=annotationList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, annotationList2.getTree());
            // /home/bigben/Desktop/Java.g:331:9: ( packageDeclaration )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==PACKAGE) ) {
                alt1=1;
            }
            switch (alt1) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: packageDeclaration
                    {
                    pushFollow(FOLLOW_packageDeclaration_in_compilationUnit4553);
                    packageDeclaration3=packageDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, packageDeclaration3.getTree());

                    }
                    break;

            }

            // /home/bigben/Desktop/Java.g:332:9: ( importDeclaration )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==IMPORT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:0:0: importDeclaration
            	    {
            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit4565);
            	    importDeclaration4=importDeclaration();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, importDeclaration4.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            // /home/bigben/Desktop/Java.g:333:9: ( typeDecls )*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==AT||LA3_0==SEMI||LA3_0==ABSTRACT||LA3_0==CLASS||LA3_0==ENUM||LA3_0==FINAL||LA3_0==INTERFACE||LA3_0==NATIVE||(LA3_0>=PRIVATE && LA3_0<=PUBLIC)||(LA3_0>=STATIC && LA3_0<=STRICTFP)||LA3_0==SYNCHRONIZED||LA3_0==TRANSIENT||LA3_0==VOLATILE) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:0:0: typeDecls
            	    {
            	    pushFollow(FOLLOW_typeDecls_in_compilationUnit4577);
            	    typeDecls5=typeDecls();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, typeDecls5.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 2, compilationUnit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end compilationUnit

    public static class typeDecls_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeDecls
    // /home/bigben/Desktop/Java.g:336:1: typeDecls : ( typeDeclaration | SEMI );
    public final typeDecls_return typeDecls() throws RecognitionException {
        typeDecls_return retval = new typeDecls_return();
        retval.start = input.LT(1);
        int typeDecls_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEMI7=null;
        typeDeclaration_return typeDeclaration6 = null;


        CommonTree SEMI7_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // /home/bigben/Desktop/Java.g:337:5: ( typeDeclaration | SEMI )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==AT||LA4_0==ABSTRACT||LA4_0==CLASS||LA4_0==ENUM||LA4_0==FINAL||LA4_0==INTERFACE||LA4_0==NATIVE||(LA4_0>=PRIVATE && LA4_0<=PUBLIC)||(LA4_0>=STATIC && LA4_0<=STRICTFP)||LA4_0==SYNCHRONIZED||LA4_0==TRANSIENT||LA4_0==VOLATILE) ) {
                alt4=1;
            }
            else if ( (LA4_0==SEMI) ) {
                alt4=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("336:1: typeDecls : ( typeDeclaration | SEMI );", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:337:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_typeDecls4597);
                    typeDeclaration6=typeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, typeDeclaration6.getTree());

                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:338:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI7=(Token)input.LT(1);
                    match(input,SEMI,FOLLOW_SEMI_in_typeDecls4607); if (failed) return retval;
                    if ( backtracking==0 ) {
                    SEMI7_tree = (CommonTree)adaptor.create(SEMI7);
                    adaptor.addChild(root_0, SEMI7_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 3, typeDecls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end typeDecls

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start packageDeclaration
    // /home/bigben/Desktop/Java.g:341:1: packageDeclaration : PACKAGE qualifiedIdentifier SEMI ;
    public final packageDeclaration_return packageDeclaration() throws RecognitionException {
        packageDeclaration_return retval = new packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PACKAGE8=null;
        Token SEMI10=null;
        qualifiedIdentifier_return qualifiedIdentifier9 = null;


        CommonTree PACKAGE8_tree=null;
        CommonTree SEMI10_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // /home/bigben/Desktop/Java.g:342:5: ( PACKAGE qualifiedIdentifier SEMI )
            // /home/bigben/Desktop/Java.g:342:9: PACKAGE qualifiedIdentifier SEMI
            {
            root_0 = (CommonTree)adaptor.nil();

            PACKAGE8=(Token)input.LT(1);
            match(input,PACKAGE,FOLLOW_PACKAGE_in_packageDeclaration4626); if (failed) return retval;
            if ( backtracking==0 ) {
            PACKAGE8_tree = (CommonTree)adaptor.create(PACKAGE8);
            root_0 = (CommonTree)adaptor.becomeRoot(PACKAGE8_tree, root_0);
            }
            pushFollow(FOLLOW_qualifiedIdentifier_in_packageDeclaration4629);
            qualifiedIdentifier9=qualifiedIdentifier();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier9.getTree());
            SEMI10=(Token)input.LT(1);
            match(input,SEMI,FOLLOW_SEMI_in_packageDeclaration4631); if (failed) return retval;
            if ( backtracking==0 ) {
            SEMI10_tree = (CommonTree)adaptor.create(SEMI10);
            adaptor.addChild(root_0, SEMI10_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 4, packageDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end packageDeclaration

    public static class importDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start importDeclaration
    // /home/bigben/Desktop/Java.g:345:1: importDeclaration : IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI ;
    public final importDeclaration_return importDeclaration() throws RecognitionException {
        importDeclaration_return retval = new importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IMPORT11=null;
        Token STATIC12=null;
        Token DOTSTAR14=null;
        Token SEMI15=null;
        qualifiedIdentifier_return qualifiedIdentifier13 = null;


        CommonTree IMPORT11_tree=null;
        CommonTree STATIC12_tree=null;
        CommonTree DOTSTAR14_tree=null;
        CommonTree SEMI15_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // /home/bigben/Desktop/Java.g:346:5: ( IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI )
            // /home/bigben/Desktop/Java.g:346:9: IMPORT ( STATIC )? qualifiedIdentifier ( DOTSTAR )? SEMI
            {
            root_0 = (CommonTree)adaptor.nil();

            IMPORT11=(Token)input.LT(1);
            match(input,IMPORT,FOLLOW_IMPORT_in_importDeclaration4656); if (failed) return retval;
            if ( backtracking==0 ) {
            IMPORT11_tree = (CommonTree)adaptor.create(IMPORT11);
            root_0 = (CommonTree)adaptor.becomeRoot(IMPORT11_tree, root_0);
            }
            // /home/bigben/Desktop/Java.g:346:17: ( STATIC )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==STATIC) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: STATIC
                    {
                    STATIC12=(Token)input.LT(1);
                    match(input,STATIC,FOLLOW_STATIC_in_importDeclaration4659); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STATIC12_tree = (CommonTree)adaptor.create(STATIC12);
                    adaptor.addChild(root_0, STATIC12_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifiedIdentifier_in_importDeclaration4662);
            qualifiedIdentifier13=qualifiedIdentifier();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier13.getTree());
            // /home/bigben/Desktop/Java.g:346:45: ( DOTSTAR )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==DOTSTAR) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: DOTSTAR
                    {
                    DOTSTAR14=(Token)input.LT(1);
                    match(input,DOTSTAR,FOLLOW_DOTSTAR_in_importDeclaration4664); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DOTSTAR14_tree = (CommonTree)adaptor.create(DOTSTAR14);
                    adaptor.addChild(root_0, DOTSTAR14_tree);
                    }

                    }
                    break;

            }

            SEMI15=(Token)input.LT(1);
            match(input,SEMI,FOLLOW_SEMI_in_importDeclaration4667); if (failed) return retval;
            if ( backtracking==0 ) {
            SEMI15_tree = (CommonTree)adaptor.create(SEMI15);
            adaptor.addChild(root_0, SEMI15_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 5, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end importDeclaration

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeDeclaration
    // /home/bigben/Desktop/Java.g:349:1: typeDeclaration : modifierList ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] ) ;
    public final typeDeclaration_return typeDeclaration() throws RecognitionException {
        typeDeclaration_return retval = new typeDeclaration_return();
        retval.start = input.LT(1);
        int typeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        modifierList_return modifierList16 = null;

        classTypeDeclaration_return classTypeDeclaration17 = null;

        interfaceTypeDeclaration_return interfaceTypeDeclaration18 = null;

        enumTypeDeclaration_return enumTypeDeclaration19 = null;

        annotationTypeDeclaration_return annotationTypeDeclaration20 = null;



        try {
            if ( backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // /home/bigben/Desktop/Java.g:350:5: ( modifierList ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] ) )
            // /home/bigben/Desktop/Java.g:350:9: modifierList ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_modifierList_in_typeDeclaration4690);
            modifierList16=modifierList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, modifierList16.getTree());
            // /home/bigben/Desktop/Java.g:351:9: ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] )
            int alt7=4;
            switch ( input.LA(1) ) {
            case CLASS:
                {
                alt7=1;
                }
                break;
            case INTERFACE:
                {
                alt7=2;
                }
                break;
            case ENUM:
                {
                alt7=3;
                }
                break;
            case AT:
                {
                alt7=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("351:9: ( classTypeDeclaration[$modifierList.tree] | interfaceTypeDeclaration[$modifierList.tree] | enumTypeDeclaration[$modifierList.tree] | annotationTypeDeclaration[$modifierList.tree] )", 7, 0, input);

                throw nvae;
            }

            switch (alt7) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:351:13: classTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_classTypeDeclaration_in_typeDeclaration4704);
                    classTypeDeclaration17=classTypeDeclaration(((CommonTree)modifierList16.tree));
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, classTypeDeclaration17.getTree());

                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:352:13: interfaceTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_interfaceTypeDeclaration_in_typeDeclaration4719);
                    interfaceTypeDeclaration18=interfaceTypeDeclaration(((CommonTree)modifierList16.tree));
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, interfaceTypeDeclaration18.getTree());

                    }
                    break;
                case 3 :
                    // /home/bigben/Desktop/Java.g:353:13: enumTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_enumTypeDeclaration_in_typeDeclaration4734);
                    enumTypeDeclaration19=enumTypeDeclaration(((CommonTree)modifierList16.tree));
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, enumTypeDeclaration19.getTree());

                    }
                    break;
                case 4 :
                    // /home/bigben/Desktop/Java.g:354:13: annotationTypeDeclaration[$modifierList.tree]
                    {
                    pushFollow(FOLLOW_annotationTypeDeclaration_in_typeDeclaration4749);
                    annotationTypeDeclaration20=annotationTypeDeclaration(((CommonTree)modifierList16.tree));
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, annotationTypeDeclaration20.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 6, typeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end typeDeclaration

    public static class classTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start classTypeDeclaration
    // /home/bigben/Desktop/Java.g:358:1: classTypeDeclaration[CommonTree modifiers] : CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody ) ;
    public final classTypeDeclaration_return classTypeDeclaration(CommonTree modifiers) throws RecognitionException {
        classTypeDeclaration_return retval = new classTypeDeclaration_return();
        retval.start = input.LT(1);
        int classTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CLASS21=null;
        Token IDENT22=null;
        genericTypeParameterList_return genericTypeParameterList23 = null;

        classExtendsClause_return classExtendsClause24 = null;

        implementsClause_return implementsClause25 = null;

        classBody_return classBody26 = null;


        CommonTree CLASS21_tree=null;
        CommonTree IDENT22_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_classExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule classExtendsClause");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // /home/bigben/Desktop/Java.g:359:5: ( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody ) )
            // /home/bigben/Desktop/Java.g:359:9: CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody
            {
            CLASS21=(Token)input.LT(1);
            match(input,CLASS,FOLLOW_CLASS_in_classTypeDeclaration4784); if (failed) return retval;
            if ( backtracking==0 ) stream_CLASS.add(CLASS21);

            IDENT22=(Token)input.LT(1);
            match(input,IDENT,FOLLOW_IDENT_in_classTypeDeclaration4786); if (failed) return retval;
            if ( backtracking==0 ) stream_IDENT.add(IDENT22);

            // /home/bigben/Desktop/Java.g:359:21: ( genericTypeParameterList )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==LESS_THAN) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: genericTypeParameterList
                    {
                    pushFollow(FOLLOW_genericTypeParameterList_in_classTypeDeclaration4788);
                    genericTypeParameterList23=genericTypeParameterList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList23.getTree());

                    }
                    break;

            }

            // /home/bigben/Desktop/Java.g:359:47: ( classExtendsClause )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==EXTENDS) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: classExtendsClause
                    {
                    pushFollow(FOLLOW_classExtendsClause_in_classTypeDeclaration4791);
                    classExtendsClause24=classExtendsClause();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_classExtendsClause.add(classExtendsClause24.getTree());

                    }
                    break;

            }

            // /home/bigben/Desktop/Java.g:359:67: ( implementsClause )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==IMPLEMENTS) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: implementsClause
                    {
                    pushFollow(FOLLOW_implementsClause_in_classTypeDeclaration4794);
                    implementsClause25=implementsClause();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_implementsClause.add(implementsClause25.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_classTypeDeclaration4797);
            classBody26=classBody();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_classBody.add(classBody26.getTree());

            // AST REWRITE
            // elements: classBody, implementsClause, IDENT, CLASS, classExtendsClause, genericTypeParameterList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 360:9: -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody )
            {
                // /home/bigben/Desktop/Java.g:360:13: ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_CLASS.next(), root_1);

                adaptor.addChild(root_1, modifiers);
                adaptor.addChild(root_1, stream_IDENT.next());
                // /home/bigben/Desktop/Java.g:360:40: ( genericTypeParameterList )?
                if ( stream_genericTypeParameterList.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeParameterList.next());

                }
                stream_genericTypeParameterList.reset();
                // /home/bigben/Desktop/Java.g:360:66: ( classExtendsClause )?
                if ( stream_classExtendsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_classExtendsClause.next());

                }
                stream_classExtendsClause.reset();
                // /home/bigben/Desktop/Java.g:360:86: ( implementsClause )?
                if ( stream_implementsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_implementsClause.next());

                }
                stream_implementsClause.reset();
                adaptor.addChild(root_1, stream_classBody.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 7, classTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end classTypeDeclaration

    public static class classExtendsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start classExtendsClause
    // /home/bigben/Desktop/Java.g:363:1: classExtendsClause : EXTENDS type -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type ) ;
    public final classExtendsClause_return classExtendsClause() throws RecognitionException {
        classExtendsClause_return retval = new classExtendsClause_return();
        retval.start = input.LT(1);
        int classExtendsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXTENDS27=null;
        type_return type28 = null;


        CommonTree EXTENDS27_tree=null;
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // /home/bigben/Desktop/Java.g:364:5: ( EXTENDS type -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type ) )
            // /home/bigben/Desktop/Java.g:364:9: EXTENDS type
            {
            EXTENDS27=(Token)input.LT(1);
            match(input,EXTENDS,FOLLOW_EXTENDS_in_classExtendsClause4850); if (failed) return retval;
            if ( backtracking==0 ) stream_EXTENDS.add(EXTENDS27);

            pushFollow(FOLLOW_type_in_classExtendsClause4852);
            type28=type();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_type.add(type28.getTree());

            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 365:9: -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type )
            {
                // /home/bigben/Desktop/Java.g:365:13: ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(EXTENDS_CLAUSE, EXTENDS27,  "EXTENDS_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_type.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 8, classExtendsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end classExtendsClause

    public static class interfaceExtendsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start interfaceExtendsClause
    // /home/bigben/Desktop/Java.g:368:1: interfaceExtendsClause : EXTENDS typeList -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList ) ;
    public final interfaceExtendsClause_return interfaceExtendsClause() throws RecognitionException {
        interfaceExtendsClause_return retval = new interfaceExtendsClause_return();
        retval.start = input.LT(1);
        int interfaceExtendsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXTENDS29=null;
        typeList_return typeList30 = null;


        CommonTree EXTENDS29_tree=null;
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // /home/bigben/Desktop/Java.g:369:5: ( EXTENDS typeList -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList ) )
            // /home/bigben/Desktop/Java.g:369:9: EXTENDS typeList
            {
            EXTENDS29=(Token)input.LT(1);
            match(input,EXTENDS,FOLLOW_EXTENDS_in_interfaceExtendsClause4896); if (failed) return retval;
            if ( backtracking==0 ) stream_EXTENDS.add(EXTENDS29);

            pushFollow(FOLLOW_typeList_in_interfaceExtendsClause4898);
            typeList30=typeList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_typeList.add(typeList30.getTree());

            // AST REWRITE
            // elements: typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 370:9: -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList )
            {
                // /home/bigben/Desktop/Java.g:370:13: ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(EXTENDS_CLAUSE, EXTENDS29,  "EXTENDS_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_typeList.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 9, interfaceExtendsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end interfaceExtendsClause

    public static class implementsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start implementsClause
    // /home/bigben/Desktop/Java.g:373:1: implementsClause : IMPLEMENTS typeList -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList ) ;
    public final implementsClause_return implementsClause() throws RecognitionException {
        implementsClause_return retval = new implementsClause_return();
        retval.start = input.LT(1);
        int implementsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IMPLEMENTS31=null;
        typeList_return typeList32 = null;


        CommonTree IMPLEMENTS31_tree=null;
        RewriteRuleTokenStream stream_IMPLEMENTS=new RewriteRuleTokenStream(adaptor,"token IMPLEMENTS");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // /home/bigben/Desktop/Java.g:374:5: ( IMPLEMENTS typeList -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList ) )
            // /home/bigben/Desktop/Java.g:374:9: IMPLEMENTS typeList
            {
            IMPLEMENTS31=(Token)input.LT(1);
            match(input,IMPLEMENTS,FOLLOW_IMPLEMENTS_in_implementsClause4942); if (failed) return retval;
            if ( backtracking==0 ) stream_IMPLEMENTS.add(IMPLEMENTS31);

            pushFollow(FOLLOW_typeList_in_implementsClause4944);
            typeList32=typeList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_typeList.add(typeList32.getTree());

            // AST REWRITE
            // elements: typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 375:9: -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList )
            {
                // /home/bigben/Desktop/Java.g:375:13: ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(IMPLEMENTS_CLAUSE, IMPLEMENTS31,  "IMPLEMENTS_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_typeList.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 10, implementsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end implementsClause

    public static class genericTypeParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start genericTypeParameterList
    // /home/bigben/Desktop/Java.g:378:1: genericTypeParameterList : LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ ) ;
    public final genericTypeParameterList_return genericTypeParameterList() throws RecognitionException {
        genericTypeParameterList_return retval = new genericTypeParameterList_return();
        retval.start = input.LT(1);
        int genericTypeParameterList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_THAN33=null;
        Token COMMA35=null;
        genericTypeParameter_return genericTypeParameter34 = null;

        genericTypeParameter_return genericTypeParameter36 = null;

        genericTypeListClosing_return genericTypeListClosing37 = null;


        CommonTree LESS_THAN33_tree=null;
        CommonTree COMMA35_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");
        RewriteRuleSubtreeStream stream_genericTypeParameter=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameter");
        RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // /home/bigben/Desktop/Java.g:379:5: ( LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ ) )
            // /home/bigben/Desktop/Java.g:379:9: LESS_THAN genericTypeParameter ( COMMA genericTypeParameter )* genericTypeListClosing
            {
            LESS_THAN33=(Token)input.LT(1);
            match(input,LESS_THAN,FOLLOW_LESS_THAN_in_genericTypeParameterList4989); if (failed) return retval;
            if ( backtracking==0 ) stream_LESS_THAN.add(LESS_THAN33);

            pushFollow(FOLLOW_genericTypeParameter_in_genericTypeParameterList4991);
            genericTypeParameter34=genericTypeParameter();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_genericTypeParameter.add(genericTypeParameter34.getTree());
            // /home/bigben/Desktop/Java.g:379:40: ( COMMA genericTypeParameter )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==COMMA) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:379:41: COMMA genericTypeParameter
            	    {
            	    COMMA35=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_genericTypeParameterList4994); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMA.add(COMMA35);

            	    pushFollow(FOLLOW_genericTypeParameter_in_genericTypeParameterList4996);
            	    genericTypeParameter36=genericTypeParameter();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_genericTypeParameter.add(genericTypeParameter36.getTree());

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);

            pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeParameterList5000);
            genericTypeListClosing37=genericTypeListClosing();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_genericTypeListClosing.add(genericTypeListClosing37.getTree());

            // AST REWRITE
            // elements: genericTypeParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 380:9: -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ )
            {
                // /home/bigben/Desktop/Java.g:380:13: ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(GENERIC_TYPE_PARAM_LIST, LESS_THAN33,  "GENERIC_TYPE_PARAM_LIST"), root_1);

                if ( !(stream_genericTypeParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_genericTypeParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeParameter.next());

                }
                stream_genericTypeParameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 11, genericTypeParameterList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end genericTypeParameterList

    public static class genericTypeListClosing_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start genericTypeListClosing
    // /home/bigben/Desktop/Java.g:383:1: genericTypeListClosing : ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT | );
    public final genericTypeListClosing_return genericTypeListClosing() throws RecognitionException {
        genericTypeListClosing_return retval = new genericTypeListClosing_return();
        retval.start = input.LT(1);
        int genericTypeListClosing_StartIndex = input.index();
        CommonTree root_0 = null;

        Token GREATER_THAN38=null;
        Token SHIFT_RIGHT39=null;
        Token BIT_SHIFT_RIGHT40=null;

        CommonTree GREATER_THAN38_tree=null;
        CommonTree SHIFT_RIGHT39_tree=null;
        CommonTree BIT_SHIFT_RIGHT40_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // /home/bigben/Desktop/Java.g:387:5: ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT | )
            int alt12=4;
            switch ( input.LA(1) ) {
            case GREATER_THAN:
                {
                int LA12_1 = input.LA(2);

                if ( (synpred14()) ) {
                    alt12=1;
                }
                else if ( (true) ) {
                    alt12=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("383:1: genericTypeListClosing : ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT | );", 12, 1, input);

                    throw nvae;
                }
                }
                break;
            case SHIFT_RIGHT:
                {
                int LA12_2 = input.LA(2);

                if ( (synpred15()) ) {
                    alt12=2;
                }
                else if ( (true) ) {
                    alt12=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("383:1: genericTypeListClosing : ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT | );", 12, 2, input);

                    throw nvae;
                }
                }
                break;
            case BIT_SHIFT_RIGHT:
                {
                int LA12_3 = input.LA(2);

                if ( (synpred16()) ) {
                    alt12=3;
                }
                else if ( (true) ) {
                    alt12=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("383:1: genericTypeListClosing : ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT | );", 12, 3, input);

                    throw nvae;
                }
                }
                break;
            case EOF:
            case AND:
            case AND_ASSIGN:
            case ASSIGN:
            case BIT_SHIFT_RIGHT_ASSIGN:
            case COLON:
            case COMMA:
            case DIV_ASSIGN:
            case DOT:
            case ELLIPSIS:
            case EQUAL:
            case LBRACK:
            case LCURLY:
            case LOGICAL_AND:
            case LOGICAL_OR:
            case LPAREN:
            case MINUS_ASSIGN:
            case MOD_ASSIGN:
            case NOT_EQUAL:
            case OR:
            case OR_ASSIGN:
            case PLUS_ASSIGN:
            case QUESTION:
            case RBRACK:
            case RCURLY:
            case RPAREN:
            case SEMI:
            case SHIFT_LEFT_ASSIGN:
            case SHIFT_RIGHT_ASSIGN:
            case STAR_ASSIGN:
            case XOR:
            case XOR_ASSIGN:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case EXTENDS:
            case FLOAT:
            case IMPLEMENTS:
            case INT:
            case LONG:
            case SHORT:
            case SUPER:
            case THIS:
            case VOID:
            case IDENT:
                {
                alt12=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("383:1: genericTypeListClosing : ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT | );", 12, 0, input);

                throw nvae;
            }

            switch (alt12) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:387:9: GREATER_THAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    GREATER_THAN38=(Token)input.LT(1);
                    match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_genericTypeListClosing5115); if (failed) return retval;
                    if ( backtracking==0 ) {
                    GREATER_THAN38_tree = (CommonTree)adaptor.create(GREATER_THAN38);
                    adaptor.addChild(root_0, GREATER_THAN38_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:388:9: SHIFT_RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SHIFT_RIGHT39=(Token)input.LT(1);
                    match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_genericTypeListClosing5125); if (failed) return retval;
                    if ( backtracking==0 ) {
                    SHIFT_RIGHT39_tree = (CommonTree)adaptor.create(SHIFT_RIGHT39);
                    adaptor.addChild(root_0, SHIFT_RIGHT39_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/bigben/Desktop/Java.g:389:9: BIT_SHIFT_RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BIT_SHIFT_RIGHT40=(Token)input.LT(1);
                    match(input,BIT_SHIFT_RIGHT,FOLLOW_BIT_SHIFT_RIGHT_in_genericTypeListClosing5135); if (failed) return retval;
                    if ( backtracking==0 ) {
                    BIT_SHIFT_RIGHT40_tree = (CommonTree)adaptor.create(BIT_SHIFT_RIGHT40);
                    adaptor.addChild(root_0, BIT_SHIFT_RIGHT40_tree);
                    }

                    }
                    break;
                case 4 :
                    // /home/bigben/Desktop/Java.g:391:5: 
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 12, genericTypeListClosing_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end genericTypeListClosing

    public static class genericTypeParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start genericTypeParameter
    // /home/bigben/Desktop/Java.g:393:1: genericTypeParameter : IDENT ( bound )? -> ^( IDENT ( bound )? ) ;
    public final genericTypeParameter_return genericTypeParameter() throws RecognitionException {
        genericTypeParameter_return retval = new genericTypeParameter_return();
        retval.start = input.LT(1);
        int genericTypeParameter_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT41=null;
        bound_return bound42 = null;


        CommonTree IDENT41_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_bound=new RewriteRuleSubtreeStream(adaptor,"rule bound");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // /home/bigben/Desktop/Java.g:394:5: ( IDENT ( bound )? -> ^( IDENT ( bound )? ) )
            // /home/bigben/Desktop/Java.g:394:9: IDENT ( bound )?
            {
            IDENT41=(Token)input.LT(1);
            match(input,IDENT,FOLLOW_IDENT_in_genericTypeParameter5163); if (failed) return retval;
            if ( backtracking==0 ) stream_IDENT.add(IDENT41);

            // /home/bigben/Desktop/Java.g:394:15: ( bound )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==EXTENDS) ) {
                int LA13_1 = input.LA(2);

                if ( (LA13_1==BOOLEAN||LA13_1==BYTE||LA13_1==CHAR||LA13_1==DOUBLE||LA13_1==FLOAT||(LA13_1>=INT && LA13_1<=LONG)||LA13_1==SHORT) ) {
                    int LA13_3 = input.LA(3);

                    if ( (synpred17()) ) {
                        alt13=1;
                    }
                }
                else if ( (LA13_1==IDENT) ) {
                    int LA13_4 = input.LA(3);

                    if ( (synpred17()) ) {
                        alt13=1;
                    }
                }
            }
            switch (alt13) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: bound
                    {
                    pushFollow(FOLLOW_bound_in_genericTypeParameter5165);
                    bound42=bound();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_bound.add(bound42.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: IDENT, bound
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 395:9: -> ^( IDENT ( bound )? )
            {
                // /home/bigben/Desktop/Java.g:395:13: ^( IDENT ( bound )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_IDENT.next(), root_1);

                // /home/bigben/Desktop/Java.g:395:21: ( bound )?
                if ( stream_bound.hasNext() ) {
                    adaptor.addChild(root_1, stream_bound.next());

                }
                stream_bound.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 13, genericTypeParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end genericTypeParameter

    public static class bound_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start bound
    // /home/bigben/Desktop/Java.g:398:1: bound : EXTENDS type ( AND type )* -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ ) ;
    public final bound_return bound() throws RecognitionException {
        bound_return retval = new bound_return();
        retval.start = input.LT(1);
        int bound_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXTENDS43=null;
        Token AND45=null;
        type_return type44 = null;

        type_return type46 = null;


        CommonTree EXTENDS43_tree=null;
        CommonTree AND45_tree=null;
        RewriteRuleTokenStream stream_AND=new RewriteRuleTokenStream(adaptor,"token AND");
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // /home/bigben/Desktop/Java.g:399:5: ( EXTENDS type ( AND type )* -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ ) )
            // /home/bigben/Desktop/Java.g:399:9: EXTENDS type ( AND type )*
            {
            EXTENDS43=(Token)input.LT(1);
            match(input,EXTENDS,FOLLOW_EXTENDS_in_bound5211); if (failed) return retval;
            if ( backtracking==0 ) stream_EXTENDS.add(EXTENDS43);

            pushFollow(FOLLOW_type_in_bound5213);
            type44=type();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_type.add(type44.getTree());
            // /home/bigben/Desktop/Java.g:399:22: ( AND type )*
            loop14:
            do {
                int alt14=2;
                int LA14_0 = input.LA(1);

                if ( (LA14_0==AND) ) {
                    alt14=1;
                }


                switch (alt14) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:399:23: AND type
            	    {
            	    AND45=(Token)input.LT(1);
            	    match(input,AND,FOLLOW_AND_in_bound5216); if (failed) return retval;
            	    if ( backtracking==0 ) stream_AND.add(AND45);

            	    pushFollow(FOLLOW_type_in_bound5218);
            	    type46=type();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_type.add(type46.getTree());

            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);


            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 400:9: -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ )
            {
                // /home/bigben/Desktop/Java.g:400:13: ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(EXTENDS_BOUND_LIST, EXTENDS43,  "EXTENDS_BOUND_LIST"), root_1);

                if ( !(stream_type.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_type.next());

                }
                stream_type.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 14, bound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end bound

    public static class enumTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start enumTypeDeclaration
    // /home/bigben/Desktop/Java.g:403:1: enumTypeDeclaration[CommonTree modifiers] : ENUM IDENT ( implementsClause )? enumBody -> ^( ENUM IDENT ( implementsClause )? enumBody ) ;
    public final enumTypeDeclaration_return enumTypeDeclaration(CommonTree modifiers) throws RecognitionException {
        enumTypeDeclaration_return retval = new enumTypeDeclaration_return();
        retval.start = input.LT(1);
        int enumTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ENUM47=null;
        Token IDENT48=null;
        implementsClause_return implementsClause49 = null;

        enumBody_return enumBody50 = null;


        CommonTree ENUM47_tree=null;
        CommonTree IDENT48_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ENUM=new RewriteRuleTokenStream(adaptor,"token ENUM");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_enumBody=new RewriteRuleSubtreeStream(adaptor,"rule enumBody");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // /home/bigben/Desktop/Java.g:404:5: ( ENUM IDENT ( implementsClause )? enumBody -> ^( ENUM IDENT ( implementsClause )? enumBody ) )
            // /home/bigben/Desktop/Java.g:404:9: ENUM IDENT ( implementsClause )? enumBody
            {
            ENUM47=(Token)input.LT(1);
            match(input,ENUM,FOLLOW_ENUM_in_enumTypeDeclaration5259); if (failed) return retval;
            if ( backtracking==0 ) stream_ENUM.add(ENUM47);

            IDENT48=(Token)input.LT(1);
            match(input,IDENT,FOLLOW_IDENT_in_enumTypeDeclaration5261); if (failed) return retval;
            if ( backtracking==0 ) stream_IDENT.add(IDENT48);

            // /home/bigben/Desktop/Java.g:404:20: ( implementsClause )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==IMPLEMENTS) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: implementsClause
                    {
                    pushFollow(FOLLOW_implementsClause_in_enumTypeDeclaration5263);
                    implementsClause49=implementsClause();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_implementsClause.add(implementsClause49.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_enumBody_in_enumTypeDeclaration5266);
            enumBody50=enumBody();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_enumBody.add(enumBody50.getTree());

            // AST REWRITE
            // elements: implementsClause, ENUM, enumBody, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 405:9: -> ^( ENUM IDENT ( implementsClause )? enumBody )
            {
                // /home/bigben/Desktop/Java.g:405:13: ^( ENUM IDENT ( implementsClause )? enumBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ENUM.next(), root_1);

                adaptor.addChild(root_1, modifiers);
                adaptor.addChild(root_1, stream_IDENT.next());
                // /home/bigben/Desktop/Java.g:405:39: ( implementsClause )?
                if ( stream_implementsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_implementsClause.next());

                }
                stream_implementsClause.reset();
                adaptor.addChild(root_1, stream_enumBody.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 15, enumTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end enumTypeDeclaration

    public static class enumBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start enumBody
    // /home/bigben/Desktop/Java.g:408:1: enumBody : LCURLY enumScopeDeclarations RCURLY -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations ) ;
    public final enumBody_return enumBody() throws RecognitionException {
        enumBody_return retval = new enumBody_return();
        retval.start = input.LT(1);
        int enumBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY51=null;
        Token RCURLY53=null;
        enumScopeDeclarations_return enumScopeDeclarations52 = null;


        CommonTree LCURLY51_tree=null;
        CommonTree RCURLY53_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_enumScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule enumScopeDeclarations");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // /home/bigben/Desktop/Java.g:409:5: ( LCURLY enumScopeDeclarations RCURLY -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations ) )
            // /home/bigben/Desktop/Java.g:409:9: LCURLY enumScopeDeclarations RCURLY
            {
            LCURLY51=(Token)input.LT(1);
            match(input,LCURLY,FOLLOW_LCURLY_in_enumBody5313); if (failed) return retval;
            if ( backtracking==0 ) stream_LCURLY.add(LCURLY51);

            pushFollow(FOLLOW_enumScopeDeclarations_in_enumBody5315);
            enumScopeDeclarations52=enumScopeDeclarations();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_enumScopeDeclarations.add(enumScopeDeclarations52.getTree());
            RCURLY53=(Token)input.LT(1);
            match(input,RCURLY,FOLLOW_RCURLY_in_enumBody5317); if (failed) return retval;
            if ( backtracking==0 ) stream_RCURLY.add(RCURLY53);


            // AST REWRITE
            // elements: enumScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 410:9: -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations )
            {
                // /home/bigben/Desktop/Java.g:410:13: ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(ENUM_TOP_LEVEL_SCOPE, LCURLY51,  "ENUM_TOP_LEVEL_SCOPE"), root_1);

                adaptor.addChild(root_1, stream_enumScopeDeclarations.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 16, enumBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end enumBody

    public static class enumScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start enumScopeDeclarations
    // /home/bigben/Desktop/Java.g:413:1: enumScopeDeclarations : enumConstants ( COMMA )? ( enumClassScopeDeclarations )? ;
    public final enumScopeDeclarations_return enumScopeDeclarations() throws RecognitionException {
        enumScopeDeclarations_return retval = new enumScopeDeclarations_return();
        retval.start = input.LT(1);
        int enumScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA55=null;
        enumConstants_return enumConstants54 = null;

        enumClassScopeDeclarations_return enumClassScopeDeclarations56 = null;


        CommonTree COMMA55_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // /home/bigben/Desktop/Java.g:414:5: ( enumConstants ( COMMA )? ( enumClassScopeDeclarations )? )
            // /home/bigben/Desktop/Java.g:414:9: enumConstants ( COMMA )? ( enumClassScopeDeclarations )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_enumConstants_in_enumScopeDeclarations5354);
            enumConstants54=enumConstants();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, enumConstants54.getTree());
            // /home/bigben/Desktop/Java.g:414:23: ( COMMA )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==COMMA) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:414:24: COMMA
                    {
                    COMMA55=(Token)input.LT(1);
                    match(input,COMMA,FOLLOW_COMMA_in_enumScopeDeclarations5357); if (failed) return retval;
                    if ( backtracking==0 ) {
                    COMMA55_tree = (CommonTree)adaptor.create(COMMA55);
                    adaptor.addChild(root_0, COMMA55_tree);
                    }

                    }
                    break;

            }

            // /home/bigben/Desktop/Java.g:414:32: ( enumClassScopeDeclarations )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==SEMI) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: enumClassScopeDeclarations
                    {
                    pushFollow(FOLLOW_enumClassScopeDeclarations_in_enumScopeDeclarations5361);
                    enumClassScopeDeclarations56=enumClassScopeDeclarations();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, enumClassScopeDeclarations56.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 17, enumScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end enumScopeDeclarations

    public static class enumClassScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start enumClassScopeDeclarations
    // /home/bigben/Desktop/Java.g:417:1: enumClassScopeDeclarations : SEMI ( classScopeDeclarations )* -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) ;
    public final enumClassScopeDeclarations_return enumClassScopeDeclarations() throws RecognitionException {
        enumClassScopeDeclarations_return retval = new enumClassScopeDeclarations_return();
        retval.start = input.LT(1);
        int enumClassScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEMI57=null;
        classScopeDeclarations_return classScopeDeclarations58 = null;


        CommonTree SEMI57_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_classScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule classScopeDeclarations");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // /home/bigben/Desktop/Java.g:418:5: ( SEMI ( classScopeDeclarations )* -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) )
            // /home/bigben/Desktop/Java.g:418:9: SEMI ( classScopeDeclarations )*
            {
            SEMI57=(Token)input.LT(1);
            match(input,SEMI,FOLLOW_SEMI_in_enumClassScopeDeclarations5381); if (failed) return retval;
            if ( backtracking==0 ) stream_SEMI.add(SEMI57);

            // /home/bigben/Desktop/Java.g:418:14: ( classScopeDeclarations )*
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==AT||LA18_0==LCURLY||LA18_0==LESS_THAN||LA18_0==SEMI||LA18_0==ABSTRACT||LA18_0==BOOLEAN||LA18_0==BYTE||(LA18_0>=CHAR && LA18_0<=CLASS)||LA18_0==DOUBLE||LA18_0==ENUM||LA18_0==FINAL||LA18_0==FLOAT||LA18_0==INTERFACE||(LA18_0>=INT && LA18_0<=NATIVE)||(LA18_0>=PRIVATE && LA18_0<=PUBLIC)||(LA18_0>=SHORT && LA18_0<=STRICTFP)||LA18_0==SYNCHRONIZED||LA18_0==TRANSIENT||(LA18_0>=VOID && LA18_0<=VOLATILE)||LA18_0==IDENT) ) {
                    alt18=1;
                }


                switch (alt18) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:0:0: classScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_classScopeDeclarations_in_enumClassScopeDeclarations5383);
            	    classScopeDeclarations58=classScopeDeclarations();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_classScopeDeclarations.add(classScopeDeclarations58.getTree());

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);


            // AST REWRITE
            // elements: classScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 419:9: -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
            {
                // /home/bigben/Desktop/Java.g:419:13: ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(CLASS_TOP_LEVEL_SCOPE, SEMI57,  "CLASS_TOP_LEVEL_SCOPE"), root_1);

                // /home/bigben/Desktop/Java.g:419:69: ( classScopeDeclarations )*
                while ( stream_classScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_classScopeDeclarations.next());

                }
                stream_classScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 18, enumClassScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end enumClassScopeDeclarations

    public static class enumConstants_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start enumConstants
    // /home/bigben/Desktop/Java.g:422:1: enumConstants : enumConstant ( COMMA enumConstant )* ;
    public final enumConstants_return enumConstants() throws RecognitionException {
        enumConstants_return retval = new enumConstants_return();
        retval.start = input.LT(1);
        int enumConstants_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA60=null;
        enumConstant_return enumConstant59 = null;

        enumConstant_return enumConstant61 = null;


        CommonTree COMMA60_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // /home/bigben/Desktop/Java.g:423:5: ( enumConstant ( COMMA enumConstant )* )
            // /home/bigben/Desktop/Java.g:423:9: enumConstant ( COMMA enumConstant )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_enumConstant_in_enumConstants5422);
            enumConstant59=enumConstant();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, enumConstant59.getTree());
            // /home/bigben/Desktop/Java.g:423:22: ( COMMA enumConstant )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==COMMA) ) {
                    int LA19_1 = input.LA(2);

                    if ( (LA19_1==AT||LA19_1==IDENT) ) {
                        alt19=1;
                    }


                }


                switch (alt19) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:423:23: COMMA enumConstant
            	    {
            	    COMMA60=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_enumConstants5425); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    COMMA60_tree = (CommonTree)adaptor.create(COMMA60);
            	    adaptor.addChild(root_0, COMMA60_tree);
            	    }
            	    pushFollow(FOLLOW_enumConstant_in_enumConstants5427);
            	    enumConstant61=enumConstant();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, enumConstant61.getTree());

            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 19, enumConstants_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end enumConstants

    public static class enumConstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start enumConstant
    // /home/bigben/Desktop/Java.g:426:1: enumConstant : annotationList IDENT ( arguments )? ( classBody )? ;
    public final enumConstant_return enumConstant() throws RecognitionException {
        enumConstant_return retval = new enumConstant_return();
        retval.start = input.LT(1);
        int enumConstant_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT63=null;
        annotationList_return annotationList62 = null;

        arguments_return arguments64 = null;

        classBody_return classBody65 = null;


        CommonTree IDENT63_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // /home/bigben/Desktop/Java.g:427:5: ( annotationList IDENT ( arguments )? ( classBody )? )
            // /home/bigben/Desktop/Java.g:427:9: annotationList IDENT ( arguments )? ( classBody )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_annotationList_in_enumConstant5452);
            annotationList62=annotationList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, annotationList62.getTree());
            IDENT63=(Token)input.LT(1);
            match(input,IDENT,FOLLOW_IDENT_in_enumConstant5454); if (failed) return retval;
            if ( backtracking==0 ) {
            IDENT63_tree = (CommonTree)adaptor.create(IDENT63);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT63_tree, root_0);
            }
            // /home/bigben/Desktop/Java.g:427:31: ( arguments )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==LPAREN) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant5457);
                    arguments64=arguments();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, arguments64.getTree());

                    }
                    break;

            }

            // /home/bigben/Desktop/Java.g:427:42: ( classBody )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==LCURLY) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant5460);
                    classBody65=classBody();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, classBody65.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 20, enumConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end enumConstant

    public static class interfaceTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start interfaceTypeDeclaration
    // /home/bigben/Desktop/Java.g:430:1: interfaceTypeDeclaration[CommonTree modifiers] : INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody ) ;
    public final interfaceTypeDeclaration_return interfaceTypeDeclaration(CommonTree modifiers) throws RecognitionException {
        interfaceTypeDeclaration_return retval = new interfaceTypeDeclaration_return();
        retval.start = input.LT(1);
        int interfaceTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INTERFACE66=null;
        Token IDENT67=null;
        genericTypeParameterList_return genericTypeParameterList68 = null;

        interfaceExtendsClause_return interfaceExtendsClause69 = null;

        interfaceBody_return interfaceBody70 = null;


        CommonTree INTERFACE66_tree=null;
        CommonTree IDENT67_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_interfaceBody=new RewriteRuleSubtreeStream(adaptor,"rule interfaceBody");
        RewriteRuleSubtreeStream stream_interfaceExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule interfaceExtendsClause");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // /home/bigben/Desktop/Java.g:431:5: ( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody ) )
            // /home/bigben/Desktop/Java.g:431:9: INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody
            {
            INTERFACE66=(Token)input.LT(1);
            match(input,INTERFACE,FOLLOW_INTERFACE_in_interfaceTypeDeclaration5485); if (failed) return retval;
            if ( backtracking==0 ) stream_INTERFACE.add(INTERFACE66);

            IDENT67=(Token)input.LT(1);
            match(input,IDENT,FOLLOW_IDENT_in_interfaceTypeDeclaration5487); if (failed) return retval;
            if ( backtracking==0 ) stream_IDENT.add(IDENT67);

            // /home/bigben/Desktop/Java.g:431:25: ( genericTypeParameterList )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==LESS_THAN) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: genericTypeParameterList
                    {
                    pushFollow(FOLLOW_genericTypeParameterList_in_interfaceTypeDeclaration5489);
                    genericTypeParameterList68=genericTypeParameterList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList68.getTree());

                    }
                    break;

            }

            // /home/bigben/Desktop/Java.g:431:51: ( interfaceExtendsClause )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==EXTENDS) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: interfaceExtendsClause
                    {
                    pushFollow(FOLLOW_interfaceExtendsClause_in_interfaceTypeDeclaration5492);
                    interfaceExtendsClause69=interfaceExtendsClause();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_interfaceExtendsClause.add(interfaceExtendsClause69.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_interfaceBody_in_interfaceTypeDeclaration5495);
            interfaceBody70=interfaceBody();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_interfaceBody.add(interfaceBody70.getTree());

            // AST REWRITE
            // elements: interfaceExtendsClause, IDENT, interfaceBody, INTERFACE, genericTypeParameterList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 432:9: -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
            {
                // /home/bigben/Desktop/Java.g:432:13: ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_INTERFACE.next(), root_1);

                adaptor.addChild(root_1, modifiers);
                adaptor.addChild(root_1, stream_IDENT.next());
                // /home/bigben/Desktop/Java.g:432:44: ( genericTypeParameterList )?
                if ( stream_genericTypeParameterList.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeParameterList.next());

                }
                stream_genericTypeParameterList.reset();
                // /home/bigben/Desktop/Java.g:432:70: ( interfaceExtendsClause )?
                if ( stream_interfaceExtendsClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_interfaceExtendsClause.next());

                }
                stream_interfaceExtendsClause.reset();
                adaptor.addChild(root_1, stream_interfaceBody.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 21, interfaceTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end interfaceTypeDeclaration

    public static class typeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeList
    // /home/bigben/Desktop/Java.g:435:1: typeList : type ( COMMA type )* ;
    public final typeList_return typeList() throws RecognitionException {
        typeList_return retval = new typeList_return();
        retval.start = input.LT(1);
        int typeList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA72=null;
        type_return type71 = null;

        type_return type73 = null;


        CommonTree COMMA72_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // /home/bigben/Desktop/Java.g:436:5: ( type ( COMMA type )* )
            // /home/bigben/Desktop/Java.g:436:9: type ( COMMA type )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeList5545);
            type71=type();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, type71.getTree());
            // /home/bigben/Desktop/Java.g:436:14: ( COMMA type )*
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==COMMA) ) {
                    alt24=1;
                }


                switch (alt24) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:436:15: COMMA type
            	    {
            	    COMMA72=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_typeList5548); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    COMMA72_tree = (CommonTree)adaptor.create(COMMA72);
            	    adaptor.addChild(root_0, COMMA72_tree);
            	    }
            	    pushFollow(FOLLOW_type_in_typeList5550);
            	    type73=type();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, type73.getTree());

            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 22, typeList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end typeList

    public static class classBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start classBody
    // /home/bigben/Desktop/Java.g:439:1: classBody : LCURLY ( classScopeDeclarations )* RCURLY -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) ;
    public final classBody_return classBody() throws RecognitionException {
        classBody_return retval = new classBody_return();
        retval.start = input.LT(1);
        int classBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY74=null;
        Token RCURLY76=null;
        classScopeDeclarations_return classScopeDeclarations75 = null;


        CommonTree LCURLY74_tree=null;
        CommonTree RCURLY76_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_classScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule classScopeDeclarations");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // /home/bigben/Desktop/Java.g:440:5: ( LCURLY ( classScopeDeclarations )* RCURLY -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) )
            // /home/bigben/Desktop/Java.g:440:9: LCURLY ( classScopeDeclarations )* RCURLY
            {
            LCURLY74=(Token)input.LT(1);
            match(input,LCURLY,FOLLOW_LCURLY_in_classBody5575); if (failed) return retval;
            if ( backtracking==0 ) stream_LCURLY.add(LCURLY74);

            // /home/bigben/Desktop/Java.g:440:16: ( classScopeDeclarations )*
            loop25:
            do {
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==AT||LA25_0==LCURLY||LA25_0==LESS_THAN||LA25_0==SEMI||LA25_0==ABSTRACT||LA25_0==BOOLEAN||LA25_0==BYTE||(LA25_0>=CHAR && LA25_0<=CLASS)||LA25_0==DOUBLE||LA25_0==ENUM||LA25_0==FINAL||LA25_0==FLOAT||LA25_0==INTERFACE||(LA25_0>=INT && LA25_0<=NATIVE)||(LA25_0>=PRIVATE && LA25_0<=PUBLIC)||(LA25_0>=SHORT && LA25_0<=STRICTFP)||LA25_0==SYNCHRONIZED||LA25_0==TRANSIENT||(LA25_0>=VOID && LA25_0<=VOLATILE)||LA25_0==IDENT) ) {
                    alt25=1;
                }


                switch (alt25) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:0:0: classScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_classScopeDeclarations_in_classBody5577);
            	    classScopeDeclarations75=classScopeDeclarations();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_classScopeDeclarations.add(classScopeDeclarations75.getTree());

            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);

            RCURLY76=(Token)input.LT(1);
            match(input,RCURLY,FOLLOW_RCURLY_in_classBody5580); if (failed) return retval;
            if ( backtracking==0 ) stream_RCURLY.add(RCURLY76);


            // AST REWRITE
            // elements: classScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 441:9: -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
            {
                // /home/bigben/Desktop/Java.g:441:13: ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(CLASS_TOP_LEVEL_SCOPE, LCURLY74,  "CLASS_TOP_LEVEL_SCOPE"), root_1);

                // /home/bigben/Desktop/Java.g:441:71: ( classScopeDeclarations )*
                while ( stream_classScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_classScopeDeclarations.next());

                }
                stream_classScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 23, classBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end classBody

    public static class interfaceBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start interfaceBody
    // /home/bigben/Desktop/Java.g:444:1: interfaceBody : LCURLY ( interfaceScopeDeclarations )* RCURLY -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"INTERFACE_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* ) ;
    public final interfaceBody_return interfaceBody() throws RecognitionException {
        interfaceBody_return retval = new interfaceBody_return();
        retval.start = input.LT(1);
        int interfaceBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY77=null;
        Token RCURLY79=null;
        interfaceScopeDeclarations_return interfaceScopeDeclarations78 = null;


        CommonTree LCURLY77_tree=null;
        CommonTree RCURLY79_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_interfaceScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule interfaceScopeDeclarations");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // /home/bigben/Desktop/Java.g:445:5: ( LCURLY ( interfaceScopeDeclarations )* RCURLY -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"INTERFACE_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* ) )
            // /home/bigben/Desktop/Java.g:445:9: LCURLY ( interfaceScopeDeclarations )* RCURLY
            {
            LCURLY77=(Token)input.LT(1);
            match(input,LCURLY,FOLLOW_LCURLY_in_interfaceBody5622); if (failed) return retval;
            if ( backtracking==0 ) stream_LCURLY.add(LCURLY77);

            // /home/bigben/Desktop/Java.g:445:16: ( interfaceScopeDeclarations )*
            loop26:
            do {
                int alt26=2;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==AT||LA26_0==LESS_THAN||LA26_0==SEMI||LA26_0==ABSTRACT||LA26_0==BOOLEAN||LA26_0==BYTE||(LA26_0>=CHAR && LA26_0<=CLASS)||LA26_0==DOUBLE||LA26_0==ENUM||LA26_0==FINAL||LA26_0==FLOAT||LA26_0==INTERFACE||(LA26_0>=INT && LA26_0<=NATIVE)||(LA26_0>=PRIVATE && LA26_0<=PUBLIC)||(LA26_0>=SHORT && LA26_0<=STRICTFP)||LA26_0==SYNCHRONIZED||LA26_0==TRANSIENT||(LA26_0>=VOID && LA26_0<=VOLATILE)||LA26_0==IDENT) ) {
                    alt26=1;
                }


                switch (alt26) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:0:0: interfaceScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_interfaceScopeDeclarations_in_interfaceBody5624);
            	    interfaceScopeDeclarations78=interfaceScopeDeclarations();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_interfaceScopeDeclarations.add(interfaceScopeDeclarations78.getTree());

            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);

            RCURLY79=(Token)input.LT(1);
            match(input,RCURLY,FOLLOW_RCURLY_in_interfaceBody5627); if (failed) return retval;
            if ( backtracking==0 ) stream_RCURLY.add(RCURLY79);


            // AST REWRITE
            // elements: interfaceScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 446:9: -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"INTERFACE_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* )
            {
                // /home/bigben/Desktop/Java.g:446:13: ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"INTERFACE_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(INTERFACE_TOP_LEVEL_SCOPE, LCURLY77,  "INTERFACE_TOP_LEVEL_SCOPE"), root_1);

                // /home/bigben/Desktop/Java.g:446:79: ( interfaceScopeDeclarations )*
                while ( stream_interfaceScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_interfaceScopeDeclarations.next());

                }
                stream_interfaceScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 24, interfaceBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end interfaceBody

    public static class classScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start classScopeDeclarations
    // /home/bigben/Desktop/Java.g:449:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );
    public final classScopeDeclarations_return classScopeDeclarations() throws RecognitionException {
        classScopeDeclarations_return retval = new classScopeDeclarations_return();
        retval.start = input.LT(1);
        int classScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ident=null;
        Token STATIC81=null;
        Token IDENT86=null;
        Token SEMI91=null;
        Token VOID92=null;
        Token IDENT93=null;
        Token SEMI97=null;
        Token SEMI103=null;
        Token SEMI105=null;
        block_return block80 = null;

        block_return block82 = null;

        modifierList_return modifierList83 = null;

        genericTypeParameterList_return genericTypeParameterList84 = null;

        type_return type85 = null;

        formalParameterList_return formalParameterList87 = null;

        arrayDeclaratorList_return arrayDeclaratorList88 = null;

        throwsClause_return throwsClause89 = null;

        block_return block90 = null;

        formalParameterList_return formalParameterList94 = null;

        throwsClause_return throwsClause95 = null;

        block_return block96 = null;

        formalParameterList_return formalParameterList98 = null;

        throwsClause_return throwsClause99 = null;

        block_return block100 = null;

        type_return type101 = null;

        classFieldDeclaratorList_return classFieldDeclaratorList102 = null;

        typeDeclaration_return typeDeclaration104 = null;


        CommonTree ident_tree=null;
        CommonTree STATIC81_tree=null;
        CommonTree IDENT86_tree=null;
        CommonTree SEMI91_tree=null;
        CommonTree VOID92_tree=null;
        CommonTree IDENT93_tree=null;
        CommonTree SEMI97_tree=null;
        CommonTree SEMI103_tree=null;
        CommonTree SEMI105_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_STATIC=new RewriteRuleTokenStream(adaptor,"token STATIC");
        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_throwsClause=new RewriteRuleSubtreeStream(adaptor,"rule throwsClause");
        RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // /home/bigben/Desktop/Java.g:450:5: ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI )
            int alt36=5;
            switch ( input.LA(1) ) {
            case LCURLY:
                {
                alt36=1;
                }
                break;
            case STATIC:
                {
                int LA36_2 = input.LA(2);

                if ( (synpred32()) ) {
                    alt36=2;
                }
                else if ( (synpred43()) ) {
                    alt36=3;
                }
                else if ( (synpred44()) ) {
                    alt36=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("449:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 36, 2, input);

                    throw nvae;
                }
                }
                break;
            case PUBLIC:
                {
                int LA36_3 = input.LA(2);

                if ( (synpred43()) ) {
                    alt36=3;
                }
                else if ( (synpred44()) ) {
                    alt36=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("449:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 36, 3, input);

                    throw nvae;
                }
                }
                break;
            case PROTECTED:
                {
                int LA36_4 = input.LA(2);

                if ( (synpred43()) ) {
                    alt36=3;
                }
                else if ( (synpred44()) ) {
                    alt36=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("449:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 36, 4, input);

                    throw nvae;
                }
                }
                break;
            case PRIVATE:
                {
                int LA36_5 = input.LA(2);

                if ( (synpred43()) ) {
                    alt36=3;
                }
                else if ( (synpred44()) ) {
                    alt36=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("449:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 36, 5, input);

                    throw nvae;
                }
                }
                break;
            case ABSTRACT:
                {
                int LA36_6 = input.LA(2);

                if ( (synpred43()) ) {
                    alt36=3;
                }
                else if ( (synpred44()) ) {
                    alt36=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("449:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 36, 6, input);

                    throw nvae;
                }
                }
                break;
            case NATIVE:
                {
                int LA36_7 = input.LA(2);

                if ( (synpred43()) ) {
                    alt36=3;
                }
                else if ( (synpred44()) ) {
                    alt36=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("449:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 36, 7, input);

                    throw nvae;
                }
                }
                break;
            case SYNCHRONIZED:
                {
                int LA36_8 = input.LA(2);

                if ( (synpred43()) ) {
                    alt36=3;
                }
                else if ( (synpred44()) ) {
                    alt36=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("449:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 36, 8, input);

                    throw nvae;
                }
                }
                break;
            case TRANSIENT:
                {
                int LA36_9 = input.LA(2);

                if ( (synpred43()) ) {
                    alt36=3;
                }
                else if ( (synpred44()) ) {
                    alt36=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("449:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 36, 9, input);

                    throw nvae;
                }
                }
                break;
            case VOLATILE:
                {
                int LA36_10 = input.LA(2);

                if ( (synpred43()) ) {
                    alt36=3;
                }
                else if ( (synpred44()) ) {
                    alt36=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("449:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 36, 10, input);

                    throw nvae;
                }
                }
                break;
            case STRICTFP:
                {
                int LA36_11 = input.LA(2);

                if ( (synpred43()) ) {
                    alt36=3;
                }
                else if ( (synpred44()) ) {
                    alt36=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("449:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 36, 11, input);

                    throw nvae;
                }
                }
                break;
            case FINAL:
                {
                int LA36_12 = input.LA(2);

                if ( (synpred43()) ) {
                    alt36=3;
                }
                else if ( (synpred44()) ) {
                    alt36=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("449:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 36, 12, input);

                    throw nvae;
                }
                }
                break;
            case AT:
                {
                int LA36_13 = input.LA(2);

                if ( (synpred43()) ) {
                    alt36=3;
                }
                else if ( (synpred44()) ) {
                    alt36=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("449:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 36, 13, input);

                    throw nvae;
                }
                }
                break;
            case LESS_THAN:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case VOID:
            case IDENT:
                {
                alt36=3;
                }
                break;
            case CLASS:
            case ENUM:
            case INTERFACE:
                {
                alt36=4;
                }
                break;
            case SEMI:
                {
                alt36=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("449:1: classScopeDeclarations : ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 36, 0, input);

                throw nvae;
            }

            switch (alt36) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:450:9: block
                    {
                    pushFollow(FOLLOW_block_in_classScopeDeclarations5665);
                    block80=block();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_block.add(block80.getTree());

                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 450:25: -> ^( CLASS_INSTANCE_INITIALIZER block )
                    {
                        // /home/bigben/Desktop/Java.g:450:29: ^( CLASS_INSTANCE_INITIALIZER block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(CLASS_INSTANCE_INITIALIZER, "CLASS_INSTANCE_INITIALIZER"), root_1);

                        adaptor.addChild(root_1, stream_block.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:451:9: STATIC block
                    {
                    STATIC81=(Token)input.LT(1);
                    match(input,STATIC,FOLLOW_STATIC_in_classScopeDeclarations5694); if (failed) return retval;
                    if ( backtracking==0 ) stream_STATIC.add(STATIC81);

                    pushFollow(FOLLOW_block_in_classScopeDeclarations5696);
                    block82=block();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_block.add(block82.getTree());

                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 451:25: -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block )
                    {
                        // /home/bigben/Desktop/Java.g:451:29: ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(CLASS_STATIC_INITIALIZER, STATIC81,  "CLASS_STATIC_INITIALIZER"), root_1);

                        adaptor.addChild(root_1, stream_block.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 3 :
                    // /home/bigben/Desktop/Java.g:452:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    {
                    pushFollow(FOLLOW_modifierList_in_classScopeDeclarations5719);
                    modifierList83=modifierList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_modifierList.add(modifierList83.getTree());
                    // /home/bigben/Desktop/Java.g:453:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    int alt35=2;
                    alt35 = dfa35.predict(input);
                    switch (alt35) {
                        case 1 :
                            // /home/bigben/Desktop/Java.g:453:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) )
                            {
                            // /home/bigben/Desktop/Java.g:453:13: ( genericTypeParameterList )?
                            int alt27=2;
                            int LA27_0 = input.LA(1);

                            if ( (LA27_0==LESS_THAN) ) {
                                alt27=1;
                            }
                            switch (alt27) {
                                case 1 :
                                    // /home/bigben/Desktop/Java.g:0:0: genericTypeParameterList
                                    {
                                    pushFollow(FOLLOW_genericTypeParameterList_in_classScopeDeclarations5733);
                                    genericTypeParameterList84=genericTypeParameterList();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList84.getTree());

                                    }
                                    break;

                            }

                            // /home/bigben/Desktop/Java.g:454:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) )
                            int alt34=3;
                            switch ( input.LA(1) ) {
                            case BOOLEAN:
                            case BYTE:
                            case CHAR:
                            case DOUBLE:
                            case FLOAT:
                            case INT:
                            case LONG:
                            case SHORT:
                                {
                                alt34=1;
                                }
                                break;
                            case IDENT:
                                {
                                int LA34_2 = input.LA(2);

                                if ( (LA34_2==DOT||LA34_2==LBRACK||LA34_2==LESS_THAN||LA34_2==IDENT) ) {
                                    alt34=1;
                                }
                                else if ( (LA34_2==LPAREN) ) {
                                    alt34=3;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("454:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) )", 34, 2, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case VOID:
                                {
                                alt34=2;
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("454:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) )", 34, 0, input);

                                throw nvae;
                            }

                            switch (alt34) {
                                case 1 :
                                    // /home/bigben/Desktop/Java.g:454:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
                                    {
                                    pushFollow(FOLLOW_type_in_classScopeDeclarations5752);
                                    type85=type();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_type.add(type85.getTree());
                                    IDENT86=(Token)input.LT(1);
                                    match(input,IDENT,FOLLOW_IDENT_in_classScopeDeclarations5754); if (failed) return retval;
                                    if ( backtracking==0 ) stream_IDENT.add(IDENT86);

                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations5756);
                                    formalParameterList87=formalParameterList();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_formalParameterList.add(formalParameterList87.getTree());
                                    // /home/bigben/Desktop/Java.g:454:48: ( arrayDeclaratorList )?
                                    int alt28=2;
                                    int LA28_0 = input.LA(1);

                                    if ( (LA28_0==LBRACK) ) {
                                        alt28=1;
                                    }
                                    switch (alt28) {
                                        case 1 :
                                            // /home/bigben/Desktop/Java.g:0:0: arrayDeclaratorList
                                            {
                                            pushFollow(FOLLOW_arrayDeclaratorList_in_classScopeDeclarations5758);
                                            arrayDeclaratorList88=arrayDeclaratorList();
                                            _fsp--;
                                            if (failed) return retval;
                                            if ( backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList88.getTree());

                                            }
                                            break;

                                    }

                                    // /home/bigben/Desktop/Java.g:454:69: ( throwsClause )?
                                    int alt29=2;
                                    int LA29_0 = input.LA(1);

                                    if ( (LA29_0==THROWS) ) {
                                        alt29=1;
                                    }
                                    switch (alt29) {
                                        case 1 :
                                            // /home/bigben/Desktop/Java.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations5761);
                                            throwsClause89=throwsClause();
                                            _fsp--;
                                            if (failed) return retval;
                                            if ( backtracking==0 ) stream_throwsClause.add(throwsClause89.getTree());

                                            }
                                            break;

                                    }

                                    // /home/bigben/Desktop/Java.g:454:83: ( block | SEMI )
                                    int alt30=2;
                                    int LA30_0 = input.LA(1);

                                    if ( (LA30_0==LCURLY) ) {
                                        alt30=1;
                                    }
                                    else if ( (LA30_0==SEMI) ) {
                                        alt30=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("454:83: ( block | SEMI )", 30, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt30) {
                                        case 1 :
                                            // /home/bigben/Desktop/Java.g:454:84: block
                                            {
                                            pushFollow(FOLLOW_block_in_classScopeDeclarations5765);
                                            block90=block();
                                            _fsp--;
                                            if (failed) return retval;
                                            if ( backtracking==0 ) stream_block.add(block90.getTree());

                                            }
                                            break;
                                        case 2 :
                                            // /home/bigben/Desktop/Java.g:454:92: SEMI
                                            {
                                            SEMI91=(Token)input.LT(1);
                                            match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations5769); if (failed) return retval;
                                            if ( backtracking==0 ) stream_SEMI.add(SEMI91);


                                            }
                                            break;

                                    }


                                    // AST REWRITE
                                    // elements: genericTypeParameterList, type, throwsClause, modifierList, arrayDeclaratorList, block, formalParameterList, IDENT
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 455:17: -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
                                    {
                                        // /home/bigben/Desktop/Java.g:455:21: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(FUNCTION_METHOD_DECL, "FUNCTION_METHOD_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.next());
                                        // /home/bigben/Desktop/Java.g:455:57: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.next());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_type.next());
                                        adaptor.addChild(root_1, stream_IDENT.next());
                                        adaptor.addChild(root_1, stream_formalParameterList.next());
                                        // /home/bigben/Desktop/Java.g:455:114: ( arrayDeclaratorList )?
                                        if ( stream_arrayDeclaratorList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_arrayDeclaratorList.next());

                                        }
                                        stream_arrayDeclaratorList.reset();
                                        // /home/bigben/Desktop/Java.g:455:135: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.next());

                                        }
                                        stream_throwsClause.reset();
                                        // /home/bigben/Desktop/Java.g:455:149: ( block )?
                                        if ( stream_block.hasNext() ) {
                                            adaptor.addChild(root_1, stream_block.next());

                                        }
                                        stream_block.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    }

                                    }
                                    break;
                                case 2 :
                                    // /home/bigben/Desktop/Java.g:456:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
                                    {
                                    VOID92=(Token)input.LT(1);
                                    match(input,VOID,FOLLOW_VOID_in_classScopeDeclarations5831); if (failed) return retval;
                                    if ( backtracking==0 ) stream_VOID.add(VOID92);

                                    IDENT93=(Token)input.LT(1);
                                    match(input,IDENT,FOLLOW_IDENT_in_classScopeDeclarations5833); if (failed) return retval;
                                    if ( backtracking==0 ) stream_IDENT.add(IDENT93);

                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations5835);
                                    formalParameterList94=formalParameterList();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_formalParameterList.add(formalParameterList94.getTree());
                                    // /home/bigben/Desktop/Java.g:456:48: ( throwsClause )?
                                    int alt31=2;
                                    int LA31_0 = input.LA(1);

                                    if ( (LA31_0==THROWS) ) {
                                        alt31=1;
                                    }
                                    switch (alt31) {
                                        case 1 :
                                            // /home/bigben/Desktop/Java.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations5837);
                                            throwsClause95=throwsClause();
                                            _fsp--;
                                            if (failed) return retval;
                                            if ( backtracking==0 ) stream_throwsClause.add(throwsClause95.getTree());

                                            }
                                            break;

                                    }

                                    // /home/bigben/Desktop/Java.g:456:62: ( block | SEMI )
                                    int alt32=2;
                                    int LA32_0 = input.LA(1);

                                    if ( (LA32_0==LCURLY) ) {
                                        alt32=1;
                                    }
                                    else if ( (LA32_0==SEMI) ) {
                                        alt32=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("456:62: ( block | SEMI )", 32, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt32) {
                                        case 1 :
                                            // /home/bigben/Desktop/Java.g:456:63: block
                                            {
                                            pushFollow(FOLLOW_block_in_classScopeDeclarations5841);
                                            block96=block();
                                            _fsp--;
                                            if (failed) return retval;
                                            if ( backtracking==0 ) stream_block.add(block96.getTree());

                                            }
                                            break;
                                        case 2 :
                                            // /home/bigben/Desktop/Java.g:456:71: SEMI
                                            {
                                            SEMI97=(Token)input.LT(1);
                                            match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations5845); if (failed) return retval;
                                            if ( backtracking==0 ) stream_SEMI.add(SEMI97);


                                            }
                                            break;

                                    }


                                    // AST REWRITE
                                    // elements: genericTypeParameterList, formalParameterList, IDENT, block, throwsClause, modifierList
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 457:17: -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
                                    {
                                        // /home/bigben/Desktop/Java.g:457:21: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(VOID_METHOD_DECL, "VOID_METHOD_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.next());
                                        // /home/bigben/Desktop/Java.g:457:53: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.next());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_IDENT.next());
                                        adaptor.addChild(root_1, stream_formalParameterList.next());
                                        // /home/bigben/Desktop/Java.g:457:105: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.next());

                                        }
                                        stream_throwsClause.reset();
                                        // /home/bigben/Desktop/Java.g:457:119: ( block )?
                                        if ( stream_block.hasNext() ) {
                                            adaptor.addChild(root_1, stream_block.next());

                                        }
                                        stream_block.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    }

                                    }
                                    break;
                                case 3 :
                                    // /home/bigben/Desktop/Java.g:458:17: ident= IDENT formalParameterList ( throwsClause )? block
                                    {
                                    ident=(Token)input.LT(1);
                                    match(input,IDENT,FOLLOW_IDENT_in_classScopeDeclarations5904); if (failed) return retval;
                                    if ( backtracking==0 ) stream_IDENT.add(ident);

                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations5906);
                                    formalParameterList98=formalParameterList();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_formalParameterList.add(formalParameterList98.getTree());
                                    // /home/bigben/Desktop/Java.g:458:49: ( throwsClause )?
                                    int alt33=2;
                                    int LA33_0 = input.LA(1);

                                    if ( (LA33_0==THROWS) ) {
                                        alt33=1;
                                    }
                                    switch (alt33) {
                                        case 1 :
                                            // /home/bigben/Desktop/Java.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations5908);
                                            throwsClause99=throwsClause();
                                            _fsp--;
                                            if (failed) return retval;
                                            if ( backtracking==0 ) stream_throwsClause.add(throwsClause99.getTree());

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_block_in_classScopeDeclarations5911);
                                    block100=block();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_block.add(block100.getTree());

                                    // AST REWRITE
                                    // elements: modifierList, block, genericTypeParameterList, formalParameterList, throwsClause
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 459:17: -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
                                    {
                                        // /home/bigben/Desktop/Java.g:459:21: ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(CONSTRUCTOR_DECL, ident,  "CONSTRUCTOR_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.next());
                                        // /home/bigben/Desktop/Java.g:459:81: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.next());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_formalParameterList.next());
                                        // /home/bigben/Desktop/Java.g:459:127: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.next());

                                        }
                                        stream_throwsClause.reset();
                                        adaptor.addChild(root_1, stream_block.next());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    }

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // /home/bigben/Desktop/Java.g:461:13: type classFieldDeclaratorList SEMI
                            {
                            pushFollow(FOLLOW_type_in_classScopeDeclarations5975);
                            type101=type();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_type.add(type101.getTree());
                            pushFollow(FOLLOW_classFieldDeclaratorList_in_classScopeDeclarations5977);
                            classFieldDeclaratorList102=classFieldDeclaratorList();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_classFieldDeclaratorList.add(classFieldDeclaratorList102.getTree());
                            SEMI103=(Token)input.LT(1);
                            match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations5979); if (failed) return retval;
                            if ( backtracking==0 ) stream_SEMI.add(SEMI103);


                            // AST REWRITE
                            // elements: type, classFieldDeclaratorList, modifierList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 462:13: -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                            {
                                // /home/bigben/Desktop/Java.g:462:17: ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                                adaptor.addChild(root_1, stream_modifierList.next());
                                adaptor.addChild(root_1, stream_type.next());
                                adaptor.addChild(root_1, stream_classFieldDeclaratorList.next());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /home/bigben/Desktop/Java.g:464:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_classScopeDeclarations6024);
                    typeDeclaration104=typeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, typeDeclaration104.getTree());

                    }
                    break;
                case 5 :
                    // /home/bigben/Desktop/Java.g:465:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI105=(Token)input.LT(1);
                    match(input,SEMI,FOLLOW_SEMI_in_classScopeDeclarations6034); if (failed) return retval;
                    if ( backtracking==0 ) {
                    SEMI105_tree = (CommonTree)adaptor.create(SEMI105);
                    adaptor.addChild(root_0, SEMI105_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 25, classScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end classScopeDeclarations

    public static class interfaceScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start interfaceScopeDeclarations
    // /home/bigben/Desktop/Java.g:468:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );
    public final interfaceScopeDeclarations_return interfaceScopeDeclarations() throws RecognitionException {
        interfaceScopeDeclarations_return retval = new interfaceScopeDeclarations_return();
        retval.start = input.LT(1);
        int interfaceScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT109=null;
        Token SEMI113=null;
        Token VOID114=null;
        Token IDENT115=null;
        Token SEMI118=null;
        Token SEMI121=null;
        Token SEMI123=null;
        modifierList_return modifierList106 = null;

        genericTypeParameterList_return genericTypeParameterList107 = null;

        type_return type108 = null;

        formalParameterList_return formalParameterList110 = null;

        arrayDeclaratorList_return arrayDeclaratorList111 = null;

        throwsClause_return throwsClause112 = null;

        formalParameterList_return formalParameterList116 = null;

        throwsClause_return throwsClause117 = null;

        type_return type119 = null;

        interfaceFieldDeclaratorList_return interfaceFieldDeclaratorList120 = null;

        typeDeclaration_return typeDeclaration122 = null;


        CommonTree IDENT109_tree=null;
        CommonTree SEMI113_tree=null;
        CommonTree VOID114_tree=null;
        CommonTree IDENT115_tree=null;
        CommonTree SEMI118_tree=null;
        CommonTree SEMI121_tree=null;
        CommonTree SEMI123_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_throwsClause=new RewriteRuleSubtreeStream(adaptor,"rule throwsClause");
        RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
        RewriteRuleSubtreeStream stream_genericTypeParameterList=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_interfaceFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule interfaceFieldDeclaratorList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // /home/bigben/Desktop/Java.g:469:5: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI )
            int alt43=3;
            switch ( input.LA(1) ) {
            case PUBLIC:
                {
                int LA43_1 = input.LA(2);

                if ( (synpred51()) ) {
                    alt43=1;
                }
                else if ( (synpred52()) ) {
                    alt43=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("468:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 43, 1, input);

                    throw nvae;
                }
                }
                break;
            case PROTECTED:
                {
                int LA43_2 = input.LA(2);

                if ( (synpred51()) ) {
                    alt43=1;
                }
                else if ( (synpred52()) ) {
                    alt43=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("468:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 43, 2, input);

                    throw nvae;
                }
                }
                break;
            case PRIVATE:
                {
                int LA43_3 = input.LA(2);

                if ( (synpred51()) ) {
                    alt43=1;
                }
                else if ( (synpred52()) ) {
                    alt43=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("468:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 43, 3, input);

                    throw nvae;
                }
                }
                break;
            case STATIC:
                {
                int LA43_4 = input.LA(2);

                if ( (synpred51()) ) {
                    alt43=1;
                }
                else if ( (synpred52()) ) {
                    alt43=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("468:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 43, 4, input);

                    throw nvae;
                }
                }
                break;
            case ABSTRACT:
                {
                int LA43_5 = input.LA(2);

                if ( (synpred51()) ) {
                    alt43=1;
                }
                else if ( (synpred52()) ) {
                    alt43=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("468:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 43, 5, input);

                    throw nvae;
                }
                }
                break;
            case NATIVE:
                {
                int LA43_6 = input.LA(2);

                if ( (synpred51()) ) {
                    alt43=1;
                }
                else if ( (synpred52()) ) {
                    alt43=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("468:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 43, 6, input);

                    throw nvae;
                }
                }
                break;
            case SYNCHRONIZED:
                {
                int LA43_7 = input.LA(2);

                if ( (synpred51()) ) {
                    alt43=1;
                }
                else if ( (synpred52()) ) {
                    alt43=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("468:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 43, 7, input);

                    throw nvae;
                }
                }
                break;
            case TRANSIENT:
                {
                int LA43_8 = input.LA(2);

                if ( (synpred51()) ) {
                    alt43=1;
                }
                else if ( (synpred52()) ) {
                    alt43=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("468:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 43, 8, input);

                    throw nvae;
                }
                }
                break;
            case VOLATILE:
                {
                int LA43_9 = input.LA(2);

                if ( (synpred51()) ) {
                    alt43=1;
                }
                else if ( (synpred52()) ) {
                    alt43=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("468:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 43, 9, input);

                    throw nvae;
                }
                }
                break;
            case STRICTFP:
                {
                int LA43_10 = input.LA(2);

                if ( (synpred51()) ) {
                    alt43=1;
                }
                else if ( (synpred52()) ) {
                    alt43=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("468:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 43, 10, input);

                    throw nvae;
                }
                }
                break;
            case FINAL:
                {
                int LA43_11 = input.LA(2);

                if ( (synpred51()) ) {
                    alt43=1;
                }
                else if ( (synpred52()) ) {
                    alt43=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("468:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 43, 11, input);

                    throw nvae;
                }
                }
                break;
            case AT:
                {
                int LA43_12 = input.LA(2);

                if ( (synpred51()) ) {
                    alt43=1;
                }
                else if ( (synpred52()) ) {
                    alt43=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("468:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 43, 12, input);

                    throw nvae;
                }
                }
                break;
            case LESS_THAN:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case VOID:
            case IDENT:
                {
                alt43=1;
                }
                break;
            case CLASS:
            case ENUM:
            case INTERFACE:
                {
                alt43=2;
                }
                break;
            case SEMI:
                {
                alt43=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("468:1: interfaceScopeDeclarations : ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );", 43, 0, input);

                throw nvae;
            }

            switch (alt43) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:469:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) )
                    {
                    pushFollow(FOLLOW_modifierList_in_interfaceScopeDeclarations6065);
                    modifierList106=modifierList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_modifierList.add(modifierList106.getTree());
                    // /home/bigben/Desktop/Java.g:470:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) )
                    int alt42=2;
                    alt42 = dfa42.predict(input);
                    switch (alt42) {
                        case 1 :
                            // /home/bigben/Desktop/Java.g:470:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )
                            {
                            // /home/bigben/Desktop/Java.g:470:13: ( genericTypeParameterList )?
                            int alt37=2;
                            int LA37_0 = input.LA(1);

                            if ( (LA37_0==LESS_THAN) ) {
                                alt37=1;
                            }
                            switch (alt37) {
                                case 1 :
                                    // /home/bigben/Desktop/Java.g:0:0: genericTypeParameterList
                                    {
                                    pushFollow(FOLLOW_genericTypeParameterList_in_interfaceScopeDeclarations6079);
                                    genericTypeParameterList107=genericTypeParameterList();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_genericTypeParameterList.add(genericTypeParameterList107.getTree());

                                    }
                                    break;

                            }

                            // /home/bigben/Desktop/Java.g:471:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )
                            int alt41=2;
                            int LA41_0 = input.LA(1);

                            if ( (LA41_0==BOOLEAN||LA41_0==BYTE||LA41_0==CHAR||LA41_0==DOUBLE||LA41_0==FLOAT||(LA41_0>=INT && LA41_0<=LONG)||LA41_0==SHORT||LA41_0==IDENT) ) {
                                alt41=1;
                            }
                            else if ( (LA41_0==VOID) ) {
                                alt41=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("471:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )", 41, 0, input);

                                throw nvae;
                            }
                            switch (alt41) {
                                case 1 :
                                    // /home/bigben/Desktop/Java.g:471:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
                                    {
                                    pushFollow(FOLLOW_type_in_interfaceScopeDeclarations6098);
                                    type108=type();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_type.add(type108.getTree());
                                    IDENT109=(Token)input.LT(1);
                                    match(input,IDENT,FOLLOW_IDENT_in_interfaceScopeDeclarations6100); if (failed) return retval;
                                    if ( backtracking==0 ) stream_IDENT.add(IDENT109);

                                    pushFollow(FOLLOW_formalParameterList_in_interfaceScopeDeclarations6102);
                                    formalParameterList110=formalParameterList();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_formalParameterList.add(formalParameterList110.getTree());
                                    // /home/bigben/Desktop/Java.g:471:48: ( arrayDeclaratorList )?
                                    int alt38=2;
                                    int LA38_0 = input.LA(1);

                                    if ( (LA38_0==LBRACK) ) {
                                        alt38=1;
                                    }
                                    switch (alt38) {
                                        case 1 :
                                            // /home/bigben/Desktop/Java.g:0:0: arrayDeclaratorList
                                            {
                                            pushFollow(FOLLOW_arrayDeclaratorList_in_interfaceScopeDeclarations6104);
                                            arrayDeclaratorList111=arrayDeclaratorList();
                                            _fsp--;
                                            if (failed) return retval;
                                            if ( backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList111.getTree());

                                            }
                                            break;

                                    }

                                    // /home/bigben/Desktop/Java.g:471:69: ( throwsClause )?
                                    int alt39=2;
                                    int LA39_0 = input.LA(1);

                                    if ( (LA39_0==THROWS) ) {
                                        alt39=1;
                                    }
                                    switch (alt39) {
                                        case 1 :
                                            // /home/bigben/Desktop/Java.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_interfaceScopeDeclarations6107);
                                            throwsClause112=throwsClause();
                                            _fsp--;
                                            if (failed) return retval;
                                            if ( backtracking==0 ) stream_throwsClause.add(throwsClause112.getTree());

                                            }
                                            break;

                                    }

                                    SEMI113=(Token)input.LT(1);
                                    match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations6110); if (failed) return retval;
                                    if ( backtracking==0 ) stream_SEMI.add(SEMI113);


                                    // AST REWRITE
                                    // elements: throwsClause, type, genericTypeParameterList, formalParameterList, IDENT, modifierList, arrayDeclaratorList
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 472:17: -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
                                    {
                                        // /home/bigben/Desktop/Java.g:472:21: ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(FUNCTION_METHOD_DECL, "FUNCTION_METHOD_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.next());
                                        // /home/bigben/Desktop/Java.g:472:57: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.next());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_type.next());
                                        adaptor.addChild(root_1, stream_IDENT.next());
                                        adaptor.addChild(root_1, stream_formalParameterList.next());
                                        // /home/bigben/Desktop/Java.g:472:114: ( arrayDeclaratorList )?
                                        if ( stream_arrayDeclaratorList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_arrayDeclaratorList.next());

                                        }
                                        stream_arrayDeclaratorList.reset();
                                        // /home/bigben/Desktop/Java.g:472:135: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.next());

                                        }
                                        stream_throwsClause.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    }

                                    }
                                    break;
                                case 2 :
                                    // /home/bigben/Desktop/Java.g:473:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
                                    {
                                    VOID114=(Token)input.LT(1);
                                    match(input,VOID,FOLLOW_VOID_in_interfaceScopeDeclarations6168); if (failed) return retval;
                                    if ( backtracking==0 ) stream_VOID.add(VOID114);

                                    IDENT115=(Token)input.LT(1);
                                    match(input,IDENT,FOLLOW_IDENT_in_interfaceScopeDeclarations6170); if (failed) return retval;
                                    if ( backtracking==0 ) stream_IDENT.add(IDENT115);

                                    pushFollow(FOLLOW_formalParameterList_in_interfaceScopeDeclarations6172);
                                    formalParameterList116=formalParameterList();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_formalParameterList.add(formalParameterList116.getTree());
                                    // /home/bigben/Desktop/Java.g:473:48: ( throwsClause )?
                                    int alt40=2;
                                    int LA40_0 = input.LA(1);

                                    if ( (LA40_0==THROWS) ) {
                                        alt40=1;
                                    }
                                    switch (alt40) {
                                        case 1 :
                                            // /home/bigben/Desktop/Java.g:0:0: throwsClause
                                            {
                                            pushFollow(FOLLOW_throwsClause_in_interfaceScopeDeclarations6174);
                                            throwsClause117=throwsClause();
                                            _fsp--;
                                            if (failed) return retval;
                                            if ( backtracking==0 ) stream_throwsClause.add(throwsClause117.getTree());

                                            }
                                            break;

                                    }

                                    SEMI118=(Token)input.LT(1);
                                    match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations6177); if (failed) return retval;
                                    if ( backtracking==0 ) stream_SEMI.add(SEMI118);


                                    // AST REWRITE
                                    // elements: throwsClause, formalParameterList, genericTypeParameterList, modifierList, IDENT
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 474:17: -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
                                    {
                                        // /home/bigben/Desktop/Java.g:474:21: ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(VOID_METHOD_DECL, "VOID_METHOD_DECL"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.next());
                                        // /home/bigben/Desktop/Java.g:474:53: ( genericTypeParameterList )?
                                        if ( stream_genericTypeParameterList.hasNext() ) {
                                            adaptor.addChild(root_1, stream_genericTypeParameterList.next());

                                        }
                                        stream_genericTypeParameterList.reset();
                                        adaptor.addChild(root_1, stream_IDENT.next());
                                        adaptor.addChild(root_1, stream_formalParameterList.next());
                                        // /home/bigben/Desktop/Java.g:474:105: ( throwsClause )?
                                        if ( stream_throwsClause.hasNext() ) {
                                            adaptor.addChild(root_1, stream_throwsClause.next());

                                        }
                                        stream_throwsClause.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    }

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // /home/bigben/Desktop/Java.g:476:13: type interfaceFieldDeclaratorList SEMI
                            {
                            pushFollow(FOLLOW_type_in_interfaceScopeDeclarations6240);
                            type119=type();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_type.add(type119.getTree());
                            pushFollow(FOLLOW_interfaceFieldDeclaratorList_in_interfaceScopeDeclarations6242);
                            interfaceFieldDeclaratorList120=interfaceFieldDeclaratorList();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_interfaceFieldDeclaratorList.add(interfaceFieldDeclaratorList120.getTree());
                            SEMI121=(Token)input.LT(1);
                            match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations6244); if (failed) return retval;
                            if ( backtracking==0 ) stream_SEMI.add(SEMI121);


                            // AST REWRITE
                            // elements: interfaceFieldDeclaratorList, modifierList, type
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 477:13: -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList )
                            {
                                // /home/bigben/Desktop/Java.g:477:17: ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                                adaptor.addChild(root_1, stream_modifierList.next());
                                adaptor.addChild(root_1, stream_type.next());
                                adaptor.addChild(root_1, stream_interfaceFieldDeclaratorList.next());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:479:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_interfaceScopeDeclarations6289);
                    typeDeclaration122=typeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, typeDeclaration122.getTree());

                    }
                    break;
                case 3 :
                    // /home/bigben/Desktop/Java.g:480:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI123=(Token)input.LT(1);
                    match(input,SEMI,FOLLOW_SEMI_in_interfaceScopeDeclarations6299); if (failed) return retval;
                    if ( backtracking==0 ) {
                    SEMI123_tree = (CommonTree)adaptor.create(SEMI123);
                    adaptor.addChild(root_0, SEMI123_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 26, interfaceScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end interfaceScopeDeclarations

    public static class classFieldDeclaratorList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start classFieldDeclaratorList
    // /home/bigben/Desktop/Java.g:483:1: classFieldDeclaratorList : classFieldDeclarator ( COMMA classFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ ) ;
    public final classFieldDeclaratorList_return classFieldDeclaratorList() throws RecognitionException {
        classFieldDeclaratorList_return retval = new classFieldDeclaratorList_return();
        retval.start = input.LT(1);
        int classFieldDeclaratorList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA125=null;
        classFieldDeclarator_return classFieldDeclarator124 = null;

        classFieldDeclarator_return classFieldDeclarator126 = null;


        CommonTree COMMA125_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_classFieldDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclarator");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // /home/bigben/Desktop/Java.g:484:5: ( classFieldDeclarator ( COMMA classFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ ) )
            // /home/bigben/Desktop/Java.g:484:9: classFieldDeclarator ( COMMA classFieldDeclarator )*
            {
            pushFollow(FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList6318);
            classFieldDeclarator124=classFieldDeclarator();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_classFieldDeclarator.add(classFieldDeclarator124.getTree());
            // /home/bigben/Desktop/Java.g:484:30: ( COMMA classFieldDeclarator )*
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);

                if ( (LA44_0==COMMA) ) {
                    alt44=1;
                }


                switch (alt44) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:484:31: COMMA classFieldDeclarator
            	    {
            	    COMMA125=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_classFieldDeclaratorList6321); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMA.add(COMMA125);

            	    pushFollow(FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList6323);
            	    classFieldDeclarator126=classFieldDeclarator();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_classFieldDeclarator.add(classFieldDeclarator126.getTree());

            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);


            // AST REWRITE
            // elements: classFieldDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 485:9: -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ )
            {
                // /home/bigben/Desktop/Java.g:485:13: ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(VAR_DECLARATOR_LIST, "VAR_DECLARATOR_LIST"), root_1);

                if ( !(stream_classFieldDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_classFieldDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_classFieldDeclarator.next());

                }
                stream_classFieldDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 27, classFieldDeclaratorList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end classFieldDeclaratorList

    public static class classFieldDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start classFieldDeclarator
    // /home/bigben/Desktop/Java.g:488:1: classFieldDeclarator : variableDeclaratorId ( ASSIGN variableInitializer )? -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) ;
    public final classFieldDeclarator_return classFieldDeclarator() throws RecognitionException {
        classFieldDeclarator_return retval = new classFieldDeclarator_return();
        retval.start = input.LT(1);
        int classFieldDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSIGN128=null;
        variableDeclaratorId_return variableDeclaratorId127 = null;

        variableInitializer_return variableInitializer129 = null;


        CommonTree ASSIGN128_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // /home/bigben/Desktop/Java.g:489:5: ( variableDeclaratorId ( ASSIGN variableInitializer )? -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? ) )
            // /home/bigben/Desktop/Java.g:489:9: variableDeclaratorId ( ASSIGN variableInitializer )?
            {
            pushFollow(FOLLOW_variableDeclaratorId_in_classFieldDeclarator6362);
            variableDeclaratorId127=variableDeclaratorId();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId127.getTree());
            // /home/bigben/Desktop/Java.g:489:30: ( ASSIGN variableInitializer )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==ASSIGN) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:489:31: ASSIGN variableInitializer
                    {
                    ASSIGN128=(Token)input.LT(1);
                    match(input,ASSIGN,FOLLOW_ASSIGN_in_classFieldDeclarator6365); if (failed) return retval;
                    if ( backtracking==0 ) stream_ASSIGN.add(ASSIGN128);

                    pushFollow(FOLLOW_variableInitializer_in_classFieldDeclarator6367);
                    variableInitializer129=variableInitializer();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_variableInitializer.add(variableInitializer129.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: variableInitializer, variableDeclaratorId
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 490:9: -> ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
            {
                // /home/bigben/Desktop/Java.g:490:13: ^( VAR_DECLARATOR variableDeclaratorId ( variableInitializer )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(VAR_DECLARATOR, "VAR_DECLARATOR"), root_1);

                adaptor.addChild(root_1, stream_variableDeclaratorId.next());
                // /home/bigben/Desktop/Java.g:490:51: ( variableInitializer )?
                if ( stream_variableInitializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableInitializer.next());

                }
                stream_variableInitializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 28, classFieldDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end classFieldDeclarator

    public static class interfaceFieldDeclaratorList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start interfaceFieldDeclaratorList
    // /home/bigben/Desktop/Java.g:493:1: interfaceFieldDeclaratorList : interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ ) ;
    public final interfaceFieldDeclaratorList_return interfaceFieldDeclaratorList() throws RecognitionException {
        interfaceFieldDeclaratorList_return retval = new interfaceFieldDeclaratorList_return();
        retval.start = input.LT(1);
        int interfaceFieldDeclaratorList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA131=null;
        interfaceFieldDeclarator_return interfaceFieldDeclarator130 = null;

        interfaceFieldDeclarator_return interfaceFieldDeclarator132 = null;


        CommonTree COMMA131_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_interfaceFieldDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule interfaceFieldDeclarator");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // /home/bigben/Desktop/Java.g:494:5: ( interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ ) )
            // /home/bigben/Desktop/Java.g:494:9: interfaceFieldDeclarator ( COMMA interfaceFieldDeclarator )*
            {
            pushFollow(FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6412);
            interfaceFieldDeclarator130=interfaceFieldDeclarator();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_interfaceFieldDeclarator.add(interfaceFieldDeclarator130.getTree());
            // /home/bigben/Desktop/Java.g:494:34: ( COMMA interfaceFieldDeclarator )*
            loop46:
            do {
                int alt46=2;
                int LA46_0 = input.LA(1);

                if ( (LA46_0==COMMA) ) {
                    alt46=1;
                }


                switch (alt46) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:494:35: COMMA interfaceFieldDeclarator
            	    {
            	    COMMA131=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_interfaceFieldDeclaratorList6415); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMA.add(COMMA131);

            	    pushFollow(FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6417);
            	    interfaceFieldDeclarator132=interfaceFieldDeclarator();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_interfaceFieldDeclarator.add(interfaceFieldDeclarator132.getTree());

            	    }
            	    break;

            	default :
            	    break loop46;
                }
            } while (true);


            // AST REWRITE
            // elements: interfaceFieldDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 495:9: -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ )
            {
                // /home/bigben/Desktop/Java.g:495:13: ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(VAR_DECLARATOR_LIST, "VAR_DECLARATOR_LIST"), root_1);

                if ( !(stream_interfaceFieldDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_interfaceFieldDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_interfaceFieldDeclarator.next());

                }
                stream_interfaceFieldDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 29, interfaceFieldDeclaratorList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end interfaceFieldDeclaratorList

    public static class interfaceFieldDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start interfaceFieldDeclarator
    // /home/bigben/Desktop/Java.g:498:1: interfaceFieldDeclarator : variableDeclaratorId ASSIGN variableInitializer -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer ) ;
    public final interfaceFieldDeclarator_return interfaceFieldDeclarator() throws RecognitionException {
        interfaceFieldDeclarator_return retval = new interfaceFieldDeclarator_return();
        retval.start = input.LT(1);
        int interfaceFieldDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSIGN134=null;
        variableDeclaratorId_return variableDeclaratorId133 = null;

        variableInitializer_return variableInitializer135 = null;


        CommonTree ASSIGN134_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // /home/bigben/Desktop/Java.g:499:5: ( variableDeclaratorId ASSIGN variableInitializer -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer ) )
            // /home/bigben/Desktop/Java.g:499:9: variableDeclaratorId ASSIGN variableInitializer
            {
            pushFollow(FOLLOW_variableDeclaratorId_in_interfaceFieldDeclarator6456);
            variableDeclaratorId133=variableDeclaratorId();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId133.getTree());
            ASSIGN134=(Token)input.LT(1);
            match(input,ASSIGN,FOLLOW_ASSIGN_in_interfaceFieldDeclarator6458); if (failed) return retval;
            if ( backtracking==0 ) stream_ASSIGN.add(ASSIGN134);

            pushFollow(FOLLOW_variableInitializer_in_interfaceFieldDeclarator6460);
            variableInitializer135=variableInitializer();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_variableInitializer.add(variableInitializer135.getTree());

            // AST REWRITE
            // elements: variableInitializer, variableDeclaratorId
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 500:9: -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer )
            {
                // /home/bigben/Desktop/Java.g:500:13: ^( VAR_DECLARATOR variableDeclaratorId variableInitializer )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(VAR_DECLARATOR, "VAR_DECLARATOR"), root_1);

                adaptor.addChild(root_1, stream_variableDeclaratorId.next());
                adaptor.addChild(root_1, stream_variableInitializer.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 30, interfaceFieldDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end interfaceFieldDeclarator

    public static class variableDeclaratorId_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start variableDeclaratorId
    // /home/bigben/Desktop/Java.g:503:1: variableDeclaratorId : IDENT ( arrayDeclaratorList )? ;
    public final variableDeclaratorId_return variableDeclaratorId() throws RecognitionException {
        variableDeclaratorId_return retval = new variableDeclaratorId_return();
        retval.start = input.LT(1);
        int variableDeclaratorId_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT136=null;
        arrayDeclaratorList_return arrayDeclaratorList137 = null;


        CommonTree IDENT136_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // /home/bigben/Desktop/Java.g:504:5: ( IDENT ( arrayDeclaratorList )? )
            // /home/bigben/Desktop/Java.g:504:9: IDENT ( arrayDeclaratorList )?
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT136=(Token)input.LT(1);
            match(input,IDENT,FOLLOW_IDENT_in_variableDeclaratorId6502); if (failed) return retval;
            if ( backtracking==0 ) {
            IDENT136_tree = (CommonTree)adaptor.create(IDENT136);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT136_tree, root_0);
            }
            // /home/bigben/Desktop/Java.g:504:16: ( arrayDeclaratorList )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==LBRACK) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_variableDeclaratorId6505);
                    arrayDeclaratorList137=arrayDeclaratorList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, arrayDeclaratorList137.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 31, variableDeclaratorId_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end variableDeclaratorId

    public static class variableInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start variableInitializer
    // /home/bigben/Desktop/Java.g:507:1: variableInitializer : ( arrayInitializer | expression );
    public final variableInitializer_return variableInitializer() throws RecognitionException {
        variableInitializer_return retval = new variableInitializer_return();
        retval.start = input.LT(1);
        int variableInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        arrayInitializer_return arrayInitializer138 = null;

        expression_return expression139 = null;



        try {
            if ( backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // /home/bigben/Desktop/Java.g:508:5: ( arrayInitializer | expression )
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==LCURLY) ) {
                alt48=1;
            }
            else if ( (LA48_0==DEC||LA48_0==INC||LA48_0==LESS_THAN||LA48_0==LOGICAL_NOT||(LA48_0>=LPAREN && LA48_0<=MINUS)||LA48_0==NOT||LA48_0==PLUS||LA48_0==BOOLEAN||LA48_0==BYTE||LA48_0==CHAR||LA48_0==DOUBLE||LA48_0==FALSE||LA48_0==FLOAT||(LA48_0>=INT && LA48_0<=LONG)||(LA48_0>=NEW && LA48_0<=NULL)||LA48_0==SHORT||LA48_0==SUPER||LA48_0==THIS||LA48_0==TRUE||LA48_0==VOID||(LA48_0>=IDENT && LA48_0<=STRING_LITERAL)) ) {
                alt48=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("507:1: variableInitializer : ( arrayInitializer | expression );", 48, 0, input);

                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:508:9: arrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer6525);
                    arrayInitializer138=arrayInitializer();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, arrayInitializer138.getTree());

                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:509:9: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variableInitializer6535);
                    expression139=expression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expression139.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 32, variableInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end variableInitializer

    public static class arrayDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start arrayDeclarator
    // /home/bigben/Desktop/Java.g:512:1: arrayDeclarator : LBRACK RBRACK -> ^( ARRAY_DECLARATOR ) ;
    public final arrayDeclarator_return arrayDeclarator() throws RecognitionException {
        arrayDeclarator_return retval = new arrayDeclarator_return();
        retval.start = input.LT(1);
        int arrayDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LBRACK140=null;
        Token RBRACK141=null;

        CommonTree LBRACK140_tree=null;
        CommonTree RBRACK141_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // /home/bigben/Desktop/Java.g:513:5: ( LBRACK RBRACK -> ^( ARRAY_DECLARATOR ) )
            // /home/bigben/Desktop/Java.g:513:9: LBRACK RBRACK
            {
            LBRACK140=(Token)input.LT(1);
            match(input,LBRACK,FOLLOW_LBRACK_in_arrayDeclarator6554); if (failed) return retval;
            if ( backtracking==0 ) stream_LBRACK.add(LBRACK140);

            RBRACK141=(Token)input.LT(1);
            match(input,RBRACK,FOLLOW_RBRACK_in_arrayDeclarator6556); if (failed) return retval;
            if ( backtracking==0 ) stream_RBRACK.add(RBRACK141);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 514:9: -> ^( ARRAY_DECLARATOR )
            {
                // /home/bigben/Desktop/Java.g:514:13: ^( ARRAY_DECLARATOR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(ARRAY_DECLARATOR, "ARRAY_DECLARATOR"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 33, arrayDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end arrayDeclarator

    public static class arrayDeclaratorList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start arrayDeclaratorList
    // /home/bigben/Desktop/Java.g:517:1: arrayDeclaratorList : ( arrayDeclarator )+ -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ ) ;
    public final arrayDeclaratorList_return arrayDeclaratorList() throws RecognitionException {
        arrayDeclaratorList_return retval = new arrayDeclaratorList_return();
        retval.start = input.LT(1);
        int arrayDeclaratorList_StartIndex = input.index();
        CommonTree root_0 = null;

        arrayDeclarator_return arrayDeclarator142 = null;


        RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // /home/bigben/Desktop/Java.g:518:5: ( ( arrayDeclarator )+ -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ ) )
            // /home/bigben/Desktop/Java.g:518:9: ( arrayDeclarator )+
            {
            // /home/bigben/Desktop/Java.g:518:9: ( arrayDeclarator )+
            int cnt49=0;
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==LBRACK) ) {
                    int LA49_2 = input.LA(2);

                    if ( (synpred58()) ) {
                        alt49=1;
                    }


                }


                switch (alt49) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:0:0: arrayDeclarator
            	    {
            	    pushFollow(FOLLOW_arrayDeclarator_in_arrayDeclaratorList6590);
            	    arrayDeclarator142=arrayDeclarator();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_arrayDeclarator.add(arrayDeclarator142.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt49 >= 1 ) break loop49;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(49, input);
                        throw eee;
                }
                cnt49++;
            } while (true);


            // AST REWRITE
            // elements: arrayDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 519:9: -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ )
            {
                // /home/bigben/Desktop/Java.g:519:13: ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(ARRAY_DECLARATOR_LIST, "ARRAY_DECLARATOR_LIST"), root_1);

                if ( !(stream_arrayDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_arrayDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclarator.next());

                }
                stream_arrayDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 34, arrayDeclaratorList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end arrayDeclaratorList

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start arrayInitializer
    // /home/bigben/Desktop/Java.g:522:1: arrayInitializer : LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* ) ;
    public final arrayInitializer_return arrayInitializer() throws RecognitionException {
        arrayInitializer_return retval = new arrayInitializer_return();
        retval.start = input.LT(1);
        int arrayInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY143=null;
        Token COMMA145=null;
        Token COMMA147=null;
        Token RCURLY148=null;
        variableInitializer_return variableInitializer144 = null;

        variableInitializer_return variableInitializer146 = null;


        CommonTree LCURLY143_tree=null;
        CommonTree COMMA145_tree=null;
        CommonTree COMMA147_tree=null;
        CommonTree RCURLY148_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // /home/bigben/Desktop/Java.g:523:5: ( LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* ) )
            // /home/bigben/Desktop/Java.g:523:9: LCURLY ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )? RCURLY
            {
            LCURLY143=(Token)input.LT(1);
            match(input,LCURLY,FOLLOW_LCURLY_in_arrayInitializer6635); if (failed) return retval;
            if ( backtracking==0 ) stream_LCURLY.add(LCURLY143);

            // /home/bigben/Desktop/Java.g:523:16: ( variableInitializer ( COMMA variableInitializer )* ( COMMA )? )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==DEC||LA52_0==INC||LA52_0==LCURLY||LA52_0==LESS_THAN||LA52_0==LOGICAL_NOT||(LA52_0>=LPAREN && LA52_0<=MINUS)||LA52_0==NOT||LA52_0==PLUS||LA52_0==BOOLEAN||LA52_0==BYTE||LA52_0==CHAR||LA52_0==DOUBLE||LA52_0==FALSE||LA52_0==FLOAT||(LA52_0>=INT && LA52_0<=LONG)||(LA52_0>=NEW && LA52_0<=NULL)||LA52_0==SHORT||LA52_0==SUPER||LA52_0==THIS||LA52_0==TRUE||LA52_0==VOID||(LA52_0>=IDENT && LA52_0<=STRING_LITERAL)) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:523:17: variableInitializer ( COMMA variableInitializer )* ( COMMA )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer6638);
                    variableInitializer144=variableInitializer();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_variableInitializer.add(variableInitializer144.getTree());
                    // /home/bigben/Desktop/Java.g:523:37: ( COMMA variableInitializer )*
                    loop50:
                    do {
                        int alt50=2;
                        int LA50_0 = input.LA(1);

                        if ( (LA50_0==COMMA) ) {
                            int LA50_1 = input.LA(2);

                            if ( (LA50_1==DEC||LA50_1==INC||LA50_1==LCURLY||LA50_1==LESS_THAN||LA50_1==LOGICAL_NOT||(LA50_1>=LPAREN && LA50_1<=MINUS)||LA50_1==NOT||LA50_1==PLUS||LA50_1==BOOLEAN||LA50_1==BYTE||LA50_1==CHAR||LA50_1==DOUBLE||LA50_1==FALSE||LA50_1==FLOAT||(LA50_1>=INT && LA50_1<=LONG)||(LA50_1>=NEW && LA50_1<=NULL)||LA50_1==SHORT||LA50_1==SUPER||LA50_1==THIS||LA50_1==TRUE||LA50_1==VOID||(LA50_1>=IDENT && LA50_1<=STRING_LITERAL)) ) {
                                alt50=1;
                            }


                        }


                        switch (alt50) {
                    	case 1 :
                    	    // /home/bigben/Desktop/Java.g:523:38: COMMA variableInitializer
                    	    {
                    	    COMMA145=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer6641); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_COMMA.add(COMMA145);

                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer6643);
                    	    variableInitializer146=variableInitializer();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_variableInitializer.add(variableInitializer146.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop50;
                        }
                    } while (true);

                    // /home/bigben/Desktop/Java.g:523:66: ( COMMA )?
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==COMMA) ) {
                        alt51=1;
                    }
                    switch (alt51) {
                        case 1 :
                            // /home/bigben/Desktop/Java.g:0:0: COMMA
                            {
                            COMMA147=(Token)input.LT(1);
                            match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer6647); if (failed) return retval;
                            if ( backtracking==0 ) stream_COMMA.add(COMMA147);


                            }
                            break;

                    }


                    }
                    break;

            }

            RCURLY148=(Token)input.LT(1);
            match(input,RCURLY,FOLLOW_RCURLY_in_arrayInitializer6652); if (failed) return retval;
            if ( backtracking==0 ) stream_RCURLY.add(RCURLY148);


            // AST REWRITE
            // elements: variableInitializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 524:9: -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* )
            {
                // /home/bigben/Desktop/Java.g:524:13: ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(ARRAY_INITIALIZER, LCURLY143,  "ARRAY_INITIALIZER"), root_1);

                // /home/bigben/Desktop/Java.g:524:63: ( variableInitializer )*
                while ( stream_variableInitializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableInitializer.next());

                }
                stream_variableInitializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 35, arrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end arrayInitializer

    public static class throwsClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start throwsClause
    // /home/bigben/Desktop/Java.g:527:1: throwsClause : THROWS qualifiedIdentList -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList ) ;
    public final throwsClause_return throwsClause() throws RecognitionException {
        throwsClause_return retval = new throwsClause_return();
        retval.start = input.LT(1);
        int throwsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token THROWS149=null;
        qualifiedIdentList_return qualifiedIdentList150 = null;


        CommonTree THROWS149_tree=null;
        RewriteRuleTokenStream stream_THROWS=new RewriteRuleTokenStream(adaptor,"token THROWS");
        RewriteRuleSubtreeStream stream_qualifiedIdentList=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentList");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // /home/bigben/Desktop/Java.g:528:5: ( THROWS qualifiedIdentList -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList ) )
            // /home/bigben/Desktop/Java.g:528:9: THROWS qualifiedIdentList
            {
            THROWS149=(Token)input.LT(1);
            match(input,THROWS,FOLLOW_THROWS_in_throwsClause6690); if (failed) return retval;
            if ( backtracking==0 ) stream_THROWS.add(THROWS149);

            pushFollow(FOLLOW_qualifiedIdentList_in_throwsClause6692);
            qualifiedIdentList150=qualifiedIdentList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_qualifiedIdentList.add(qualifiedIdentList150.getTree());

            // AST REWRITE
            // elements: qualifiedIdentList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 529:9: -> ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList )
            {
                // /home/bigben/Desktop/Java.g:529:13: ^( THROWS_CLAUSE[$THROWS, \"THROWS_CLAUSE\"] qualifiedIdentList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(THROWS_CLAUSE, THROWS149,  "THROWS_CLAUSE"), root_1);

                adaptor.addChild(root_1, stream_qualifiedIdentList.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 36, throwsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end throwsClause

    public static class modifierList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start modifierList
    // /home/bigben/Desktop/Java.g:532:1: modifierList : ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) ;
    public final modifierList_return modifierList() throws RecognitionException {
        modifierList_return retval = new modifierList_return();
        retval.start = input.LT(1);
        int modifierList_StartIndex = input.index();
        CommonTree root_0 = null;

        modifier_return modifier151 = null;


        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // /home/bigben/Desktop/Java.g:533:5: ( ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) )
            // /home/bigben/Desktop/Java.g:533:9: ( modifier )*
            {
            // /home/bigben/Desktop/Java.g:533:9: ( modifier )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==AT) ) {
                    int LA53_2 = input.LA(2);

                    if ( (LA53_2==IDENT) ) {
                        alt53=1;
                    }


                }
                else if ( (LA53_0==ABSTRACT||LA53_0==FINAL||LA53_0==NATIVE||(LA53_0>=PRIVATE && LA53_0<=PUBLIC)||(LA53_0>=STATIC && LA53_0<=STRICTFP)||LA53_0==SYNCHRONIZED||LA53_0==TRANSIENT||LA53_0==VOLATILE) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:0:0: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_modifierList6729);
            	    modifier151=modifier();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_modifier.add(modifier151.getTree());

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);


            // AST REWRITE
            // elements: modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 534:9: -> ^( MODIFIER_LIST ( modifier )* )
            {
                // /home/bigben/Desktop/Java.g:534:13: ^( MODIFIER_LIST ( modifier )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(MODIFIER_LIST, "MODIFIER_LIST"), root_1);

                // /home/bigben/Desktop/Java.g:534:29: ( modifier )*
                while ( stream_modifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_modifier.next());

                }
                stream_modifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 37, modifierList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end modifierList

    public static class modifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start modifier
    // /home/bigben/Desktop/Java.g:537:1: modifier : ( PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier );
    public final modifier_return modifier() throws RecognitionException {
        modifier_return retval = new modifier_return();
        retval.start = input.LT(1);
        int modifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PUBLIC152=null;
        Token PROTECTED153=null;
        Token PRIVATE154=null;
        Token STATIC155=null;
        Token ABSTRACT156=null;
        Token NATIVE157=null;
        Token SYNCHRONIZED158=null;
        Token TRANSIENT159=null;
        Token VOLATILE160=null;
        Token STRICTFP161=null;
        localModifier_return localModifier162 = null;


        CommonTree PUBLIC152_tree=null;
        CommonTree PROTECTED153_tree=null;
        CommonTree PRIVATE154_tree=null;
        CommonTree STATIC155_tree=null;
        CommonTree ABSTRACT156_tree=null;
        CommonTree NATIVE157_tree=null;
        CommonTree SYNCHRONIZED158_tree=null;
        CommonTree TRANSIENT159_tree=null;
        CommonTree VOLATILE160_tree=null;
        CommonTree STRICTFP161_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // /home/bigben/Desktop/Java.g:538:5: ( PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier )
            int alt54=11;
            switch ( input.LA(1) ) {
            case PUBLIC:
                {
                alt54=1;
                }
                break;
            case PROTECTED:
                {
                alt54=2;
                }
                break;
            case PRIVATE:
                {
                alt54=3;
                }
                break;
            case STATIC:
                {
                alt54=4;
                }
                break;
            case ABSTRACT:
                {
                alt54=5;
                }
                break;
            case NATIVE:
                {
                alt54=6;
                }
                break;
            case SYNCHRONIZED:
                {
                alt54=7;
                }
                break;
            case TRANSIENT:
                {
                alt54=8;
                }
                break;
            case VOLATILE:
                {
                alt54=9;
                }
                break;
            case STRICTFP:
                {
                alt54=10;
                }
                break;
            case AT:
            case FINAL:
                {
                alt54=11;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("537:1: modifier : ( PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier );", 54, 0, input);

                throw nvae;
            }

            switch (alt54) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:538:9: PUBLIC
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PUBLIC152=(Token)input.LT(1);
                    match(input,PUBLIC,FOLLOW_PUBLIC_in_modifier6770); if (failed) return retval;
                    if ( backtracking==0 ) {
                    PUBLIC152_tree = (CommonTree)adaptor.create(PUBLIC152);
                    adaptor.addChild(root_0, PUBLIC152_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:539:9: PROTECTED
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PROTECTED153=(Token)input.LT(1);
                    match(input,PROTECTED,FOLLOW_PROTECTED_in_modifier6780); if (failed) return retval;
                    if ( backtracking==0 ) {
                    PROTECTED153_tree = (CommonTree)adaptor.create(PROTECTED153);
                    adaptor.addChild(root_0, PROTECTED153_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/bigben/Desktop/Java.g:540:9: PRIVATE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIVATE154=(Token)input.LT(1);
                    match(input,PRIVATE,FOLLOW_PRIVATE_in_modifier6790); if (failed) return retval;
                    if ( backtracking==0 ) {
                    PRIVATE154_tree = (CommonTree)adaptor.create(PRIVATE154);
                    adaptor.addChild(root_0, PRIVATE154_tree);
                    }

                    }
                    break;
                case 4 :
                    // /home/bigben/Desktop/Java.g:541:9: STATIC
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STATIC155=(Token)input.LT(1);
                    match(input,STATIC,FOLLOW_STATIC_in_modifier6800); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STATIC155_tree = (CommonTree)adaptor.create(STATIC155);
                    adaptor.addChild(root_0, STATIC155_tree);
                    }

                    }
                    break;
                case 5 :
                    // /home/bigben/Desktop/Java.g:542:9: ABSTRACT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ABSTRACT156=(Token)input.LT(1);
                    match(input,ABSTRACT,FOLLOW_ABSTRACT_in_modifier6810); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ABSTRACT156_tree = (CommonTree)adaptor.create(ABSTRACT156);
                    adaptor.addChild(root_0, ABSTRACT156_tree);
                    }

                    }
                    break;
                case 6 :
                    // /home/bigben/Desktop/Java.g:543:9: NATIVE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NATIVE157=(Token)input.LT(1);
                    match(input,NATIVE,FOLLOW_NATIVE_in_modifier6820); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NATIVE157_tree = (CommonTree)adaptor.create(NATIVE157);
                    adaptor.addChild(root_0, NATIVE157_tree);
                    }

                    }
                    break;
                case 7 :
                    // /home/bigben/Desktop/Java.g:544:9: SYNCHRONIZED
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SYNCHRONIZED158=(Token)input.LT(1);
                    match(input,SYNCHRONIZED,FOLLOW_SYNCHRONIZED_in_modifier6830); if (failed) return retval;
                    if ( backtracking==0 ) {
                    SYNCHRONIZED158_tree = (CommonTree)adaptor.create(SYNCHRONIZED158);
                    adaptor.addChild(root_0, SYNCHRONIZED158_tree);
                    }

                    }
                    break;
                case 8 :
                    // /home/bigben/Desktop/Java.g:545:9: TRANSIENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    TRANSIENT159=(Token)input.LT(1);
                    match(input,TRANSIENT,FOLLOW_TRANSIENT_in_modifier6840); if (failed) return retval;
                    if ( backtracking==0 ) {
                    TRANSIENT159_tree = (CommonTree)adaptor.create(TRANSIENT159);
                    adaptor.addChild(root_0, TRANSIENT159_tree);
                    }

                    }
                    break;
                case 9 :
                    // /home/bigben/Desktop/Java.g:546:9: VOLATILE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VOLATILE160=(Token)input.LT(1);
                    match(input,VOLATILE,FOLLOW_VOLATILE_in_modifier6850); if (failed) return retval;
                    if ( backtracking==0 ) {
                    VOLATILE160_tree = (CommonTree)adaptor.create(VOLATILE160);
                    adaptor.addChild(root_0, VOLATILE160_tree);
                    }

                    }
                    break;
                case 10 :
                    // /home/bigben/Desktop/Java.g:547:9: STRICTFP
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STRICTFP161=(Token)input.LT(1);
                    match(input,STRICTFP,FOLLOW_STRICTFP_in_modifier6860); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STRICTFP161_tree = (CommonTree)adaptor.create(STRICTFP161);
                    adaptor.addChild(root_0, STRICTFP161_tree);
                    }

                    }
                    break;
                case 11 :
                    // /home/bigben/Desktop/Java.g:548:9: localModifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_localModifier_in_modifier6870);
                    localModifier162=localModifier();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, localModifier162.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 38, modifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end modifier

    public static class localModifierList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start localModifierList
    // /home/bigben/Desktop/Java.g:551:1: localModifierList : ( localModifier )* -> ^( LOCAL_MODIFIER_LIST ( localModifier )* ) ;
    public final localModifierList_return localModifierList() throws RecognitionException {
        localModifierList_return retval = new localModifierList_return();
        retval.start = input.LT(1);
        int localModifierList_StartIndex = input.index();
        CommonTree root_0 = null;

        localModifier_return localModifier163 = null;


        RewriteRuleSubtreeStream stream_localModifier=new RewriteRuleSubtreeStream(adaptor,"rule localModifier");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // /home/bigben/Desktop/Java.g:552:5: ( ( localModifier )* -> ^( LOCAL_MODIFIER_LIST ( localModifier )* ) )
            // /home/bigben/Desktop/Java.g:552:9: ( localModifier )*
            {
            // /home/bigben/Desktop/Java.g:552:9: ( localModifier )*
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==AT||LA55_0==FINAL) ) {
                    alt55=1;
                }


                switch (alt55) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:0:0: localModifier
            	    {
            	    pushFollow(FOLLOW_localModifier_in_localModifierList6889);
            	    localModifier163=localModifier();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_localModifier.add(localModifier163.getTree());

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);


            // AST REWRITE
            // elements: localModifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 553:9: -> ^( LOCAL_MODIFIER_LIST ( localModifier )* )
            {
                // /home/bigben/Desktop/Java.g:553:12: ^( LOCAL_MODIFIER_LIST ( localModifier )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(LOCAL_MODIFIER_LIST, "LOCAL_MODIFIER_LIST"), root_1);

                // /home/bigben/Desktop/Java.g:553:34: ( localModifier )*
                while ( stream_localModifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_localModifier.next());

                }
                stream_localModifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 39, localModifierList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end localModifierList

    public static class localModifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start localModifier
    // /home/bigben/Desktop/Java.g:556:1: localModifier : ( FINAL | annotation );
    public final localModifier_return localModifier() throws RecognitionException {
        localModifier_return retval = new localModifier_return();
        retval.start = input.LT(1);
        int localModifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FINAL164=null;
        annotation_return annotation165 = null;


        CommonTree FINAL164_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // /home/bigben/Desktop/Java.g:557:5: ( FINAL | annotation )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==FINAL) ) {
                alt56=1;
            }
            else if ( (LA56_0==AT) ) {
                alt56=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("556:1: localModifier : ( FINAL | annotation );", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:557:9: FINAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FINAL164=(Token)input.LT(1);
                    match(input,FINAL,FOLLOW_FINAL_in_localModifier6930); if (failed) return retval;
                    if ( backtracking==0 ) {
                    FINAL164_tree = (CommonTree)adaptor.create(FINAL164);
                    adaptor.addChild(root_0, FINAL164_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:558:9: annotation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_localModifier6940);
                    annotation165=annotation();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, annotation165.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 40, localModifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end localModifier

    public static class type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start type
    // /home/bigben/Desktop/Java.g:561:1: type : ( simpleType | objectType );
    public final type_return type() throws RecognitionException {
        type_return retval = new type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        CommonTree root_0 = null;

        simpleType_return simpleType166 = null;

        objectType_return objectType167 = null;



        try {
            if ( backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // /home/bigben/Desktop/Java.g:562:5: ( simpleType | objectType )
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==BOOLEAN||LA57_0==BYTE||LA57_0==CHAR||LA57_0==DOUBLE||LA57_0==FLOAT||(LA57_0>=INT && LA57_0<=LONG)||LA57_0==SHORT) ) {
                alt57=1;
            }
            else if ( (LA57_0==IDENT) ) {
                alt57=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("561:1: type : ( simpleType | objectType );", 57, 0, input);

                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:562:9: simpleType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_simpleType_in_type6959);
                    simpleType166=simpleType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, simpleType166.getTree());

                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:563:9: objectType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_objectType_in_type6969);
                    objectType167=objectType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, objectType167.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 41, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end type

    public static class simpleType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start simpleType
    // /home/bigben/Desktop/Java.g:566:1: simpleType : primitiveType ( arrayDeclaratorList )? -> ^( TYPE primitiveType ( arrayDeclaratorList )? ) ;
    public final simpleType_return simpleType() throws RecognitionException {
        simpleType_return retval = new simpleType_return();
        retval.start = input.LT(1);
        int simpleType_StartIndex = input.index();
        CommonTree root_0 = null;

        primitiveType_return primitiveType168 = null;

        arrayDeclaratorList_return arrayDeclaratorList169 = null;


        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // /home/bigben/Desktop/Java.g:567:5: ( primitiveType ( arrayDeclaratorList )? -> ^( TYPE primitiveType ( arrayDeclaratorList )? ) )
            // /home/bigben/Desktop/Java.g:567:9: primitiveType ( arrayDeclaratorList )?
            {
            pushFollow(FOLLOW_primitiveType_in_simpleType6989);
            primitiveType168=primitiveType();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_primitiveType.add(primitiveType168.getTree());
            // /home/bigben/Desktop/Java.g:567:23: ( arrayDeclaratorList )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==LBRACK) ) {
                int LA58_1 = input.LA(2);

                if ( (LA58_1==RBRACK) ) {
                    int LA58_3 = input.LA(3);

                    if ( (synpred76()) ) {
                        alt58=1;
                    }
                }
            }
            switch (alt58) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_simpleType6991);
                    arrayDeclaratorList169=arrayDeclaratorList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList169.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: arrayDeclaratorList, primitiveType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 568:9: -> ^( TYPE primitiveType ( arrayDeclaratorList )? )
            {
                // /home/bigben/Desktop/Java.g:568:13: ^( TYPE primitiveType ( arrayDeclaratorList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_primitiveType.next());
                // /home/bigben/Desktop/Java.g:568:34: ( arrayDeclaratorList )?
                if ( stream_arrayDeclaratorList.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclaratorList.next());

                }
                stream_arrayDeclaratorList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 42, simpleType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end simpleType

    public static class objectType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start objectType
    // /home/bigben/Desktop/Java.g:571:1: objectType : qualifiedTypeIdent ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? ) ;
    public final objectType_return objectType() throws RecognitionException {
        objectType_return retval = new objectType_return();
        retval.start = input.LT(1);
        int objectType_StartIndex = input.index();
        CommonTree root_0 = null;

        qualifiedTypeIdent_return qualifiedTypeIdent170 = null;

        arrayDeclaratorList_return arrayDeclaratorList171 = null;


        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_qualifiedTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdent");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // /home/bigben/Desktop/Java.g:572:5: ( qualifiedTypeIdent ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? ) )
            // /home/bigben/Desktop/Java.g:572:9: qualifiedTypeIdent ( arrayDeclaratorList )?
            {
            pushFollow(FOLLOW_qualifiedTypeIdent_in_objectType7038);
            qualifiedTypeIdent170=qualifiedTypeIdent();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_qualifiedTypeIdent.add(qualifiedTypeIdent170.getTree());
            // /home/bigben/Desktop/Java.g:572:28: ( arrayDeclaratorList )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==LBRACK) ) {
                int LA59_1 = input.LA(2);

                if ( (synpred77()) ) {
                    alt59=1;
                }
            }
            switch (alt59) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_objectType7040);
                    arrayDeclaratorList171=arrayDeclaratorList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList171.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: arrayDeclaratorList, qualifiedTypeIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 573:9: -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? )
            {
                // /home/bigben/Desktop/Java.g:573:13: ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_qualifiedTypeIdent.next());
                // /home/bigben/Desktop/Java.g:573:39: ( arrayDeclaratorList )?
                if ( stream_arrayDeclaratorList.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclaratorList.next());

                }
                stream_arrayDeclaratorList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 43, objectType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end objectType

    public static class objectTypeSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start objectTypeSimplified
    // /home/bigben/Desktop/Java.g:576:1: objectTypeSimplified : qualifiedTypeIdentSimplified ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? ) ;
    public final objectTypeSimplified_return objectTypeSimplified() throws RecognitionException {
        objectTypeSimplified_return retval = new objectTypeSimplified_return();
        retval.start = input.LT(1);
        int objectTypeSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified172 = null;

        arrayDeclaratorList_return arrayDeclaratorList173 = null;


        RewriteRuleSubtreeStream stream_arrayDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdentSimplified");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // /home/bigben/Desktop/Java.g:577:5: ( qualifiedTypeIdentSimplified ( arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? ) )
            // /home/bigben/Desktop/Java.g:577:9: qualifiedTypeIdentSimplified ( arrayDeclaratorList )?
            {
            pushFollow(FOLLOW_qualifiedTypeIdentSimplified_in_objectTypeSimplified7080);
            qualifiedTypeIdentSimplified172=qualifiedTypeIdentSimplified();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_qualifiedTypeIdentSimplified.add(qualifiedTypeIdentSimplified172.getTree());
            // /home/bigben/Desktop/Java.g:577:38: ( arrayDeclaratorList )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==LBRACK) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: arrayDeclaratorList
                    {
                    pushFollow(FOLLOW_arrayDeclaratorList_in_objectTypeSimplified7082);
                    arrayDeclaratorList173=arrayDeclaratorList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_arrayDeclaratorList.add(arrayDeclaratorList173.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: qualifiedTypeIdentSimplified, arrayDeclaratorList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 578:9: -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? )
            {
                // /home/bigben/Desktop/Java.g:578:13: ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.next());
                // /home/bigben/Desktop/Java.g:578:49: ( arrayDeclaratorList )?
                if ( stream_arrayDeclaratorList.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayDeclaratorList.next());

                }
                stream_arrayDeclaratorList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 44, objectTypeSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end objectTypeSimplified

    public static class qualifiedTypeIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start qualifiedTypeIdent
    // /home/bigben/Desktop/Java.g:581:1: qualifiedTypeIdent : typeIdent ( DOT typeIdent )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) ;
    public final qualifiedTypeIdent_return qualifiedTypeIdent() throws RecognitionException {
        qualifiedTypeIdent_return retval = new qualifiedTypeIdent_return();
        retval.start = input.LT(1);
        int qualifiedTypeIdent_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DOT175=null;
        typeIdent_return typeIdent174 = null;

        typeIdent_return typeIdent176 = null;


        CommonTree DOT175_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_typeIdent=new RewriteRuleSubtreeStream(adaptor,"rule typeIdent");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // /home/bigben/Desktop/Java.g:582:5: ( typeIdent ( DOT typeIdent )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) )
            // /home/bigben/Desktop/Java.g:582:9: typeIdent ( DOT typeIdent )*
            {
            pushFollow(FOLLOW_typeIdent_in_qualifiedTypeIdent7122);
            typeIdent174=typeIdent();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_typeIdent.add(typeIdent174.getTree());
            // /home/bigben/Desktop/Java.g:582:19: ( DOT typeIdent )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==DOT) ) {
                    int LA61_2 = input.LA(2);

                    if ( (synpred79()) ) {
                        alt61=1;
                    }


                }


                switch (alt61) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:582:20: DOT typeIdent
            	    {
            	    DOT175=(Token)input.LT(1);
            	    match(input,DOT,FOLLOW_DOT_in_qualifiedTypeIdent7125); if (failed) return retval;
            	    if ( backtracking==0 ) stream_DOT.add(DOT175);

            	    pushFollow(FOLLOW_typeIdent_in_qualifiedTypeIdent7127);
            	    typeIdent176=typeIdent();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_typeIdent.add(typeIdent176.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);


            // AST REWRITE
            // elements: typeIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 583:9: -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
            {
                // /home/bigben/Desktop/Java.g:583:13: ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(QUALIFIED_TYPE_IDENT, "QUALIFIED_TYPE_IDENT"), root_1);

                if ( !(stream_typeIdent.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_typeIdent.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeIdent.next());

                }
                stream_typeIdent.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 45, qualifiedTypeIdent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end qualifiedTypeIdent

    public static class qualifiedTypeIdentSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start qualifiedTypeIdentSimplified
    // /home/bigben/Desktop/Java.g:586:1: qualifiedTypeIdentSimplified : typeIdentSimplified ( DOT typeIdentSimplified )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ ) ;
    public final qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified() throws RecognitionException {
        qualifiedTypeIdentSimplified_return retval = new qualifiedTypeIdentSimplified_return();
        retval.start = input.LT(1);
        int qualifiedTypeIdentSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DOT178=null;
        typeIdentSimplified_return typeIdentSimplified177 = null;

        typeIdentSimplified_return typeIdentSimplified179 = null;


        CommonTree DOT178_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_typeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule typeIdentSimplified");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // /home/bigben/Desktop/Java.g:587:5: ( typeIdentSimplified ( DOT typeIdentSimplified )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ ) )
            // /home/bigben/Desktop/Java.g:587:9: typeIdentSimplified ( DOT typeIdentSimplified )*
            {
            pushFollow(FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified7167);
            typeIdentSimplified177=typeIdentSimplified();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_typeIdentSimplified.add(typeIdentSimplified177.getTree());
            // /home/bigben/Desktop/Java.g:587:29: ( DOT typeIdentSimplified )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==DOT) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:587:30: DOT typeIdentSimplified
            	    {
            	    DOT178=(Token)input.LT(1);
            	    match(input,DOT,FOLLOW_DOT_in_qualifiedTypeIdentSimplified7170); if (failed) return retval;
            	    if ( backtracking==0 ) stream_DOT.add(DOT178);

            	    pushFollow(FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified7172);
            	    typeIdentSimplified179=typeIdentSimplified();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_typeIdentSimplified.add(typeIdentSimplified179.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);


            // AST REWRITE
            // elements: typeIdentSimplified
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 588:9: -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ )
            {
                // /home/bigben/Desktop/Java.g:588:13: ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(QUALIFIED_TYPE_IDENT, "QUALIFIED_TYPE_IDENT"), root_1);

                if ( !(stream_typeIdentSimplified.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_typeIdentSimplified.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeIdentSimplified.next());

                }
                stream_typeIdentSimplified.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 46, qualifiedTypeIdentSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end qualifiedTypeIdentSimplified

    public static class typeIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeIdent
    // /home/bigben/Desktop/Java.g:591:1: typeIdent : IDENT ( genericTypeArgumentList )? ;
    public final typeIdent_return typeIdent() throws RecognitionException {
        typeIdent_return retval = new typeIdent_return();
        retval.start = input.LT(1);
        int typeIdent_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT180=null;
        genericTypeArgumentList_return genericTypeArgumentList181 = null;


        CommonTree IDENT180_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // /home/bigben/Desktop/Java.g:592:5: ( IDENT ( genericTypeArgumentList )? )
            // /home/bigben/Desktop/Java.g:592:9: IDENT ( genericTypeArgumentList )?
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT180=(Token)input.LT(1);
            match(input,IDENT,FOLLOW_IDENT_in_typeIdent7212); if (failed) return retval;
            if ( backtracking==0 ) {
            IDENT180_tree = (CommonTree)adaptor.create(IDENT180);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT180_tree, root_0);
            }
            // /home/bigben/Desktop/Java.g:592:16: ( genericTypeArgumentList )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==LESS_THAN) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: genericTypeArgumentList
                    {
                    pushFollow(FOLLOW_genericTypeArgumentList_in_typeIdent7215);
                    genericTypeArgumentList181=genericTypeArgumentList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, genericTypeArgumentList181.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 47, typeIdent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end typeIdent

    public static class typeIdentSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeIdentSimplified
    // /home/bigben/Desktop/Java.g:595:1: typeIdentSimplified : IDENT ( genericTypeArgumentListSimplified )? ;
    public final typeIdentSimplified_return typeIdentSimplified() throws RecognitionException {
        typeIdentSimplified_return retval = new typeIdentSimplified_return();
        retval.start = input.LT(1);
        int typeIdentSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT182=null;
        genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified183 = null;


        CommonTree IDENT182_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // /home/bigben/Desktop/Java.g:596:5: ( IDENT ( genericTypeArgumentListSimplified )? )
            // /home/bigben/Desktop/Java.g:596:9: IDENT ( genericTypeArgumentListSimplified )?
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT182=(Token)input.LT(1);
            match(input,IDENT,FOLLOW_IDENT_in_typeIdentSimplified7235); if (failed) return retval;
            if ( backtracking==0 ) {
            IDENT182_tree = (CommonTree)adaptor.create(IDENT182);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT182_tree, root_0);
            }
            // /home/bigben/Desktop/Java.g:596:16: ( genericTypeArgumentListSimplified )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==LESS_THAN) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: genericTypeArgumentListSimplified
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_typeIdentSimplified7238);
                    genericTypeArgumentListSimplified183=genericTypeArgumentListSimplified();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, genericTypeArgumentListSimplified183.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 48, typeIdentSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end typeIdentSimplified

    public static class primitiveType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start primitiveType
    // /home/bigben/Desktop/Java.g:599:1: primitiveType : ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE );
    public final primitiveType_return primitiveType() throws RecognitionException {
        primitiveType_return retval = new primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set184=null;

        CommonTree set184_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // /home/bigben/Desktop/Java.g:600:5: ( BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE )
            // /home/bigben/Desktop/Java.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set184=(Token)input.LT(1);
            if ( input.LA(1)==BOOLEAN||input.LA(1)==BYTE||input.LA(1)==CHAR||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||(input.LA(1)>=INT && input.LA(1)<=LONG)||input.LA(1)==SHORT ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set184));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_primitiveType0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 49, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end primitiveType

    public static class genericTypeArgumentList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start genericTypeArgumentList
    // /home/bigben/Desktop/Java.g:610:1: genericTypeArgumentList : LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ ) ;
    public final genericTypeArgumentList_return genericTypeArgumentList() throws RecognitionException {
        genericTypeArgumentList_return retval = new genericTypeArgumentList_return();
        retval.start = input.LT(1);
        int genericTypeArgumentList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_THAN185=null;
        Token COMMA187=null;
        genericTypeArgument_return genericTypeArgument186 = null;

        genericTypeArgument_return genericTypeArgument188 = null;

        genericTypeListClosing_return genericTypeListClosing189 = null;


        CommonTree LESS_THAN185_tree=null;
        CommonTree COMMA187_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");
        RewriteRuleSubtreeStream stream_genericTypeArgument=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgument");
        RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // /home/bigben/Desktop/Java.g:611:5: ( LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ ) )
            // /home/bigben/Desktop/Java.g:611:9: LESS_THAN genericTypeArgument ( COMMA genericTypeArgument )* genericTypeListClosing
            {
            LESS_THAN185=(Token)input.LT(1);
            match(input,LESS_THAN,FOLLOW_LESS_THAN_in_genericTypeArgumentList7347); if (failed) return retval;
            if ( backtracking==0 ) stream_LESS_THAN.add(LESS_THAN185);

            pushFollow(FOLLOW_genericTypeArgument_in_genericTypeArgumentList7349);
            genericTypeArgument186=genericTypeArgument();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_genericTypeArgument.add(genericTypeArgument186.getTree());
            // /home/bigben/Desktop/Java.g:611:39: ( COMMA genericTypeArgument )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==COMMA) ) {
                    int LA65_2 = input.LA(2);

                    if ( (synpred90()) ) {
                        alt65=1;
                    }


                }


                switch (alt65) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:611:40: COMMA genericTypeArgument
            	    {
            	    COMMA187=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_genericTypeArgumentList7352); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMA.add(COMMA187);

            	    pushFollow(FOLLOW_genericTypeArgument_in_genericTypeArgumentList7354);
            	    genericTypeArgument188=genericTypeArgument();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_genericTypeArgument.add(genericTypeArgument188.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);

            pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeArgumentList7358);
            genericTypeListClosing189=genericTypeListClosing();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_genericTypeListClosing.add(genericTypeListClosing189.getTree());

            // AST REWRITE
            // elements: genericTypeArgument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 612:9: -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ )
            {
                // /home/bigben/Desktop/Java.g:612:13: ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(GENERIC_TYPE_ARG_LIST, LESS_THAN185,  "GENERIC_TYPE_ARG_LIST"), root_1);

                if ( !(stream_genericTypeArgument.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_genericTypeArgument.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeArgument.next());

                }
                stream_genericTypeArgument.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 50, genericTypeArgumentList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end genericTypeArgumentList

    public static class genericTypeArgument_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start genericTypeArgument
    // /home/bigben/Desktop/Java.g:615:1: genericTypeArgument : ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) );
    public final genericTypeArgument_return genericTypeArgument() throws RecognitionException {
        genericTypeArgument_return retval = new genericTypeArgument_return();
        retval.start = input.LT(1);
        int genericTypeArgument_StartIndex = input.index();
        CommonTree root_0 = null;

        Token QUESTION191=null;
        type_return type190 = null;

        genericWildcardBoundType_return genericWildcardBoundType192 = null;


        CommonTree QUESTION191_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleSubtreeStream stream_genericWildcardBoundType=new RewriteRuleSubtreeStream(adaptor,"rule genericWildcardBoundType");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // /home/bigben/Desktop/Java.g:616:5: ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) )
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==BOOLEAN||LA67_0==BYTE||LA67_0==CHAR||LA67_0==DOUBLE||LA67_0==FLOAT||(LA67_0>=INT && LA67_0<=LONG)||LA67_0==SHORT||LA67_0==IDENT) ) {
                alt67=1;
            }
            else if ( (LA67_0==QUESTION) ) {
                alt67=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("615:1: genericTypeArgument : ( type | QUESTION ( genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) );", 67, 0, input);

                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:616:9: type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_in_genericTypeArgument7396);
                    type190=type();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, type190.getTree());

                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:617:9: QUESTION ( genericWildcardBoundType )?
                    {
                    QUESTION191=(Token)input.LT(1);
                    match(input,QUESTION,FOLLOW_QUESTION_in_genericTypeArgument7406); if (failed) return retval;
                    if ( backtracking==0 ) stream_QUESTION.add(QUESTION191);

                    // /home/bigben/Desktop/Java.g:617:18: ( genericWildcardBoundType )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==EXTENDS) ) {
                        int LA66_1 = input.LA(2);

                        if ( (LA66_1==BOOLEAN||LA66_1==BYTE||LA66_1==CHAR||LA66_1==DOUBLE||LA66_1==FLOAT||(LA66_1>=INT && LA66_1<=LONG)||LA66_1==SHORT) ) {
                            int LA66_4 = input.LA(3);

                            if ( (synpred92()) ) {
                                alt66=1;
                            }
                        }
                        else if ( (LA66_1==IDENT) ) {
                            int LA66_5 = input.LA(3);

                            if ( (synpred92()) ) {
                                alt66=1;
                            }
                        }
                    }
                    else if ( (LA66_0==SUPER) ) {
                        int LA66_3 = input.LA(2);

                        if ( (LA66_3==BOOLEAN||LA66_3==BYTE||LA66_3==CHAR||LA66_3==DOUBLE||LA66_3==FLOAT||(LA66_3>=INT && LA66_3<=LONG)||LA66_3==SHORT||LA66_3==IDENT) ) {
                            alt66=1;
                        }
                    }
                    switch (alt66) {
                        case 1 :
                            // /home/bigben/Desktop/Java.g:0:0: genericWildcardBoundType
                            {
                            pushFollow(FOLLOW_genericWildcardBoundType_in_genericTypeArgument7408);
                            genericWildcardBoundType192=genericWildcardBoundType();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_genericWildcardBoundType.add(genericWildcardBoundType192.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: QUESTION, genericWildcardBoundType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 618:9: -> ^( QUESTION ( genericWildcardBoundType )? )
                    {
                        // /home/bigben/Desktop/Java.g:618:13: ^( QUESTION ( genericWildcardBoundType )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_QUESTION.next(), root_1);

                        // /home/bigben/Desktop/Java.g:618:24: ( genericWildcardBoundType )?
                        if ( stream_genericWildcardBoundType.hasNext() ) {
                            adaptor.addChild(root_1, stream_genericWildcardBoundType.next());

                        }
                        stream_genericWildcardBoundType.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 51, genericTypeArgument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end genericTypeArgument

    public static class genericWildcardBoundType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start genericWildcardBoundType
    // /home/bigben/Desktop/Java.g:621:1: genericWildcardBoundType : ( EXTENDS | SUPER ) type ;
    public final genericWildcardBoundType_return genericWildcardBoundType() throws RecognitionException {
        genericWildcardBoundType_return retval = new genericWildcardBoundType_return();
        retval.start = input.LT(1);
        int genericWildcardBoundType_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set193=null;
        type_return type194 = null;


        CommonTree set193_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // /home/bigben/Desktop/Java.g:622:5: ( ( EXTENDS | SUPER ) type )
            // /home/bigben/Desktop/Java.g:622:9: ( EXTENDS | SUPER ) type
            {
            root_0 = (CommonTree)adaptor.nil();

            set193=(Token)input.LT(1);
            if ( input.LA(1)==EXTENDS||input.LA(1)==SUPER ) {
                input.consume();
                if ( backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(adaptor.create(set193), root_0);
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_genericWildcardBoundType7450);    throw mse;
            }

            pushFollow(FOLLOW_type_in_genericWildcardBoundType7459);
            type194=type();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, type194.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 52, genericWildcardBoundType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end genericWildcardBoundType

    public static class genericTypeArgumentListSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start genericTypeArgumentListSimplified
    // /home/bigben/Desktop/Java.g:625:1: genericTypeArgumentListSimplified : LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ ) ;
    public final genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified() throws RecognitionException {
        genericTypeArgumentListSimplified_return retval = new genericTypeArgumentListSimplified_return();
        retval.start = input.LT(1);
        int genericTypeArgumentListSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_THAN195=null;
        Token COMMA197=null;
        genericTypeArgumentSimplified_return genericTypeArgumentSimplified196 = null;

        genericTypeArgumentSimplified_return genericTypeArgumentSimplified198 = null;

        genericTypeListClosing_return genericTypeListClosing199 = null;


        CommonTree LESS_THAN195_tree=null;
        CommonTree COMMA197_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");
        RewriteRuleSubtreeStream stream_genericTypeArgumentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentSimplified");
        RewriteRuleSubtreeStream stream_genericTypeListClosing=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeListClosing");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // /home/bigben/Desktop/Java.g:626:5: ( LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ ) )
            // /home/bigben/Desktop/Java.g:626:9: LESS_THAN genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing
            {
            LESS_THAN195=(Token)input.LT(1);
            match(input,LESS_THAN,FOLLOW_LESS_THAN_in_genericTypeArgumentListSimplified7478); if (failed) return retval;
            if ( backtracking==0 ) stream_LESS_THAN.add(LESS_THAN195);

            pushFollow(FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7480);
            genericTypeArgumentSimplified196=genericTypeArgumentSimplified();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_genericTypeArgumentSimplified.add(genericTypeArgumentSimplified196.getTree());
            // /home/bigben/Desktop/Java.g:626:49: ( COMMA genericTypeArgumentSimplified )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==COMMA) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:626:50: COMMA genericTypeArgumentSimplified
            	    {
            	    COMMA197=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_genericTypeArgumentListSimplified7483); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMA.add(COMMA197);

            	    pushFollow(FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7485);
            	    genericTypeArgumentSimplified198=genericTypeArgumentSimplified();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_genericTypeArgumentSimplified.add(genericTypeArgumentSimplified198.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);

            pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeArgumentListSimplified7489);
            genericTypeListClosing199=genericTypeListClosing();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_genericTypeListClosing.add(genericTypeListClosing199.getTree());

            // AST REWRITE
            // elements: genericTypeArgumentSimplified
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 627:9: -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ )
            {
                // /home/bigben/Desktop/Java.g:627:13: ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(GENERIC_TYPE_ARG_LIST, LESS_THAN195,  "GENERIC_TYPE_ARG_LIST"), root_1);

                if ( !(stream_genericTypeArgumentSimplified.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_genericTypeArgumentSimplified.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeArgumentSimplified.next());

                }
                stream_genericTypeArgumentSimplified.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 53, genericTypeArgumentListSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end genericTypeArgumentListSimplified

    public static class genericTypeArgumentSimplified_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start genericTypeArgumentSimplified
    // /home/bigben/Desktop/Java.g:630:1: genericTypeArgumentSimplified : ( type | QUESTION );
    public final genericTypeArgumentSimplified_return genericTypeArgumentSimplified() throws RecognitionException {
        genericTypeArgumentSimplified_return retval = new genericTypeArgumentSimplified_return();
        retval.start = input.LT(1);
        int genericTypeArgumentSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token QUESTION201=null;
        type_return type200 = null;


        CommonTree QUESTION201_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // /home/bigben/Desktop/Java.g:631:5: ( type | QUESTION )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==BOOLEAN||LA69_0==BYTE||LA69_0==CHAR||LA69_0==DOUBLE||LA69_0==FLOAT||(LA69_0>=INT && LA69_0<=LONG)||LA69_0==SHORT||LA69_0==IDENT) ) {
                alt69=1;
            }
            else if ( (LA69_0==QUESTION) ) {
                alt69=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("630:1: genericTypeArgumentSimplified : ( type | QUESTION );", 69, 0, input);

                throw nvae;
            }
            switch (alt69) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:631:9: type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_in_genericTypeArgumentSimplified7531);
                    type200=type();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, type200.getTree());

                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:632:9: QUESTION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    QUESTION201=(Token)input.LT(1);
                    match(input,QUESTION,FOLLOW_QUESTION_in_genericTypeArgumentSimplified7541); if (failed) return retval;
                    if ( backtracking==0 ) {
                    QUESTION201_tree = (CommonTree)adaptor.create(QUESTION201);
                    adaptor.addChild(root_0, QUESTION201_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 54, genericTypeArgumentSimplified_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end genericTypeArgumentSimplified

    public static class qualifiedIdentList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start qualifiedIdentList
    // /home/bigben/Desktop/Java.g:635:1: qualifiedIdentList : qualifiedIdentifier ( COMMA qualifiedIdentifier )* ;
    public final qualifiedIdentList_return qualifiedIdentList() throws RecognitionException {
        qualifiedIdentList_return retval = new qualifiedIdentList_return();
        retval.start = input.LT(1);
        int qualifiedIdentList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA203=null;
        qualifiedIdentifier_return qualifiedIdentifier202 = null;

        qualifiedIdentifier_return qualifiedIdentifier204 = null;


        CommonTree COMMA203_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // /home/bigben/Desktop/Java.g:636:5: ( qualifiedIdentifier ( COMMA qualifiedIdentifier )* )
            // /home/bigben/Desktop/Java.g:636:9: qualifiedIdentifier ( COMMA qualifiedIdentifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qualifiedIdentifier_in_qualifiedIdentList7564);
            qualifiedIdentifier202=qualifiedIdentifier();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier202.getTree());
            // /home/bigben/Desktop/Java.g:636:29: ( COMMA qualifiedIdentifier )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==COMMA) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:636:30: COMMA qualifiedIdentifier
            	    {
            	    COMMA203=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_qualifiedIdentList7567); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    COMMA203_tree = (CommonTree)adaptor.create(COMMA203);
            	    adaptor.addChild(root_0, COMMA203_tree);
            	    }
            	    pushFollow(FOLLOW_qualifiedIdentifier_in_qualifiedIdentList7569);
            	    qualifiedIdentifier204=qualifiedIdentifier();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier204.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 55, qualifiedIdentList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end qualifiedIdentList

    public static class formalParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start formalParameterList
    // /home/bigben/Desktop/Java.g:639:1: formalParameterList : LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN ;
    public final formalParameterList_return formalParameterList() throws RecognitionException {
        formalParameterList_return retval = new formalParameterList_return();
        retval.start = input.LT(1);
        int formalParameterList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN205=null;
        Token COMMA207=null;
        Token COMMA209=null;
        Token RPAREN212=null;
        formalParameterStandardDecl_return formalParameterStandardDecl206 = null;

        formalParameterStandardDecl_return formalParameterStandardDecl208 = null;

        formalParameterVarArgDecl_return formalParameterVarArgDecl210 = null;

        formalParameterVarArgDecl_return formalParameterVarArgDecl211 = null;


        CommonTree LPAREN205_tree=null;
        CommonTree COMMA207_tree=null;
        CommonTree COMMA209_tree=null;
        CommonTree RPAREN212_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_formalParameterVarArgDecl=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterVarArgDecl");
        RewriteRuleSubtreeStream stream_formalParameterStandardDecl=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterStandardDecl");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // /home/bigben/Desktop/Java.g:640:5: ( LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN )
            // /home/bigben/Desktop/Java.g:640:9: LPAREN ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) ) RPAREN
            {
            LPAREN205=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_formalParameterList7594); if (failed) return retval;
            if ( backtracking==0 ) stream_LPAREN.add(LPAREN205);

            // /home/bigben/Desktop/Java.g:641:9: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) )
            int alt73=3;
            switch ( input.LA(1) ) {
            case FINAL:
                {
                int LA73_1 = input.LA(2);

                if ( (synpred99()) ) {
                    alt73=1;
                }
                else if ( (synpred100()) ) {
                    alt73=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("641:9: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) )", 73, 1, input);

                    throw nvae;
                }
                }
                break;
            case AT:
                {
                int LA73_2 = input.LA(2);

                if ( (synpred99()) ) {
                    alt73=1;
                }
                else if ( (synpred100()) ) {
                    alt73=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("641:9: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) )", 73, 2, input);

                    throw nvae;
                }
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                int LA73_3 = input.LA(2);

                if ( (synpred99()) ) {
                    alt73=1;
                }
                else if ( (synpred100()) ) {
                    alt73=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("641:9: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) )", 73, 3, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                int LA73_4 = input.LA(2);

                if ( (synpred99()) ) {
                    alt73=1;
                }
                else if ( (synpred100()) ) {
                    alt73=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("641:9: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) )", 73, 4, input);

                    throw nvae;
                }
                }
                break;
            case RPAREN:
                {
                alt73=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("641:9: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ) )", 73, 0, input);

                throw nvae;
            }

            switch (alt73) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:642:13: formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
                    {
                    pushFollow(FOLLOW_formalParameterStandardDecl_in_formalParameterList7622);
                    formalParameterStandardDecl206=formalParameterStandardDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_formalParameterStandardDecl.add(formalParameterStandardDecl206.getTree());
                    // /home/bigben/Desktop/Java.g:642:41: ( COMMA formalParameterStandardDecl )*
                    loop71:
                    do {
                        int alt71=2;
                        int LA71_0 = input.LA(1);

                        if ( (LA71_0==COMMA) ) {
                            int LA71_1 = input.LA(2);

                            if ( (synpred97()) ) {
                                alt71=1;
                            }


                        }


                        switch (alt71) {
                    	case 1 :
                    	    // /home/bigben/Desktop/Java.g:642:42: COMMA formalParameterStandardDecl
                    	    {
                    	    COMMA207=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_formalParameterList7625); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_COMMA.add(COMMA207);

                    	    pushFollow(FOLLOW_formalParameterStandardDecl_in_formalParameterList7627);
                    	    formalParameterStandardDecl208=formalParameterStandardDecl();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_formalParameterStandardDecl.add(formalParameterStandardDecl208.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop71;
                        }
                    } while (true);

                    // /home/bigben/Desktop/Java.g:642:78: ( COMMA formalParameterVarArgDecl )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==COMMA) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // /home/bigben/Desktop/Java.g:642:79: COMMA formalParameterVarArgDecl
                            {
                            COMMA209=(Token)input.LT(1);
                            match(input,COMMA,FOLLOW_COMMA_in_formalParameterList7632); if (failed) return retval;
                            if ( backtracking==0 ) stream_COMMA.add(COMMA209);

                            pushFollow(FOLLOW_formalParameterVarArgDecl_in_formalParameterList7634);
                            formalParameterVarArgDecl210=formalParameterVarArgDecl();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_formalParameterVarArgDecl.add(formalParameterVarArgDecl210.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: formalParameterStandardDecl, formalParameterVarArgDecl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 643:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
                    {
                        // /home/bigben/Desktop/Java.g:643:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(FORMAL_PARAM_LIST, LPAREN205,  "FORMAL_PARAM_LIST"), root_1);

                        if ( !(stream_formalParameterStandardDecl.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_formalParameterStandardDecl.hasNext() ) {
                            adaptor.addChild(root_1, stream_formalParameterStandardDecl.next());

                        }
                        stream_formalParameterStandardDecl.reset();
                        // /home/bigben/Desktop/Java.g:643:96: ( formalParameterVarArgDecl )?
                        if ( stream_formalParameterVarArgDecl.hasNext() ) {
                            adaptor.addChild(root_1, stream_formalParameterVarArgDecl.next());

                        }
                        stream_formalParameterVarArgDecl.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:645:13: formalParameterVarArgDecl
                    {
                    pushFollow(FOLLOW_formalParameterVarArgDecl_in_formalParameterList7691);
                    formalParameterVarArgDecl211=formalParameterVarArgDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_formalParameterVarArgDecl.add(formalParameterVarArgDecl211.getTree());

                    // AST REWRITE
                    // elements: formalParameterVarArgDecl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 646:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
                    {
                        // /home/bigben/Desktop/Java.g:646:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(FORMAL_PARAM_LIST, LPAREN205,  "FORMAL_PARAM_LIST"), root_1);

                        adaptor.addChild(root_1, stream_formalParameterVarArgDecl.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 3 :
                    // /home/bigben/Desktop/Java.g:648:13: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 648:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
                    {
                        // /home/bigben/Desktop/Java.g:648:17: ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(FORMAL_PARAM_LIST, LPAREN205,  "FORMAL_PARAM_LIST"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }

            RPAREN212=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_formalParameterList7768); if (failed) return retval;
            if ( backtracking==0 ) stream_RPAREN.add(RPAREN212);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 56, formalParameterList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end formalParameterList

    public static class formalParameterStandardDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start formalParameterStandardDecl
    // /home/bigben/Desktop/Java.g:653:1: formalParameterStandardDecl : localModifierList type variableDeclaratorId -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) ;
    public final formalParameterStandardDecl_return formalParameterStandardDecl() throws RecognitionException {
        formalParameterStandardDecl_return retval = new formalParameterStandardDecl_return();
        retval.start = input.LT(1);
        int formalParameterStandardDecl_StartIndex = input.index();
        CommonTree root_0 = null;

        localModifierList_return localModifierList213 = null;

        type_return type214 = null;

        variableDeclaratorId_return variableDeclaratorId215 = null;


        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // /home/bigben/Desktop/Java.g:654:5: ( localModifierList type variableDeclaratorId -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId ) )
            // /home/bigben/Desktop/Java.g:654:9: localModifierList type variableDeclaratorId
            {
            pushFollow(FOLLOW_localModifierList_in_formalParameterStandardDecl7791);
            localModifierList213=localModifierList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_localModifierList.add(localModifierList213.getTree());
            pushFollow(FOLLOW_type_in_formalParameterStandardDecl7793);
            type214=type();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_type.add(type214.getTree());
            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterStandardDecl7795);
            variableDeclaratorId215=variableDeclaratorId();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId215.getTree());

            // AST REWRITE
            // elements: type, variableDeclaratorId, localModifierList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 655:9: -> ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
            {
                // /home/bigben/Desktop/Java.g:655:13: ^( FORMAL_PARAM_STD_DECL localModifierList type variableDeclaratorId )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(FORMAL_PARAM_STD_DECL, "FORMAL_PARAM_STD_DECL"), root_1);

                adaptor.addChild(root_1, stream_localModifierList.next());
                adaptor.addChild(root_1, stream_type.next());
                adaptor.addChild(root_1, stream_variableDeclaratorId.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 57, formalParameterStandardDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end formalParameterStandardDecl

    public static class formalParameterVarArgDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start formalParameterVarArgDecl
    // /home/bigben/Desktop/Java.g:658:1: formalParameterVarArgDecl : localModifierList type ELLIPSIS variableDeclaratorId -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) ;
    public final formalParameterVarArgDecl_return formalParameterVarArgDecl() throws RecognitionException {
        formalParameterVarArgDecl_return retval = new formalParameterVarArgDecl_return();
        retval.start = input.LT(1);
        int formalParameterVarArgDecl_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ELLIPSIS218=null;
        localModifierList_return localModifierList216 = null;

        type_return type217 = null;

        variableDeclaratorId_return variableDeclaratorId219 = null;


        CommonTree ELLIPSIS218_tree=null;
        RewriteRuleTokenStream stream_ELLIPSIS=new RewriteRuleTokenStream(adaptor,"token ELLIPSIS");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // /home/bigben/Desktop/Java.g:659:5: ( localModifierList type ELLIPSIS variableDeclaratorId -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) )
            // /home/bigben/Desktop/Java.g:659:9: localModifierList type ELLIPSIS variableDeclaratorId
            {
            pushFollow(FOLLOW_localModifierList_in_formalParameterVarArgDecl7839);
            localModifierList216=localModifierList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_localModifierList.add(localModifierList216.getTree());
            pushFollow(FOLLOW_type_in_formalParameterVarArgDecl7841);
            type217=type();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_type.add(type217.getTree());
            ELLIPSIS218=(Token)input.LT(1);
            match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_formalParameterVarArgDecl7843); if (failed) return retval;
            if ( backtracking==0 ) stream_ELLIPSIS.add(ELLIPSIS218);

            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterVarArgDecl7845);
            variableDeclaratorId219=variableDeclaratorId();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId219.getTree());

            // AST REWRITE
            // elements: type, localModifierList, variableDeclaratorId
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 660:9: -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
            {
                // /home/bigben/Desktop/Java.g:660:13: ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(FORMAL_PARAM_VARARG_DECL, "FORMAL_PARAM_VARARG_DECL"), root_1);

                adaptor.addChild(root_1, stream_localModifierList.next());
                adaptor.addChild(root_1, stream_type.next());
                adaptor.addChild(root_1, stream_variableDeclaratorId.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 58, formalParameterVarArgDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end formalParameterVarArgDecl

    public static class qualifiedIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start qualifiedIdentifier
    // /home/bigben/Desktop/Java.g:663:1: qualifiedIdentifier : ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )* ;
    public final qualifiedIdentifier_return qualifiedIdentifier() throws RecognitionException {
        qualifiedIdentifier_return retval = new qualifiedIdentifier_return();
        retval.start = input.LT(1);
        int qualifiedIdentifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ident=null;
        Token IDENT220=null;
        Token DOT221=null;

        CommonTree ident_tree=null;
        CommonTree IDENT220_tree=null;
        CommonTree DOT221_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // /home/bigben/Desktop/Java.g:664:5: ( ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )* )
            // /home/bigben/Desktop/Java.g:664:9: ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )*
            {
            // /home/bigben/Desktop/Java.g:664:9: ( IDENT -> IDENT )
            // /home/bigben/Desktop/Java.g:664:13: IDENT
            {
            IDENT220=(Token)input.LT(1);
            match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentifier7893); if (failed) return retval;
            if ( backtracking==0 ) stream_IDENT.add(IDENT220);


            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 664:33: -> IDENT
            {
                adaptor.addChild(root_0, stream_IDENT.next());

            }

            }

            }

            // /home/bigben/Desktop/Java.g:666:9: ( DOT ident= IDENT -> ^( DOT $qualifiedIdentifier $ident) )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==DOT) ) {
                    int LA74_2 = input.LA(2);

                    if ( (LA74_2==IDENT) ) {
                        int LA74_3 = input.LA(3);

                        if ( (synpred101()) ) {
                            alt74=1;
                        }


                    }


                }


                switch (alt74) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:666:13: DOT ident= IDENT
            	    {
            	    DOT221=(Token)input.LT(1);
            	    match(input,DOT,FOLLOW_DOT_in_qualifiedIdentifier7936); if (failed) return retval;
            	    if ( backtracking==0 ) stream_DOT.add(DOT221);

            	    ident=(Token)input.LT(1);
            	    match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentifier7940); if (failed) return retval;
            	    if ( backtracking==0 ) stream_IDENT.add(ident);


            	    // AST REWRITE
            	    // elements: ident, DOT, qualifiedIdentifier
            	    // token labels: ident
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    if ( backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleTokenStream stream_ident=new RewriteRuleTokenStream(adaptor,"token ident",ident);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 666:33: -> ^( DOT $qualifiedIdentifier $ident)
            	    {
            	        // /home/bigben/Desktop/Java.g:666:37: ^( DOT $qualifiedIdentifier $ident)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.next(), root_1);

            	        adaptor.addChild(root_1, stream_retval.next());
            	        adaptor.addChild(root_1, stream_ident.next());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    }

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 59, qualifiedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end qualifiedIdentifier

    public static class annotationList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotationList
    // /home/bigben/Desktop/Java.g:672:1: annotationList : ( annotation )* -> ^( ANNOTATION_LIST ( annotation )* ) ;
    public final annotationList_return annotationList() throws RecognitionException {
        annotationList_return retval = new annotationList_return();
        retval.start = input.LT(1);
        int annotationList_StartIndex = input.index();
        CommonTree root_0 = null;

        annotation_return annotation222 = null;


        RewriteRuleSubtreeStream stream_annotation=new RewriteRuleSubtreeStream(adaptor,"rule annotation");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // /home/bigben/Desktop/Java.g:673:5: ( ( annotation )* -> ^( ANNOTATION_LIST ( annotation )* ) )
            // /home/bigben/Desktop/Java.g:673:9: ( annotation )*
            {
            // /home/bigben/Desktop/Java.g:673:9: ( annotation )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==AT) ) {
                    int LA75_2 = input.LA(2);

                    if ( (LA75_2==IDENT) ) {
                        int LA75_3 = input.LA(3);

                        if ( (synpred102()) ) {
                            alt75=1;
                        }


                    }


                }


                switch (alt75) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:0:0: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotationList7993);
            	    annotation222=annotation();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_annotation.add(annotation222.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            // AST REWRITE
            // elements: annotation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 674:9: -> ^( ANNOTATION_LIST ( annotation )* )
            {
                // /home/bigben/Desktop/Java.g:674:13: ^( ANNOTATION_LIST ( annotation )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(ANNOTATION_LIST, "ANNOTATION_LIST"), root_1);

                // /home/bigben/Desktop/Java.g:674:31: ( annotation )*
                while ( stream_annotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotation.next());

                }
                stream_annotation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 60, annotationList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotationList

    public static class annotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotation
    // /home/bigben/Desktop/Java.g:677:1: annotation : AT qualifiedIdentifier ( annotationInit )? ;
    public final annotation_return annotation() throws RecognitionException {
        annotation_return retval = new annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AT223=null;
        qualifiedIdentifier_return qualifiedIdentifier224 = null;

        annotationInit_return annotationInit225 = null;


        CommonTree AT223_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // /home/bigben/Desktop/Java.g:678:5: ( AT qualifiedIdentifier ( annotationInit )? )
            // /home/bigben/Desktop/Java.g:678:9: AT qualifiedIdentifier ( annotationInit )?
            {
            root_0 = (CommonTree)adaptor.nil();

            AT223=(Token)input.LT(1);
            match(input,AT,FOLLOW_AT_in_annotation8031); if (failed) return retval;
            if ( backtracking==0 ) {
            AT223_tree = (CommonTree)adaptor.create(AT223);
            root_0 = (CommonTree)adaptor.becomeRoot(AT223_tree, root_0);
            }
            pushFollow(FOLLOW_qualifiedIdentifier_in_annotation8034);
            qualifiedIdentifier224=qualifiedIdentifier();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentifier224.getTree());
            // /home/bigben/Desktop/Java.g:678:33: ( annotationInit )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==LPAREN) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: annotationInit
                    {
                    pushFollow(FOLLOW_annotationInit_in_annotation8036);
                    annotationInit225=annotationInit();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, annotationInit225.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 61, annotation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotation

    public static class annotationInit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotationInit
    // /home/bigben/Desktop/Java.g:681:1: annotationInit : LPAREN annotationInitializers RPAREN -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers ) ;
    public final annotationInit_return annotationInit() throws RecognitionException {
        annotationInit_return retval = new annotationInit_return();
        retval.start = input.LT(1);
        int annotationInit_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN226=null;
        Token RPAREN228=null;
        annotationInitializers_return annotationInitializers227 = null;


        CommonTree LPAREN226_tree=null;
        CommonTree RPAREN228_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_annotationInitializers=new RewriteRuleSubtreeStream(adaptor,"rule annotationInitializers");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // /home/bigben/Desktop/Java.g:682:5: ( LPAREN annotationInitializers RPAREN -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers ) )
            // /home/bigben/Desktop/Java.g:682:9: LPAREN annotationInitializers RPAREN
            {
            LPAREN226=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_annotationInit8060); if (failed) return retval;
            if ( backtracking==0 ) stream_LPAREN.add(LPAREN226);

            pushFollow(FOLLOW_annotationInitializers_in_annotationInit8062);
            annotationInitializers227=annotationInitializers();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_annotationInitializers.add(annotationInitializers227.getTree());
            RPAREN228=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_annotationInit8064); if (failed) return retval;
            if ( backtracking==0 ) stream_RPAREN.add(RPAREN228);


            // AST REWRITE
            // elements: annotationInitializers
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 683:9: -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers )
            {
                // /home/bigben/Desktop/Java.g:683:13: ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(ANNOTATION_INIT_BLOCK, LPAREN226,  "ANNOTATION_INIT_BLOCK"), root_1);

                adaptor.addChild(root_1, stream_annotationInitializers.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 62, annotationInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotationInit

    public static class annotationInitializers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotationInitializers
    // /home/bigben/Desktop/Java.g:686:1: annotationInitializers : ( annotationInitializer ( COMMA annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) );
    public final annotationInitializers_return annotationInitializers() throws RecognitionException {
        annotationInitializers_return retval = new annotationInitializers_return();
        retval.start = input.LT(1);
        int annotationInitializers_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA230=null;
        annotationInitializer_return annotationInitializer229 = null;

        annotationInitializer_return annotationInitializer231 = null;

        annotationElementValue_return annotationElementValue232 = null;


        CommonTree COMMA230_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_annotationElementValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationElementValue");
        RewriteRuleSubtreeStream stream_annotationInitializer=new RewriteRuleSubtreeStream(adaptor,"rule annotationInitializer");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // /home/bigben/Desktop/Java.g:687:5: ( annotationInitializer ( COMMA annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) )
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==IDENT) ) {
                int LA78_1 = input.LA(2);

                if ( (LA78_1==ASSIGN) ) {
                    alt78=1;
                }
                else if ( (LA78_1==AND||LA78_1==BIT_SHIFT_RIGHT||(LA78_1>=DEC && LA78_1<=DIV)||LA78_1==DOT||(LA78_1>=EQUAL && LA78_1<=LBRACK)||(LA78_1>=LESS_OR_EQUAL && LA78_1<=LOGICAL_AND)||(LA78_1>=LOGICAL_OR && LA78_1<=MINUS)||LA78_1==MOD||(LA78_1>=NOT_EQUAL && LA78_1<=OR)||LA78_1==PLUS||LA78_1==QUESTION||LA78_1==RPAREN||LA78_1==SHIFT_LEFT||LA78_1==SHIFT_RIGHT||LA78_1==STAR||LA78_1==XOR||LA78_1==INSTANCEOF) ) {
                    alt78=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("686:1: annotationInitializers : ( annotationInitializer ( COMMA annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) );", 78, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA78_0==AT||LA78_0==DEC||LA78_0==INC||LA78_0==LCURLY||LA78_0==LESS_THAN||LA78_0==LOGICAL_NOT||(LA78_0>=LPAREN && LA78_0<=MINUS)||LA78_0==NOT||LA78_0==PLUS||LA78_0==BOOLEAN||LA78_0==BYTE||LA78_0==CHAR||LA78_0==DOUBLE||LA78_0==FALSE||LA78_0==FLOAT||(LA78_0>=INT && LA78_0<=LONG)||(LA78_0>=NEW && LA78_0<=NULL)||LA78_0==SHORT||LA78_0==SUPER||LA78_0==THIS||LA78_0==TRUE||LA78_0==VOID||(LA78_0>=HEX_LITERAL && LA78_0<=STRING_LITERAL)) ) {
                alt78=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("686:1: annotationInitializers : ( annotationInitializer ( COMMA annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) );", 78, 0, input);

                throw nvae;
            }
            switch (alt78) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:687:9: annotationInitializer ( COMMA annotationInitializer )*
                    {
                    pushFollow(FOLLOW_annotationInitializer_in_annotationInitializers8101);
                    annotationInitializer229=annotationInitializer();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_annotationInitializer.add(annotationInitializer229.getTree());
                    // /home/bigben/Desktop/Java.g:687:31: ( COMMA annotationInitializer )*
                    loop77:
                    do {
                        int alt77=2;
                        int LA77_0 = input.LA(1);

                        if ( (LA77_0==COMMA) ) {
                            alt77=1;
                        }


                        switch (alt77) {
                    	case 1 :
                    	    // /home/bigben/Desktop/Java.g:687:32: COMMA annotationInitializer
                    	    {
                    	    COMMA230=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_annotationInitializers8104); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_COMMA.add(COMMA230);

                    	    pushFollow(FOLLOW_annotationInitializer_in_annotationInitializers8106);
                    	    annotationInitializer231=annotationInitializer();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_annotationInitializer.add(annotationInitializer231.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop77;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: annotationInitializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 688:9: -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
                    {
                        // /home/bigben/Desktop/Java.g:688:13: ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(ANNOTATION_INIT_KEY_LIST, "ANNOTATION_INIT_KEY_LIST"), root_1);

                        if ( !(stream_annotationInitializer.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_annotationInitializer.hasNext() ) {
                            adaptor.addChild(root_1, stream_annotationInitializer.next());

                        }
                        stream_annotationInitializer.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:689:9: annotationElementValue
                    {
                    pushFollow(FOLLOW_annotationElementValue_in_annotationInitializers8136);
                    annotationElementValue232=annotationElementValue();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_annotationElementValue.add(annotationElementValue232.getTree());

                    // AST REWRITE
                    // elements: annotationElementValue
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 690:9: -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
                    {
                        // /home/bigben/Desktop/Java.g:690:13: ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(ANNOTATION_INIT_DEFAULT_KEY, "ANNOTATION_INIT_DEFAULT_KEY"), root_1);

                        adaptor.addChild(root_1, stream_annotationElementValue.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 63, annotationInitializers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotationInitializers

    public static class annotationInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotationInitializer
    // /home/bigben/Desktop/Java.g:693:1: annotationInitializer : IDENT ASSIGN annotationElementValue ;
    public final annotationInitializer_return annotationInitializer() throws RecognitionException {
        annotationInitializer_return retval = new annotationInitializer_return();
        retval.start = input.LT(1);
        int annotationInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT233=null;
        Token ASSIGN234=null;
        annotationElementValue_return annotationElementValue235 = null;


        CommonTree IDENT233_tree=null;
        CommonTree ASSIGN234_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // /home/bigben/Desktop/Java.g:694:5: ( IDENT ASSIGN annotationElementValue )
            // /home/bigben/Desktop/Java.g:694:9: IDENT ASSIGN annotationElementValue
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT233=(Token)input.LT(1);
            match(input,IDENT,FOLLOW_IDENT_in_annotationInitializer8177); if (failed) return retval;
            if ( backtracking==0 ) {
            IDENT233_tree = (CommonTree)adaptor.create(IDENT233);
            root_0 = (CommonTree)adaptor.becomeRoot(IDENT233_tree, root_0);
            }
            ASSIGN234=(Token)input.LT(1);
            match(input,ASSIGN,FOLLOW_ASSIGN_in_annotationInitializer8180); if (failed) return retval;
            if ( backtracking==0 ) {
            ASSIGN234_tree = (CommonTree)adaptor.create(ASSIGN234);
            adaptor.addChild(root_0, ASSIGN234_tree);
            }
            pushFollow(FOLLOW_annotationElementValue_in_annotationInitializer8182);
            annotationElementValue235=annotationElementValue();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, annotationElementValue235.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 64, annotationInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotationInitializer

    public static class annotationElementValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotationElementValue
    // /home/bigben/Desktop/Java.g:697:1: annotationElementValue : ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer );
    public final annotationElementValue_return annotationElementValue() throws RecognitionException {
        annotationElementValue_return retval = new annotationElementValue_return();
        retval.start = input.LT(1);
        int annotationElementValue_StartIndex = input.index();
        CommonTree root_0 = null;

        annotationElementValueExpression_return annotationElementValueExpression236 = null;

        annotation_return annotation237 = null;

        annotationElementValueArrayInitializer_return annotationElementValueArrayInitializer238 = null;



        try {
            if ( backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // /home/bigben/Desktop/Java.g:698:5: ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer )
            int alt79=3;
            switch ( input.LA(1) ) {
            case DEC:
            case INC:
            case LESS_THAN:
            case LOGICAL_NOT:
            case LPAREN:
            case MINUS:
            case NOT:
            case PLUS:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case IDENT:
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                {
                alt79=1;
                }
                break;
            case AT:
                {
                alt79=2;
                }
                break;
            case LCURLY:
                {
                alt79=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("697:1: annotationElementValue : ( annotationElementValueExpression | annotation | annotationElementValueArrayInitializer );", 79, 0, input);

                throw nvae;
            }

            switch (alt79) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:698:9: annotationElementValueExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationElementValueExpression_in_annotationElementValue8205);
                    annotationElementValueExpression236=annotationElementValueExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, annotationElementValueExpression236.getTree());

                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:699:9: annotation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_annotationElementValue8215);
                    annotation237=annotation();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, annotation237.getTree());

                    }
                    break;
                case 3 :
                    // /home/bigben/Desktop/Java.g:700:9: annotationElementValueArrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationElementValueArrayInitializer_in_annotationElementValue8225);
                    annotationElementValueArrayInitializer238=annotationElementValueArrayInitializer();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, annotationElementValueArrayInitializer238.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 65, annotationElementValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotationElementValue

    public static class annotationElementValueExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotationElementValueExpression
    // /home/bigben/Desktop/Java.g:703:1: annotationElementValueExpression : conditionalExpression -> ^( EXPR conditionalExpression ) ;
    public final annotationElementValueExpression_return annotationElementValueExpression() throws RecognitionException {
        annotationElementValueExpression_return retval = new annotationElementValueExpression_return();
        retval.start = input.LT(1);
        int annotationElementValueExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        conditionalExpression_return conditionalExpression239 = null;


        RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // /home/bigben/Desktop/Java.g:704:5: ( conditionalExpression -> ^( EXPR conditionalExpression ) )
            // /home/bigben/Desktop/Java.g:704:9: conditionalExpression
            {
            pushFollow(FOLLOW_conditionalExpression_in_annotationElementValueExpression8248);
            conditionalExpression239=conditionalExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_conditionalExpression.add(conditionalExpression239.getTree());

            // AST REWRITE
            // elements: conditionalExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 705:9: -> ^( EXPR conditionalExpression )
            {
                // /home/bigben/Desktop/Java.g:705:13: ^( EXPR conditionalExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(EXPR, "EXPR"), root_1);

                adaptor.addChild(root_1, stream_conditionalExpression.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 66, annotationElementValueExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotationElementValueExpression

    public static class annotationElementValueArrayInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotationElementValueArrayInitializer
    // /home/bigben/Desktop/Java.g:708:1: annotationElementValueArrayInitializer : LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* ) ;
    public final annotationElementValueArrayInitializer_return annotationElementValueArrayInitializer() throws RecognitionException {
        annotationElementValueArrayInitializer_return retval = new annotationElementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int annotationElementValueArrayInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY240=null;
        Token COMMA242=null;
        Token COMMA244=null;
        Token RCURLY245=null;
        annotationElementValue_return annotationElementValue241 = null;

        annotationElementValue_return annotationElementValue243 = null;


        CommonTree LCURLY240_tree=null;
        CommonTree COMMA242_tree=null;
        CommonTree COMMA244_tree=null;
        CommonTree RCURLY245_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_annotationElementValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationElementValue");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // /home/bigben/Desktop/Java.g:709:5: ( LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* ) )
            // /home/bigben/Desktop/Java.g:709:9: LCURLY ( annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY
            {
            LCURLY240=(Token)input.LT(1);
            match(input,LCURLY,FOLLOW_LCURLY_in_annotationElementValueArrayInitializer8288); if (failed) return retval;
            if ( backtracking==0 ) stream_LCURLY.add(LCURLY240);

            // /home/bigben/Desktop/Java.g:709:16: ( annotationElementValue ( COMMA annotationElementValue )* )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==AT||LA81_0==DEC||LA81_0==INC||LA81_0==LCURLY||LA81_0==LESS_THAN||LA81_0==LOGICAL_NOT||(LA81_0>=LPAREN && LA81_0<=MINUS)||LA81_0==NOT||LA81_0==PLUS||LA81_0==BOOLEAN||LA81_0==BYTE||LA81_0==CHAR||LA81_0==DOUBLE||LA81_0==FALSE||LA81_0==FLOAT||(LA81_0>=INT && LA81_0<=LONG)||(LA81_0>=NEW && LA81_0<=NULL)||LA81_0==SHORT||LA81_0==SUPER||LA81_0==THIS||LA81_0==TRUE||LA81_0==VOID||(LA81_0>=IDENT && LA81_0<=STRING_LITERAL)) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:709:17: annotationElementValue ( COMMA annotationElementValue )*
                    {
                    pushFollow(FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer8291);
                    annotationElementValue241=annotationElementValue();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_annotationElementValue.add(annotationElementValue241.getTree());
                    // /home/bigben/Desktop/Java.g:709:40: ( COMMA annotationElementValue )*
                    loop80:
                    do {
                        int alt80=2;
                        int LA80_0 = input.LA(1);

                        if ( (LA80_0==COMMA) ) {
                            int LA80_1 = input.LA(2);

                            if ( (LA80_1==AT||LA80_1==DEC||LA80_1==INC||LA80_1==LCURLY||LA80_1==LESS_THAN||LA80_1==LOGICAL_NOT||(LA80_1>=LPAREN && LA80_1<=MINUS)||LA80_1==NOT||LA80_1==PLUS||LA80_1==BOOLEAN||LA80_1==BYTE||LA80_1==CHAR||LA80_1==DOUBLE||LA80_1==FALSE||LA80_1==FLOAT||(LA80_1>=INT && LA80_1<=LONG)||(LA80_1>=NEW && LA80_1<=NULL)||LA80_1==SHORT||LA80_1==SUPER||LA80_1==THIS||LA80_1==TRUE||LA80_1==VOID||(LA80_1>=IDENT && LA80_1<=STRING_LITERAL)) ) {
                                alt80=1;
                            }


                        }


                        switch (alt80) {
                    	case 1 :
                    	    // /home/bigben/Desktop/Java.g:709:41: COMMA annotationElementValue
                    	    {
                    	    COMMA242=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_annotationElementValueArrayInitializer8294); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_COMMA.add(COMMA242);

                    	    pushFollow(FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer8296);
                    	    annotationElementValue243=annotationElementValue();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_annotationElementValue.add(annotationElementValue243.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop80;
                        }
                    } while (true);


                    }
                    break;

            }

            // /home/bigben/Desktop/Java.g:709:74: ( COMMA )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==COMMA) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:709:75: COMMA
                    {
                    COMMA244=(Token)input.LT(1);
                    match(input,COMMA,FOLLOW_COMMA_in_annotationElementValueArrayInitializer8303); if (failed) return retval;
                    if ( backtracking==0 ) stream_COMMA.add(COMMA244);


                    }
                    break;

            }

            RCURLY245=(Token)input.LT(1);
            match(input,RCURLY,FOLLOW_RCURLY_in_annotationElementValueArrayInitializer8307); if (failed) return retval;
            if ( backtracking==0 ) stream_RCURLY.add(RCURLY245);


            // AST REWRITE
            // elements: annotationElementValue
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 710:9: -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* )
            {
                // /home/bigben/Desktop/Java.g:710:13: ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(ANNOTATION_INIT_ARRAY_ELEMENT, LCURLY240,  "ANNOTATION_ELEM_VALUE_ARRAY_INIT"), root_1);

                // /home/bigben/Desktop/Java.g:710:90: ( annotationElementValue )*
                while ( stream_annotationElementValue.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationElementValue.next());

                }
                stream_annotationElementValue.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 67, annotationElementValueArrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotationElementValueArrayInitializer

    public static class annotationTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotationTypeDeclaration
    // /home/bigben/Desktop/Java.g:713:1: annotationTypeDeclaration[CommonTree modifiers] : AT INTERFACE IDENT annotationBody -> ^( AT IDENT annotationBody ) ;
    public final annotationTypeDeclaration_return annotationTypeDeclaration(CommonTree modifiers) throws RecognitionException {
        annotationTypeDeclaration_return retval = new annotationTypeDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AT246=null;
        Token INTERFACE247=null;
        Token IDENT248=null;
        annotationBody_return annotationBody249 = null;


        CommonTree AT246_tree=null;
        CommonTree INTERFACE247_tree=null;
        CommonTree IDENT248_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
        RewriteRuleSubtreeStream stream_annotationBody=new RewriteRuleSubtreeStream(adaptor,"rule annotationBody");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // /home/bigben/Desktop/Java.g:714:5: ( AT INTERFACE IDENT annotationBody -> ^( AT IDENT annotationBody ) )
            // /home/bigben/Desktop/Java.g:714:9: AT INTERFACE IDENT annotationBody
            {
            AT246=(Token)input.LT(1);
            match(input,AT,FOLLOW_AT_in_annotationTypeDeclaration8350); if (failed) return retval;
            if ( backtracking==0 ) stream_AT.add(AT246);

            INTERFACE247=(Token)input.LT(1);
            match(input,INTERFACE,FOLLOW_INTERFACE_in_annotationTypeDeclaration8352); if (failed) return retval;
            if ( backtracking==0 ) stream_INTERFACE.add(INTERFACE247);

            IDENT248=(Token)input.LT(1);
            match(input,IDENT,FOLLOW_IDENT_in_annotationTypeDeclaration8354); if (failed) return retval;
            if ( backtracking==0 ) stream_IDENT.add(IDENT248);

            pushFollow(FOLLOW_annotationBody_in_annotationTypeDeclaration8356);
            annotationBody249=annotationBody();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_annotationBody.add(annotationBody249.getTree());

            // AST REWRITE
            // elements: IDENT, annotationBody, AT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 715:9: -> ^( AT IDENT annotationBody )
            {
                // /home/bigben/Desktop/Java.g:715:12: ^( AT IDENT annotationBody )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AT.next(), root_1);

                adaptor.addChild(root_1, modifiers);
                adaptor.addChild(root_1, stream_IDENT.next());
                adaptor.addChild(root_1, stream_annotationBody.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 68, annotationTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotationTypeDeclaration

    public static class annotationBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotationBody
    // /home/bigben/Desktop/Java.g:718:1: annotationBody : LCURLY ( annotationScopeDeclarations )* RCURLY -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"ANNOTATION_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* ) ;
    public final annotationBody_return annotationBody() throws RecognitionException {
        annotationBody_return retval = new annotationBody_return();
        retval.start = input.LT(1);
        int annotationBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY250=null;
        Token RCURLY252=null;
        annotationScopeDeclarations_return annotationScopeDeclarations251 = null;


        CommonTree LCURLY250_tree=null;
        CommonTree RCURLY252_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_annotationScopeDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule annotationScopeDeclarations");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // /home/bigben/Desktop/Java.g:719:5: ( LCURLY ( annotationScopeDeclarations )* RCURLY -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"ANNOTATION_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* ) )
            // /home/bigben/Desktop/Java.g:719:9: LCURLY ( annotationScopeDeclarations )* RCURLY
            {
            LCURLY250=(Token)input.LT(1);
            match(input,LCURLY,FOLLOW_LCURLY_in_annotationBody8399); if (failed) return retval;
            if ( backtracking==0 ) stream_LCURLY.add(LCURLY250);

            // /home/bigben/Desktop/Java.g:719:16: ( annotationScopeDeclarations )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==AT||LA83_0==ABSTRACT||LA83_0==BOOLEAN||LA83_0==BYTE||(LA83_0>=CHAR && LA83_0<=CLASS)||LA83_0==DOUBLE||LA83_0==ENUM||LA83_0==FINAL||LA83_0==FLOAT||LA83_0==INTERFACE||(LA83_0>=INT && LA83_0<=NATIVE)||(LA83_0>=PRIVATE && LA83_0<=PUBLIC)||(LA83_0>=SHORT && LA83_0<=STRICTFP)||LA83_0==SYNCHRONIZED||LA83_0==TRANSIENT||LA83_0==VOLATILE||LA83_0==IDENT) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:0:0: annotationScopeDeclarations
            	    {
            	    pushFollow(FOLLOW_annotationScopeDeclarations_in_annotationBody8401);
            	    annotationScopeDeclarations251=annotationScopeDeclarations();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_annotationScopeDeclarations.add(annotationScopeDeclarations251.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);

            RCURLY252=(Token)input.LT(1);
            match(input,RCURLY,FOLLOW_RCURLY_in_annotationBody8404); if (failed) return retval;
            if ( backtracking==0 ) stream_RCURLY.add(RCURLY252);


            // AST REWRITE
            // elements: annotationScopeDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 720:9: -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"ANNOTATION_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* )
            {
                // /home/bigben/Desktop/Java.g:720:13: ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"ANNOTATION_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(ANNOTATION_TOP_LEVEL_SCOPE, LCURLY250,  "ANNOTATION_TOP_LEVEL_SCOPE"), root_1);

                // /home/bigben/Desktop/Java.g:720:81: ( annotationScopeDeclarations )*
                while ( stream_annotationScopeDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationScopeDeclarations.next());

                }
                stream_annotationScopeDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 69, annotationBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotationBody

    public static class annotationScopeDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotationScopeDeclarations
    // /home/bigben/Desktop/Java.g:723:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );
    public final annotationScopeDeclarations_return annotationScopeDeclarations() throws RecognitionException {
        annotationScopeDeclarations_return retval = new annotationScopeDeclarations_return();
        retval.start = input.LT(1);
        int annotationScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT255=null;
        Token LPAREN256=null;
        Token RPAREN257=null;
        Token SEMI259=null;
        Token SEMI261=null;
        modifierList_return modifierList253 = null;

        type_return type254 = null;

        annotationDefaultValue_return annotationDefaultValue258 = null;

        classFieldDeclaratorList_return classFieldDeclaratorList260 = null;

        typeDeclaration_return typeDeclaration262 = null;


        CommonTree IDENT255_tree=null;
        CommonTree LPAREN256_tree=null;
        CommonTree RPAREN257_tree=null;
        CommonTree SEMI259_tree=null;
        CommonTree SEMI261_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_modifierList=new RewriteRuleSubtreeStream(adaptor,"rule modifierList");
        RewriteRuleSubtreeStream stream_annotationDefaultValue=new RewriteRuleSubtreeStream(adaptor,"rule annotationDefaultValue");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // /home/bigben/Desktop/Java.g:724:5: ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration )
            int alt86=2;
            switch ( input.LA(1) ) {
            case PUBLIC:
                {
                int LA86_1 = input.LA(2);

                if ( (synpred114()) ) {
                    alt86=1;
                }
                else if ( (true) ) {
                    alt86=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("723:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );", 86, 1, input);

                    throw nvae;
                }
                }
                break;
            case PROTECTED:
                {
                int LA86_2 = input.LA(2);

                if ( (synpred114()) ) {
                    alt86=1;
                }
                else if ( (true) ) {
                    alt86=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("723:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );", 86, 2, input);

                    throw nvae;
                }
                }
                break;
            case PRIVATE:
                {
                int LA86_3 = input.LA(2);

                if ( (synpred114()) ) {
                    alt86=1;
                }
                else if ( (true) ) {
                    alt86=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("723:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );", 86, 3, input);

                    throw nvae;
                }
                }
                break;
            case STATIC:
                {
                int LA86_4 = input.LA(2);

                if ( (synpred114()) ) {
                    alt86=1;
                }
                else if ( (true) ) {
                    alt86=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("723:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );", 86, 4, input);

                    throw nvae;
                }
                }
                break;
            case ABSTRACT:
                {
                int LA86_5 = input.LA(2);

                if ( (synpred114()) ) {
                    alt86=1;
                }
                else if ( (true) ) {
                    alt86=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("723:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );", 86, 5, input);

                    throw nvae;
                }
                }
                break;
            case NATIVE:
                {
                int LA86_6 = input.LA(2);

                if ( (synpred114()) ) {
                    alt86=1;
                }
                else if ( (true) ) {
                    alt86=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("723:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );", 86, 6, input);

                    throw nvae;
                }
                }
                break;
            case SYNCHRONIZED:
                {
                int LA86_7 = input.LA(2);

                if ( (synpred114()) ) {
                    alt86=1;
                }
                else if ( (true) ) {
                    alt86=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("723:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );", 86, 7, input);

                    throw nvae;
                }
                }
                break;
            case TRANSIENT:
                {
                int LA86_8 = input.LA(2);

                if ( (synpred114()) ) {
                    alt86=1;
                }
                else if ( (true) ) {
                    alt86=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("723:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );", 86, 8, input);

                    throw nvae;
                }
                }
                break;
            case VOLATILE:
                {
                int LA86_9 = input.LA(2);

                if ( (synpred114()) ) {
                    alt86=1;
                }
                else if ( (true) ) {
                    alt86=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("723:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );", 86, 9, input);

                    throw nvae;
                }
                }
                break;
            case STRICTFP:
                {
                int LA86_10 = input.LA(2);

                if ( (synpred114()) ) {
                    alt86=1;
                }
                else if ( (true) ) {
                    alt86=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("723:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );", 86, 10, input);

                    throw nvae;
                }
                }
                break;
            case FINAL:
                {
                int LA86_11 = input.LA(2);

                if ( (synpred114()) ) {
                    alt86=1;
                }
                else if ( (true) ) {
                    alt86=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("723:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );", 86, 11, input);

                    throw nvae;
                }
                }
                break;
            case AT:
                {
                int LA86_12 = input.LA(2);

                if ( (synpred114()) ) {
                    alt86=1;
                }
                else if ( (true) ) {
                    alt86=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("723:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );", 86, 12, input);

                    throw nvae;
                }
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case IDENT:
                {
                alt86=1;
                }
                break;
            case CLASS:
            case ENUM:
            case INTERFACE:
                {
                alt86=2;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("723:1: annotationScopeDeclarations : ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );", 86, 0, input);

                throw nvae;
            }

            switch (alt86) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:724:9: modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    {
                    pushFollow(FOLLOW_modifierList_in_annotationScopeDeclarations8446);
                    modifierList253=modifierList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_modifierList.add(modifierList253.getTree());
                    pushFollow(FOLLOW_type_in_annotationScopeDeclarations8448);
                    type254=type();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_type.add(type254.getTree());
                    // /home/bigben/Desktop/Java.g:725:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==IDENT) ) {
                        int LA85_1 = input.LA(2);

                        if ( (LA85_1==LPAREN) ) {
                            alt85=1;
                        }
                        else if ( (LA85_1==ASSIGN||LA85_1==COMMA||LA85_1==LBRACK||LA85_1==SEMI) ) {
                            alt85=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("725:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )", 85, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("725:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )", 85, 0, input);

                        throw nvae;
                    }
                    switch (alt85) {
                        case 1 :
                            // /home/bigben/Desktop/Java.g:725:13: IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI
                            {
                            IDENT255=(Token)input.LT(1);
                            match(input,IDENT,FOLLOW_IDENT_in_annotationScopeDeclarations8462); if (failed) return retval;
                            if ( backtracking==0 ) stream_IDENT.add(IDENT255);

                            LPAREN256=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_annotationScopeDeclarations8464); if (failed) return retval;
                            if ( backtracking==0 ) stream_LPAREN.add(LPAREN256);

                            RPAREN257=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_annotationScopeDeclarations8466); if (failed) return retval;
                            if ( backtracking==0 ) stream_RPAREN.add(RPAREN257);

                            // /home/bigben/Desktop/Java.g:725:33: ( annotationDefaultValue )?
                            int alt84=2;
                            int LA84_0 = input.LA(1);

                            if ( (LA84_0==DEFAULT) ) {
                                alt84=1;
                            }
                            switch (alt84) {
                                case 1 :
                                    // /home/bigben/Desktop/Java.g:0:0: annotationDefaultValue
                                    {
                                    pushFollow(FOLLOW_annotationDefaultValue_in_annotationScopeDeclarations8468);
                                    annotationDefaultValue258=annotationDefaultValue();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_annotationDefaultValue.add(annotationDefaultValue258.getTree());

                                    }
                                    break;

                            }

                            SEMI259=(Token)input.LT(1);
                            match(input,SEMI,FOLLOW_SEMI_in_annotationScopeDeclarations8471); if (failed) return retval;
                            if ( backtracking==0 ) stream_SEMI.add(SEMI259);


                            // AST REWRITE
                            // elements: IDENT, annotationDefaultValue, type, modifierList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 726:13: -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
                            {
                                // /home/bigben/Desktop/Java.g:726:17: ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(ANNOTATION_METHOD_DECL, "ANNOTATION_METHOD_DECL"), root_1);

                                adaptor.addChild(root_1, stream_modifierList.next());
                                adaptor.addChild(root_1, stream_type.next());
                                adaptor.addChild(root_1, stream_IDENT.next());
                                // /home/bigben/Desktop/Java.g:726:66: ( annotationDefaultValue )?
                                if ( stream_annotationDefaultValue.hasNext() ) {
                                    adaptor.addChild(root_1, stream_annotationDefaultValue.next());

                                }
                                stream_annotationDefaultValue.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;
                        case 2 :
                            // /home/bigben/Desktop/Java.g:727:13: classFieldDeclaratorList SEMI
                            {
                            pushFollow(FOLLOW_classFieldDeclaratorList_in_annotationScopeDeclarations8513);
                            classFieldDeclaratorList260=classFieldDeclaratorList();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_classFieldDeclaratorList.add(classFieldDeclaratorList260.getTree());
                            SEMI261=(Token)input.LT(1);
                            match(input,SEMI,FOLLOW_SEMI_in_annotationScopeDeclarations8515); if (failed) return retval;
                            if ( backtracking==0 ) stream_SEMI.add(SEMI261);


                            // AST REWRITE
                            // elements: type, classFieldDeclaratorList, modifierList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 728:13: -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                            {
                                // /home/bigben/Desktop/Java.g:728:17: ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                                adaptor.addChild(root_1, stream_modifierList.next());
                                adaptor.addChild(root_1, stream_type.next());
                                adaptor.addChild(root_1, stream_classFieldDeclaratorList.next());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:730:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_annotationScopeDeclarations8560);
                    typeDeclaration262=typeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, typeDeclaration262.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 70, annotationScopeDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotationScopeDeclarations

    public static class annotationDefaultValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotationDefaultValue
    // /home/bigben/Desktop/Java.g:733:1: annotationDefaultValue : DEFAULT annotationElementValue ;
    public final annotationDefaultValue_return annotationDefaultValue() throws RecognitionException {
        annotationDefaultValue_return retval = new annotationDefaultValue_return();
        retval.start = input.LT(1);
        int annotationDefaultValue_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DEFAULT263=null;
        annotationElementValue_return annotationElementValue264 = null;


        CommonTree DEFAULT263_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // /home/bigben/Desktop/Java.g:734:5: ( DEFAULT annotationElementValue )
            // /home/bigben/Desktop/Java.g:734:9: DEFAULT annotationElementValue
            {
            root_0 = (CommonTree)adaptor.nil();

            DEFAULT263=(Token)input.LT(1);
            match(input,DEFAULT,FOLLOW_DEFAULT_in_annotationDefaultValue8583); if (failed) return retval;
            if ( backtracking==0 ) {
            DEFAULT263_tree = (CommonTree)adaptor.create(DEFAULT263);
            root_0 = (CommonTree)adaptor.becomeRoot(DEFAULT263_tree, root_0);
            }
            pushFollow(FOLLOW_annotationElementValue_in_annotationDefaultValue8586);
            annotationElementValue264=annotationElementValue();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, annotationElementValue264.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 71, annotationDefaultValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end annotationDefaultValue

    public static class block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start block
    // /home/bigben/Desktop/Java.g:739:1: block : LCURLY ( blockStatement )* RCURLY -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) ;
    public final block_return block() throws RecognitionException {
        block_return retval = new block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY265=null;
        Token RCURLY267=null;
        blockStatement_return blockStatement266 = null;


        CommonTree LCURLY265_tree=null;
        CommonTree RCURLY267_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // /home/bigben/Desktop/Java.g:740:5: ( LCURLY ( blockStatement )* RCURLY -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) )
            // /home/bigben/Desktop/Java.g:740:9: LCURLY ( blockStatement )* RCURLY
            {
            LCURLY265=(Token)input.LT(1);
            match(input,LCURLY,FOLLOW_LCURLY_in_block8607); if (failed) return retval;
            if ( backtracking==0 ) stream_LCURLY.add(LCURLY265);

            // /home/bigben/Desktop/Java.g:740:16: ( blockStatement )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==AT||LA87_0==DEC||LA87_0==INC||LA87_0==LCURLY||LA87_0==LESS_THAN||LA87_0==LOGICAL_NOT||(LA87_0>=LPAREN && LA87_0<=MINUS)||LA87_0==NOT||LA87_0==PLUS||LA87_0==SEMI||(LA87_0>=ABSTRACT && LA87_0<=BYTE)||(LA87_0>=CHAR && LA87_0<=CONTINUE)||(LA87_0>=DO && LA87_0<=DOUBLE)||LA87_0==ENUM||(LA87_0>=FALSE && LA87_0<=FINAL)||(LA87_0>=FLOAT && LA87_0<=IF)||LA87_0==INTERFACE||(LA87_0>=INT && LA87_0<=NULL)||(LA87_0>=PRIVATE && LA87_0<=THROW)||(LA87_0>=TRANSIENT && LA87_0<=WHILE)||(LA87_0>=IDENT && LA87_0<=STRING_LITERAL)) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block8609);
            	    blockStatement266=blockStatement();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_blockStatement.add(blockStatement266.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);

            RCURLY267=(Token)input.LT(1);
            match(input,RCURLY,FOLLOW_RCURLY_in_block8612); if (failed) return retval;
            if ( backtracking==0 ) stream_RCURLY.add(RCURLY267);


            // AST REWRITE
            // elements: blockStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 741:9: -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* )
            {
                // /home/bigben/Desktop/Java.g:741:13: ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(BLOCK_SCOPE, LCURLY265,  "BLOCK_SCOPE"), root_1);

                // /home/bigben/Desktop/Java.g:741:51: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_blockStatement.next());

                }
                stream_blockStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 72, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end block

    public static class blockStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start blockStatement
    // /home/bigben/Desktop/Java.g:744:1: blockStatement : ( localVariableDeclaration SEMI | typeDeclaration | statement );
    public final blockStatement_return blockStatement() throws RecognitionException {
        blockStatement_return retval = new blockStatement_return();
        retval.start = input.LT(1);
        int blockStatement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SEMI269=null;
        localVariableDeclaration_return localVariableDeclaration268 = null;

        typeDeclaration_return typeDeclaration270 = null;

        statement_return statement271 = null;


        CommonTree SEMI269_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // /home/bigben/Desktop/Java.g:745:5: ( localVariableDeclaration SEMI | typeDeclaration | statement )
            int alt88=3;
            switch ( input.LA(1) ) {
            case FINAL:
                {
                int LA88_1 = input.LA(2);

                if ( (synpred116()) ) {
                    alt88=1;
                }
                else if ( (synpred117()) ) {
                    alt88=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("744:1: blockStatement : ( localVariableDeclaration SEMI | typeDeclaration | statement );", 88, 1, input);

                    throw nvae;
                }
                }
                break;
            case AT:
                {
                int LA88_2 = input.LA(2);

                if ( (synpred116()) ) {
                    alt88=1;
                }
                else if ( (synpred117()) ) {
                    alt88=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("744:1: blockStatement : ( localVariableDeclaration SEMI | typeDeclaration | statement );", 88, 2, input);

                    throw nvae;
                }
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                int LA88_3 = input.LA(2);

                if ( (synpred116()) ) {
                    alt88=1;
                }
                else if ( (true) ) {
                    alt88=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("744:1: blockStatement : ( localVariableDeclaration SEMI | typeDeclaration | statement );", 88, 3, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                int LA88_4 = input.LA(2);

                if ( (synpred116()) ) {
                    alt88=1;
                }
                else if ( (true) ) {
                    alt88=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("744:1: blockStatement : ( localVariableDeclaration SEMI | typeDeclaration | statement );", 88, 4, input);

                    throw nvae;
                }
                }
                break;
            case ABSTRACT:
            case CLASS:
            case ENUM:
            case INTERFACE:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case STATIC:
            case STRICTFP:
            case TRANSIENT:
            case VOLATILE:
                {
                alt88=2;
                }
                break;
            case SYNCHRONIZED:
                {
                int LA88_11 = input.LA(2);

                if ( (synpred117()) ) {
                    alt88=2;
                }
                else if ( (true) ) {
                    alt88=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("744:1: blockStatement : ( localVariableDeclaration SEMI | typeDeclaration | statement );", 88, 11, input);

                    throw nvae;
                }
                }
                break;
            case DEC:
            case INC:
            case LCURLY:
            case LESS_THAN:
            case LOGICAL_NOT:
            case LPAREN:
            case MINUS:
            case NOT:
            case PLUS:
            case SEMI:
            case ASSERT:
            case BREAK:
            case CONTINUE:
            case DO:
            case FALSE:
            case FOR:
            case IF:
            case NEW:
            case NULL:
            case RETURN:
            case SUPER:
            case SWITCH:
            case THIS:
            case THROW:
            case TRUE:
            case TRY:
            case VOID:
            case WHILE:
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                {
                alt88=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("744:1: blockStatement : ( localVariableDeclaration SEMI | typeDeclaration | statement );", 88, 0, input);

                throw nvae;
            }

            switch (alt88) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:745:9: localVariableDeclaration SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclaration_in_blockStatement8650);
                    localVariableDeclaration268=localVariableDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, localVariableDeclaration268.getTree());
                    SEMI269=(Token)input.LT(1);
                    match(input,SEMI,FOLLOW_SEMI_in_blockStatement8652); if (failed) return retval;
                    if ( backtracking==0 ) {
                    SEMI269_tree = (CommonTree)adaptor.create(SEMI269);
                    adaptor.addChild(root_0, SEMI269_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:746:9: typeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_blockStatement8662);
                    typeDeclaration270=typeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, typeDeclaration270.getTree());

                    }
                    break;
                case 3 :
                    // /home/bigben/Desktop/Java.g:747:9: statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_blockStatement8672);
                    statement271=statement();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, statement271.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 73, blockStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end blockStatement

    public static class localVariableDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start localVariableDeclaration
    // /home/bigben/Desktop/Java.g:750:1: localVariableDeclaration : localModifierList type classFieldDeclaratorList -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList ) ;
    public final localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
        localVariableDeclaration_return retval = new localVariableDeclaration_return();
        retval.start = input.LT(1);
        int localVariableDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        localModifierList_return localModifierList272 = null;

        type_return type273 = null;

        classFieldDeclaratorList_return classFieldDeclaratorList274 = null;


        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classFieldDeclaratorList=new RewriteRuleSubtreeStream(adaptor,"rule classFieldDeclaratorList");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // /home/bigben/Desktop/Java.g:751:5: ( localModifierList type classFieldDeclaratorList -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList ) )
            // /home/bigben/Desktop/Java.g:751:9: localModifierList type classFieldDeclaratorList
            {
            pushFollow(FOLLOW_localModifierList_in_localVariableDeclaration8695);
            localModifierList272=localModifierList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_localModifierList.add(localModifierList272.getTree());
            pushFollow(FOLLOW_type_in_localVariableDeclaration8697);
            type273=type();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_type.add(type273.getTree());
            pushFollow(FOLLOW_classFieldDeclaratorList_in_localVariableDeclaration8699);
            classFieldDeclaratorList274=classFieldDeclaratorList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_classFieldDeclaratorList.add(classFieldDeclaratorList274.getTree());

            // AST REWRITE
            // elements: classFieldDeclaratorList, type, localModifierList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 752:9: -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList )
            {
                // /home/bigben/Desktop/Java.g:752:13: ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                adaptor.addChild(root_1, stream_localModifierList.next());
                adaptor.addChild(root_1, stream_type.next());
                adaptor.addChild(root_1, stream_classFieldDeclaratorList.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 74, localVariableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end localVariableDeclaration

    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start statement
    // /home/bigben/Desktop/Java.g:756:1: statement : ( block | ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) | expression SEMI | SEMI );
    public final statement_return statement() throws RecognitionException {
        statement_return retval = new statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSERT276=null;
        Token COLON277=null;
        Token SEMI278=null;
        Token SEMI279=null;
        Token IF280=null;
        Token ELSE282=null;
        Token FOR283=null;
        Token LPAREN284=null;
        Token SEMI286=null;
        Token SEMI288=null;
        Token RPAREN290=null;
        Token IDENT294=null;
        Token COLON295=null;
        Token RPAREN297=null;
        Token WHILE299=null;
        Token DO302=null;
        Token WHILE304=null;
        Token SEMI306=null;
        Token TRY307=null;
        Token SWITCH312=null;
        Token LCURLY314=null;
        Token RCURLY316=null;
        Token SYNCHRONIZED317=null;
        Token RETURN320=null;
        Token SEMI322=null;
        Token THROW323=null;
        Token SEMI325=null;
        Token BREAK326=null;
        Token IDENT327=null;
        Token SEMI328=null;
        Token CONTINUE329=null;
        Token IDENT330=null;
        Token SEMI331=null;
        Token IDENT332=null;
        Token COLON333=null;
        Token SEMI336=null;
        Token SEMI337=null;
        expression_return expr1 = null;

        expression_return expr2 = null;

        statement_return ifStat = null;

        statement_return elseStat = null;

        block_return block275 = null;

        parenthesizedExpression_return parenthesizedExpression281 = null;

        forInit_return forInit285 = null;

        forCondition_return forCondition287 = null;

        forUpdater_return forUpdater289 = null;

        statement_return statement291 = null;

        localModifierList_return localModifierList292 = null;

        type_return type293 = null;

        expression_return expression296 = null;

        statement_return statement298 = null;

        parenthesizedExpression_return parenthesizedExpression300 = null;

        statement_return statement301 = null;

        statement_return statement303 = null;

        parenthesizedExpression_return parenthesizedExpression305 = null;

        block_return block308 = null;

        catches_return catches309 = null;

        finallyClause_return finallyClause310 = null;

        finallyClause_return finallyClause311 = null;

        parenthesizedExpression_return parenthesizedExpression313 = null;

        switchBlockLabels_return switchBlockLabels315 = null;

        parenthesizedExpression_return parenthesizedExpression318 = null;

        block_return block319 = null;

        expression_return expression321 = null;

        expression_return expression324 = null;

        statement_return statement334 = null;

        expression_return expression335 = null;


        CommonTree ASSERT276_tree=null;
        CommonTree COLON277_tree=null;
        CommonTree SEMI278_tree=null;
        CommonTree SEMI279_tree=null;
        CommonTree IF280_tree=null;
        CommonTree ELSE282_tree=null;
        CommonTree FOR283_tree=null;
        CommonTree LPAREN284_tree=null;
        CommonTree SEMI286_tree=null;
        CommonTree SEMI288_tree=null;
        CommonTree RPAREN290_tree=null;
        CommonTree IDENT294_tree=null;
        CommonTree COLON295_tree=null;
        CommonTree RPAREN297_tree=null;
        CommonTree WHILE299_tree=null;
        CommonTree DO302_tree=null;
        CommonTree WHILE304_tree=null;
        CommonTree SEMI306_tree=null;
        CommonTree TRY307_tree=null;
        CommonTree SWITCH312_tree=null;
        CommonTree LCURLY314_tree=null;
        CommonTree RCURLY316_tree=null;
        CommonTree SYNCHRONIZED317_tree=null;
        CommonTree RETURN320_tree=null;
        CommonTree SEMI322_tree=null;
        CommonTree THROW323_tree=null;
        CommonTree SEMI325_tree=null;
        CommonTree BREAK326_tree=null;
        CommonTree IDENT327_tree=null;
        CommonTree SEMI328_tree=null;
        CommonTree CONTINUE329_tree=null;
        CommonTree IDENT330_tree=null;
        CommonTree SEMI331_tree=null;
        CommonTree IDENT332_tree=null;
        CommonTree COLON333_tree=null;
        CommonTree SEMI336_tree=null;
        CommonTree SEMI337_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SYNCHRONIZED=new RewriteRuleTokenStream(adaptor,"token SYNCHRONIZED");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_CONTINUE=new RewriteRuleTokenStream(adaptor,"token CONTINUE");
        RewriteRuleTokenStream stream_SWITCH=new RewriteRuleTokenStream(adaptor,"token SWITCH");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleTokenStream stream_ELSE=new RewriteRuleTokenStream(adaptor,"token ELSE");
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_DO=new RewriteRuleTokenStream(adaptor,"token DO");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_ASSERT=new RewriteRuleTokenStream(adaptor,"token ASSERT");
        RewriteRuleTokenStream stream_BREAK=new RewriteRuleTokenStream(adaptor,"token BREAK");
        RewriteRuleTokenStream stream_THROW=new RewriteRuleTokenStream(adaptor,"token THROW");
        RewriteRuleTokenStream stream_TRY=new RewriteRuleTokenStream(adaptor,"token TRY");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_finallyClause=new RewriteRuleSubtreeStream(adaptor,"rule finallyClause");
        RewriteRuleSubtreeStream stream_catches=new RewriteRuleSubtreeStream(adaptor,"rule catches");
        RewriteRuleSubtreeStream stream_forUpdater=new RewriteRuleSubtreeStream(adaptor,"rule forUpdater");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_forCondition=new RewriteRuleSubtreeStream(adaptor,"rule forCondition");
        RewriteRuleSubtreeStream stream_localModifierList=new RewriteRuleSubtreeStream(adaptor,"rule localModifierList");
        RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_switchBlockLabels=new RewriteRuleSubtreeStream(adaptor,"rule switchBlockLabels");
        RewriteRuleSubtreeStream stream_parenthesizedExpression=new RewriteRuleSubtreeStream(adaptor,"rule parenthesizedExpression");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // /home/bigben/Desktop/Java.g:757:5: ( block | ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) | expression SEMI | SEMI )
            int alt97=16;
            switch ( input.LA(1) ) {
            case LCURLY:
                {
                alt97=1;
                }
                break;
            case ASSERT:
                {
                alt97=2;
                }
                break;
            case IF:
                {
                alt97=3;
                }
                break;
            case FOR:
                {
                alt97=4;
                }
                break;
            case WHILE:
                {
                alt97=5;
                }
                break;
            case DO:
                {
                alt97=6;
                }
                break;
            case TRY:
                {
                alt97=7;
                }
                break;
            case SWITCH:
                {
                alt97=8;
                }
                break;
            case SYNCHRONIZED:
                {
                alt97=9;
                }
                break;
            case RETURN:
                {
                alt97=10;
                }
                break;
            case THROW:
                {
                alt97=11;
                }
                break;
            case BREAK:
                {
                alt97=12;
                }
                break;
            case CONTINUE:
                {
                alt97=13;
                }
                break;
            case IDENT:
                {
                int LA97_14 = input.LA(2);

                if ( (LA97_14==COLON) ) {
                    alt97=14;
                }
                else if ( ((LA97_14>=AND && LA97_14<=ASSIGN)||(LA97_14>=BIT_SHIFT_RIGHT && LA97_14<=BIT_SHIFT_RIGHT_ASSIGN)||(LA97_14>=DEC && LA97_14<=DOT)||(LA97_14>=EQUAL && LA97_14<=LBRACK)||(LA97_14>=LESS_OR_EQUAL && LA97_14<=LOGICAL_AND)||(LA97_14>=LOGICAL_OR && LA97_14<=MOD_ASSIGN)||(LA97_14>=NOT_EQUAL && LA97_14<=QUESTION)||(LA97_14>=SEMI && LA97_14<=XOR_ASSIGN)||LA97_14==INSTANCEOF) ) {
                    alt97=15;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("756:1: statement : ( block | ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) | expression SEMI | SEMI );", 97, 14, input);

                    throw nvae;
                }
                }
                break;
            case DEC:
            case INC:
            case LESS_THAN:
            case LOGICAL_NOT:
            case LPAREN:
            case MINUS:
            case NOT:
            case PLUS:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                {
                alt97=15;
                }
                break;
            case SEMI:
                {
                alt97=16;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("756:1: statement : ( block | ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^( LABELED_STATEMENT IDENT statement ) | expression SEMI | SEMI );", 97, 0, input);

                throw nvae;
            }

            switch (alt97) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:757:9: block
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_block_in_statement8752);
                    block275=block();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, block275.getTree());

                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:758:9: ASSERT expr1= expression ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) )
                    {
                    ASSERT276=(Token)input.LT(1);
                    match(input,ASSERT,FOLLOW_ASSERT_in_statement8762); if (failed) return retval;
                    if ( backtracking==0 ) stream_ASSERT.add(ASSERT276);

                    pushFollow(FOLLOW_expression_in_statement8766);
                    expr1=expression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expression.add(expr1.getTree());
                    // /home/bigben/Desktop/Java.g:759:9: ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) )
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==COLON) ) {
                        alt89=1;
                    }
                    else if ( (LA89_0==SEMI) ) {
                        alt89=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("759:9: ( COLON expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) )", 89, 0, input);

                        throw nvae;
                    }
                    switch (alt89) {
                        case 1 :
                            // /home/bigben/Desktop/Java.g:759:13: COLON expr2= expression SEMI
                            {
                            COLON277=(Token)input.LT(1);
                            match(input,COLON,FOLLOW_COLON_in_statement8781); if (failed) return retval;
                            if ( backtracking==0 ) stream_COLON.add(COLON277);

                            pushFollow(FOLLOW_expression_in_statement8785);
                            expr2=expression();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_expression.add(expr2.getTree());
                            SEMI278=(Token)input.LT(1);
                            match(input,SEMI,FOLLOW_SEMI_in_statement8787); if (failed) return retval;
                            if ( backtracking==0 ) stream_SEMI.add(SEMI278);


                            // AST REWRITE
                            // elements: expr2, expr1, ASSERT
                            // token labels: 
                            // rule labels: retval, expr1, expr2
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_expr1=new RewriteRuleSubtreeStream(adaptor,"token expr1",expr1!=null?expr1.tree:null);
                            RewriteRuleSubtreeStream stream_expr2=new RewriteRuleSubtreeStream(adaptor,"token expr2",expr2!=null?expr2.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 759:77: -> ^( ASSERT $expr1 $expr2)
                            {
                                // /home/bigben/Desktop/Java.g:759:81: ^( ASSERT $expr1 $expr2)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_ASSERT.next(), root_1);

                                adaptor.addChild(root_1, stream_expr1.next());
                                adaptor.addChild(root_1, stream_expr2.next());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;
                        case 2 :
                            // /home/bigben/Desktop/Java.g:760:13: SEMI
                            {
                            SEMI279=(Token)input.LT(1);
                            match(input,SEMI,FOLLOW_SEMI_in_statement8850); if (failed) return retval;
                            if ( backtracking==0 ) stream_SEMI.add(SEMI279);


                            // AST REWRITE
                            // elements: ASSERT, expr1
                            // token labels: 
                            // rule labels: retval, expr1
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_expr1=new RewriteRuleSubtreeStream(adaptor,"token expr1",expr1!=null?expr1.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 760:77: -> ^( ASSERT $expr1)
                            {
                                // /home/bigben/Desktop/Java.g:760:81: ^( ASSERT $expr1)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_ASSERT.next(), root_1);

                                adaptor.addChild(root_1, stream_expr1.next());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // /home/bigben/Desktop/Java.g:762:9: IF parenthesizedExpression ifStat= statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )
                    {
                    IF280=(Token)input.LT(1);
                    match(input,IF,FOLLOW_IF_in_statement8939); if (failed) return retval;
                    if ( backtracking==0 ) stream_IF.add(IF280);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement8941);
                    parenthesizedExpression281=parenthesizedExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression281.getTree());
                    pushFollow(FOLLOW_statement_in_statement8945);
                    ifStat=statement();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_statement.add(ifStat.getTree());
                    // /home/bigben/Desktop/Java.g:763:9: ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==ELSE) ) {
                        int LA90_1 = input.LA(2);

                        if ( (synpred121()) ) {
                            alt90=1;
                        }
                        else if ( (true) ) {
                            alt90=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("763:9: ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )", 90, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA90_0==EOF||LA90_0==AT||LA90_0==DEC||LA90_0==INC||LA90_0==LCURLY||LA90_0==LESS_THAN||LA90_0==LOGICAL_NOT||(LA90_0>=LPAREN && LA90_0<=MINUS)||LA90_0==NOT||LA90_0==PLUS||LA90_0==RCURLY||LA90_0==SEMI||(LA90_0>=ABSTRACT && LA90_0<=CASE)||(LA90_0>=CHAR && LA90_0<=DOUBLE)||LA90_0==ENUM||(LA90_0>=FALSE && LA90_0<=FINAL)||(LA90_0>=FLOAT && LA90_0<=IF)||LA90_0==INTERFACE||(LA90_0>=INT && LA90_0<=NULL)||(LA90_0>=PRIVATE && LA90_0<=THROW)||(LA90_0>=TRANSIENT && LA90_0<=WHILE)||(LA90_0>=IDENT && LA90_0<=STRING_LITERAL)) ) {
                        alt90=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("763:9: ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )", 90, 0, input);

                        throw nvae;
                    }
                    switch (alt90) {
                        case 1 :
                            // /home/bigben/Desktop/Java.g:763:13: ELSE elseStat= statement
                            {
                            ELSE282=(Token)input.LT(1);
                            match(input,ELSE,FOLLOW_ELSE_in_statement8960); if (failed) return retval;
                            if ( backtracking==0 ) stream_ELSE.add(ELSE282);

                            pushFollow(FOLLOW_statement_in_statement8964);
                            elseStat=statement();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_statement.add(elseStat.getTree());

                            // AST REWRITE
                            // elements: parenthesizedExpression, elseStat, IF, ifStat
                            // token labels: 
                            // rule labels: retval, ifStat, elseStat
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_ifStat=new RewriteRuleSubtreeStream(adaptor,"token ifStat",ifStat!=null?ifStat.tree:null);
                            RewriteRuleSubtreeStream stream_elseStat=new RewriteRuleSubtreeStream(adaptor,"token elseStat",elseStat!=null?elseStat.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 763:77: -> ^( IF parenthesizedExpression $ifStat $elseStat)
                            {
                                // /home/bigben/Desktop/Java.g:763:81: ^( IF parenthesizedExpression $ifStat $elseStat)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IF.next(), root_1);

                                adaptor.addChild(root_1, stream_parenthesizedExpression.next());
                                adaptor.addChild(root_1, stream_ifStat.next());
                                adaptor.addChild(root_1, stream_elseStat.next());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;
                        case 2 :
                            // /home/bigben/Desktop/Java.g:764:77: 
                            {

                            // AST REWRITE
                            // elements: IF, ifStat, parenthesizedExpression
                            // token labels: 
                            // rule labels: retval, ifStat
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_ifStat=new RewriteRuleSubtreeStream(adaptor,"token ifStat",ifStat!=null?ifStat.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 764:77: -> ^( IF parenthesizedExpression $ifStat)
                            {
                                // /home/bigben/Desktop/Java.g:764:81: ^( IF parenthesizedExpression $ifStat)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IF.next(), root_1);

                                adaptor.addChild(root_1, stream_parenthesizedExpression.next());
                                adaptor.addChild(root_1, stream_ifStat.next());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /home/bigben/Desktop/Java.g:766:9: FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )
                    {
                    FOR283=(Token)input.LT(1);
                    match(input,FOR,FOLLOW_FOR_in_statement9130); if (failed) return retval;
                    if ( backtracking==0 ) stream_FOR.add(FOR283);

                    LPAREN284=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_statement9132); if (failed) return retval;
                    if ( backtracking==0 ) stream_LPAREN.add(LPAREN284);

                    // /home/bigben/Desktop/Java.g:767:9: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )
                    int alt91=2;
                    switch ( input.LA(1) ) {
                    case FINAL:
                        {
                        int LA91_1 = input.LA(2);

                        if ( (synpred123()) ) {
                            alt91=1;
                        }
                        else if ( (true) ) {
                            alt91=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("767:9: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )", 91, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case AT:
                        {
                        int LA91_2 = input.LA(2);

                        if ( (synpred123()) ) {
                            alt91=1;
                        }
                        else if ( (true) ) {
                            alt91=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("767:9: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )", 91, 2, input);

                            throw nvae;
                        }
                        }
                        break;
                    case BOOLEAN:
                    case BYTE:
                    case CHAR:
                    case DOUBLE:
                    case FLOAT:
                    case INT:
                    case LONG:
                    case SHORT:
                        {
                        int LA91_3 = input.LA(2);

                        if ( (synpred123()) ) {
                            alt91=1;
                        }
                        else if ( (true) ) {
                            alt91=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("767:9: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )", 91, 3, input);

                            throw nvae;
                        }
                        }
                        break;
                    case IDENT:
                        {
                        int LA91_4 = input.LA(2);

                        if ( (synpred123()) ) {
                            alt91=1;
                        }
                        else if ( (true) ) {
                            alt91=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("767:9: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )", 91, 4, input);

                            throw nvae;
                        }
                        }
                        break;
                    case DEC:
                    case INC:
                    case LESS_THAN:
                    case LOGICAL_NOT:
                    case LPAREN:
                    case MINUS:
                    case NOT:
                    case PLUS:
                    case SEMI:
                    case FALSE:
                    case NEW:
                    case NULL:
                    case SUPER:
                    case THIS:
                    case TRUE:
                    case VOID:
                    case HEX_LITERAL:
                    case OCTAL_LITERAL:
                    case DECIMAL_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case CHARACTER_LITERAL:
                    case STRING_LITERAL:
                        {
                        alt91=1;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("767:9: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )", 91, 0, input);

                        throw nvae;
                    }

                    switch (alt91) {
                        case 1 :
                            // /home/bigben/Desktop/Java.g:767:13: forInit SEMI forCondition SEMI forUpdater RPAREN statement
                            {
                            pushFollow(FOLLOW_forInit_in_statement9147);
                            forInit285=forInit();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_forInit.add(forInit285.getTree());
                            SEMI286=(Token)input.LT(1);
                            match(input,SEMI,FOLLOW_SEMI_in_statement9149); if (failed) return retval;
                            if ( backtracking==0 ) stream_SEMI.add(SEMI286);

                            pushFollow(FOLLOW_forCondition_in_statement9151);
                            forCondition287=forCondition();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_forCondition.add(forCondition287.getTree());
                            SEMI288=(Token)input.LT(1);
                            match(input,SEMI,FOLLOW_SEMI_in_statement9153); if (failed) return retval;
                            if ( backtracking==0 ) stream_SEMI.add(SEMI288);

                            pushFollow(FOLLOW_forUpdater_in_statement9155);
                            forUpdater289=forUpdater();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_forUpdater.add(forUpdater289.getTree());
                            RPAREN290=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_statement9157); if (failed) return retval;
                            if ( backtracking==0 ) stream_RPAREN.add(RPAREN290);

                            pushFollow(FOLLOW_statement_in_statement9159);
                            statement291=statement();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_statement.add(statement291.getTree());

                            // AST REWRITE
                            // elements: forInit, FOR, forCondition, forUpdater, statement
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 767:77: -> ^( FOR forInit forCondition forUpdater statement )
                            {
                                // /home/bigben/Desktop/Java.g:767:81: ^( FOR forInit forCondition forUpdater statement )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.next(), root_1);

                                adaptor.addChild(root_1, stream_forInit.next());
                                adaptor.addChild(root_1, stream_forCondition.next());
                                adaptor.addChild(root_1, stream_forUpdater.next());
                                adaptor.addChild(root_1, stream_statement.next());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;
                        case 2 :
                            // /home/bigben/Desktop/Java.g:768:13: localModifierList type IDENT COLON expression RPAREN statement
                            {
                            pushFollow(FOLLOW_localModifierList_in_statement9194);
                            localModifierList292=localModifierList();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_localModifierList.add(localModifierList292.getTree());
                            pushFollow(FOLLOW_type_in_statement9196);
                            type293=type();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_type.add(type293.getTree());
                            IDENT294=(Token)input.LT(1);
                            match(input,IDENT,FOLLOW_IDENT_in_statement9198); if (failed) return retval;
                            if ( backtracking==0 ) stream_IDENT.add(IDENT294);

                            COLON295=(Token)input.LT(1);
                            match(input,COLON,FOLLOW_COLON_in_statement9200); if (failed) return retval;
                            if ( backtracking==0 ) stream_COLON.add(COLON295);

                            pushFollow(FOLLOW_expression_in_statement9202);
                            expression296=expression();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_expression.add(expression296.getTree());
                            RPAREN297=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_statement9204); if (failed) return retval;
                            if ( backtracking==0 ) stream_RPAREN.add(RPAREN297);

                            pushFollow(FOLLOW_statement_in_statement9206);
                            statement298=statement();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_statement.add(statement298.getTree());

                            // AST REWRITE
                            // elements: type, IDENT, localModifierList, expression, statement
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 769:77: -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement )
                            {
                                // /home/bigben/Desktop/Java.g:769:81: ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(FOR_EACH, FOR283,  "FOR_EACH"), root_1);

                                adaptor.addChild(root_1, stream_localModifierList.next());
                                adaptor.addChild(root_1, stream_type.next());
                                adaptor.addChild(root_1, stream_IDENT.next());
                                adaptor.addChild(root_1, stream_expression.next());
                                adaptor.addChild(root_1, stream_statement.next());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // /home/bigben/Desktop/Java.g:771:9: WHILE parenthesizedExpression statement
                    {
                    WHILE299=(Token)input.LT(1);
                    match(input,WHILE,FOLLOW_WHILE_in_statement9321); if (failed) return retval;
                    if ( backtracking==0 ) stream_WHILE.add(WHILE299);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement9323);
                    parenthesizedExpression300=parenthesizedExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression300.getTree());
                    pushFollow(FOLLOW_statement_in_statement9325);
                    statement301=statement();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_statement.add(statement301.getTree());

                    // AST REWRITE
                    // elements: WHILE, statement, parenthesizedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 771:77: -> ^( WHILE parenthesizedExpression statement )
                    {
                        // /home/bigben/Desktop/Java.g:771:81: ^( WHILE parenthesizedExpression statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_WHILE.next(), root_1);

                        adaptor.addChild(root_1, stream_parenthesizedExpression.next());
                        adaptor.addChild(root_1, stream_statement.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 6 :
                    // /home/bigben/Desktop/Java.g:772:9: DO statement WHILE parenthesizedExpression SEMI
                    {
                    DO302=(Token)input.LT(1);
                    match(input,DO,FOLLOW_DO_in_statement9374); if (failed) return retval;
                    if ( backtracking==0 ) stream_DO.add(DO302);

                    pushFollow(FOLLOW_statement_in_statement9376);
                    statement303=statement();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_statement.add(statement303.getTree());
                    WHILE304=(Token)input.LT(1);
                    match(input,WHILE,FOLLOW_WHILE_in_statement9378); if (failed) return retval;
                    if ( backtracking==0 ) stream_WHILE.add(WHILE304);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement9380);
                    parenthesizedExpression305=parenthesizedExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression305.getTree());
                    SEMI306=(Token)input.LT(1);
                    match(input,SEMI,FOLLOW_SEMI_in_statement9382); if (failed) return retval;
                    if ( backtracking==0 ) stream_SEMI.add(SEMI306);


                    // AST REWRITE
                    // elements: parenthesizedExpression, DO, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 772:77: -> ^( DO statement parenthesizedExpression )
                    {
                        // /home/bigben/Desktop/Java.g:772:81: ^( DO statement parenthesizedExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DO.next(), root_1);

                        adaptor.addChild(root_1, stream_statement.next());
                        adaptor.addChild(root_1, stream_parenthesizedExpression.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 7 :
                    // /home/bigben/Desktop/Java.g:773:9: TRY block ( catches ( finallyClause )? | finallyClause )
                    {
                    TRY307=(Token)input.LT(1);
                    match(input,TRY,FOLLOW_TRY_in_statement9423); if (failed) return retval;
                    if ( backtracking==0 ) stream_TRY.add(TRY307);

                    pushFollow(FOLLOW_block_in_statement9425);
                    block308=block();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_block.add(block308.getTree());
                    // /home/bigben/Desktop/Java.g:773:19: ( catches ( finallyClause )? | finallyClause )
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==CATCH) ) {
                        alt93=1;
                    }
                    else if ( (LA93_0==FINALLY) ) {
                        alt93=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("773:19: ( catches ( finallyClause )? | finallyClause )", 93, 0, input);

                        throw nvae;
                    }
                    switch (alt93) {
                        case 1 :
                            // /home/bigben/Desktop/Java.g:773:20: catches ( finallyClause )?
                            {
                            pushFollow(FOLLOW_catches_in_statement9428);
                            catches309=catches();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_catches.add(catches309.getTree());
                            // /home/bigben/Desktop/Java.g:773:28: ( finallyClause )?
                            int alt92=2;
                            int LA92_0 = input.LA(1);

                            if ( (LA92_0==FINALLY) ) {
                                alt92=1;
                            }
                            switch (alt92) {
                                case 1 :
                                    // /home/bigben/Desktop/Java.g:0:0: finallyClause
                                    {
                                    pushFollow(FOLLOW_finallyClause_in_statement9430);
                                    finallyClause310=finallyClause();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_finallyClause.add(finallyClause310.getTree());

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // /home/bigben/Desktop/Java.g:773:45: finallyClause
                            {
                            pushFollow(FOLLOW_finallyClause_in_statement9435);
                            finallyClause311=finallyClause();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_finallyClause.add(finallyClause311.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: block, catches, TRY, finallyClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 773:77: -> ^( TRY block ( catches )? ( finallyClause )? )
                    {
                        // /home/bigben/Desktop/Java.g:773:81: ^( TRY block ( catches )? ( finallyClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_TRY.next(), root_1);

                        adaptor.addChild(root_1, stream_block.next());
                        // /home/bigben/Desktop/Java.g:773:93: ( catches )?
                        if ( stream_catches.hasNext() ) {
                            adaptor.addChild(root_1, stream_catches.next());

                        }
                        stream_catches.reset();
                        // /home/bigben/Desktop/Java.g:773:102: ( finallyClause )?
                        if ( stream_finallyClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_finallyClause.next());

                        }
                        stream_finallyClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 8 :
                    // /home/bigben/Desktop/Java.g:774:9: SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY
                    {
                    SWITCH312=(Token)input.LT(1);
                    match(input,SWITCH,FOLLOW_SWITCH_in_statement9478); if (failed) return retval;
                    if ( backtracking==0 ) stream_SWITCH.add(SWITCH312);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement9480);
                    parenthesizedExpression313=parenthesizedExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression313.getTree());
                    LCURLY314=(Token)input.LT(1);
                    match(input,LCURLY,FOLLOW_LCURLY_in_statement9482); if (failed) return retval;
                    if ( backtracking==0 ) stream_LCURLY.add(LCURLY314);

                    pushFollow(FOLLOW_switchBlockLabels_in_statement9484);
                    switchBlockLabels315=switchBlockLabels();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_switchBlockLabels.add(switchBlockLabels315.getTree());
                    RCURLY316=(Token)input.LT(1);
                    match(input,RCURLY,FOLLOW_RCURLY_in_statement9486); if (failed) return retval;
                    if ( backtracking==0 ) stream_RCURLY.add(RCURLY316);


                    // AST REWRITE
                    // elements: switchBlockLabels, SWITCH, parenthesizedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 774:77: -> ^( SWITCH parenthesizedExpression switchBlockLabels )
                    {
                        // /home/bigben/Desktop/Java.g:774:81: ^( SWITCH parenthesizedExpression switchBlockLabels )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_SWITCH.next(), root_1);

                        adaptor.addChild(root_1, stream_parenthesizedExpression.next());
                        adaptor.addChild(root_1, stream_switchBlockLabels.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 9 :
                    // /home/bigben/Desktop/Java.g:775:9: SYNCHRONIZED parenthesizedExpression block
                    {
                    SYNCHRONIZED317=(Token)input.LT(1);
                    match(input,SYNCHRONIZED,FOLLOW_SYNCHRONIZED_in_statement9512); if (failed) return retval;
                    if ( backtracking==0 ) stream_SYNCHRONIZED.add(SYNCHRONIZED317);

                    pushFollow(FOLLOW_parenthesizedExpression_in_statement9514);
                    parenthesizedExpression318=parenthesizedExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_parenthesizedExpression.add(parenthesizedExpression318.getTree());
                    pushFollow(FOLLOW_block_in_statement9516);
                    block319=block();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_block.add(block319.getTree());

                    // AST REWRITE
                    // elements: block, SYNCHRONIZED, parenthesizedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 775:77: -> ^( SYNCHRONIZED parenthesizedExpression block )
                    {
                        // /home/bigben/Desktop/Java.g:775:81: ^( SYNCHRONIZED parenthesizedExpression block )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_SYNCHRONIZED.next(), root_1);

                        adaptor.addChild(root_1, stream_parenthesizedExpression.next());
                        adaptor.addChild(root_1, stream_block.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 10 :
                    // /home/bigben/Desktop/Java.g:776:9: RETURN ( expression )? SEMI
                    {
                    RETURN320=(Token)input.LT(1);
                    match(input,RETURN,FOLLOW_RETURN_in_statement9562); if (failed) return retval;
                    if ( backtracking==0 ) stream_RETURN.add(RETURN320);

                    // /home/bigben/Desktop/Java.g:776:16: ( expression )?
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==DEC||LA94_0==INC||LA94_0==LESS_THAN||LA94_0==LOGICAL_NOT||(LA94_0>=LPAREN && LA94_0<=MINUS)||LA94_0==NOT||LA94_0==PLUS||LA94_0==BOOLEAN||LA94_0==BYTE||LA94_0==CHAR||LA94_0==DOUBLE||LA94_0==FALSE||LA94_0==FLOAT||(LA94_0>=INT && LA94_0<=LONG)||(LA94_0>=NEW && LA94_0<=NULL)||LA94_0==SHORT||LA94_0==SUPER||LA94_0==THIS||LA94_0==TRUE||LA94_0==VOID||(LA94_0>=IDENT && LA94_0<=STRING_LITERAL)) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // /home/bigben/Desktop/Java.g:0:0: expression
                            {
                            pushFollow(FOLLOW_expression_in_statement9564);
                            expression321=expression();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_expression.add(expression321.getTree());

                            }
                            break;

                    }

                    SEMI322=(Token)input.LT(1);
                    match(input,SEMI,FOLLOW_SEMI_in_statement9567); if (failed) return retval;
                    if ( backtracking==0 ) stream_SEMI.add(SEMI322);


                    // AST REWRITE
                    // elements: expression, RETURN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 776:77: -> ^( RETURN ( expression )? )
                    {
                        // /home/bigben/Desktop/Java.g:776:81: ^( RETURN ( expression )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_RETURN.next(), root_1);

                        // /home/bigben/Desktop/Java.g:776:90: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.next());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 11 :
                    // /home/bigben/Desktop/Java.g:777:9: THROW expression SEMI
                    {
                    THROW323=(Token)input.LT(1);
                    match(input,THROW,FOLLOW_THROW_in_statement9631); if (failed) return retval;
                    if ( backtracking==0 ) stream_THROW.add(THROW323);

                    pushFollow(FOLLOW_expression_in_statement9633);
                    expression324=expression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expression.add(expression324.getTree());
                    SEMI325=(Token)input.LT(1);
                    match(input,SEMI,FOLLOW_SEMI_in_statement9635); if (failed) return retval;
                    if ( backtracking==0 ) stream_SEMI.add(SEMI325);


                    // AST REWRITE
                    // elements: THROW, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 777:77: -> ^( THROW expression )
                    {
                        // /home/bigben/Desktop/Java.g:777:81: ^( THROW expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_THROW.next(), root_1);

                        adaptor.addChild(root_1, stream_expression.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 12 :
                    // /home/bigben/Desktop/Java.g:778:9: BREAK ( IDENT )? SEMI
                    {
                    BREAK326=(Token)input.LT(1);
                    match(input,BREAK,FOLLOW_BREAK_in_statement9700); if (failed) return retval;
                    if ( backtracking==0 ) stream_BREAK.add(BREAK326);

                    // /home/bigben/Desktop/Java.g:778:15: ( IDENT )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==IDENT) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            // /home/bigben/Desktop/Java.g:0:0: IDENT
                            {
                            IDENT327=(Token)input.LT(1);
                            match(input,IDENT,FOLLOW_IDENT_in_statement9702); if (failed) return retval;
                            if ( backtracking==0 ) stream_IDENT.add(IDENT327);


                            }
                            break;

                    }

                    SEMI328=(Token)input.LT(1);
                    match(input,SEMI,FOLLOW_SEMI_in_statement9705); if (failed) return retval;
                    if ( backtracking==0 ) stream_SEMI.add(SEMI328);


                    // AST REWRITE
                    // elements: BREAK, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 778:77: -> ^( BREAK ( IDENT )? )
                    {
                        // /home/bigben/Desktop/Java.g:778:81: ^( BREAK ( IDENT )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_BREAK.next(), root_1);

                        // /home/bigben/Desktop/Java.g:778:89: ( IDENT )?
                        if ( stream_IDENT.hasNext() ) {
                            adaptor.addChild(root_1, stream_IDENT.next());

                        }
                        stream_IDENT.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 13 :
                    // /home/bigben/Desktop/Java.g:779:9: CONTINUE ( IDENT )? SEMI
                    {
                    CONTINUE329=(Token)input.LT(1);
                    match(input,CONTINUE,FOLLOW_CONTINUE_in_statement9775); if (failed) return retval;
                    if ( backtracking==0 ) stream_CONTINUE.add(CONTINUE329);

                    // /home/bigben/Desktop/Java.g:779:18: ( IDENT )?
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==IDENT) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            // /home/bigben/Desktop/Java.g:0:0: IDENT
                            {
                            IDENT330=(Token)input.LT(1);
                            match(input,IDENT,FOLLOW_IDENT_in_statement9777); if (failed) return retval;
                            if ( backtracking==0 ) stream_IDENT.add(IDENT330);


                            }
                            break;

                    }

                    SEMI331=(Token)input.LT(1);
                    match(input,SEMI,FOLLOW_SEMI_in_statement9780); if (failed) return retval;
                    if ( backtracking==0 ) stream_SEMI.add(SEMI331);


                    // AST REWRITE
                    // elements: IDENT, CONTINUE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 779:77: -> ^( CONTINUE ( IDENT )? )
                    {
                        // /home/bigben/Desktop/Java.g:779:81: ^( CONTINUE ( IDENT )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CONTINUE.next(), root_1);

                        // /home/bigben/Desktop/Java.g:779:92: ( IDENT )?
                        if ( stream_IDENT.hasNext() ) {
                            adaptor.addChild(root_1, stream_IDENT.next());

                        }
                        stream_IDENT.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 14 :
                    // /home/bigben/Desktop/Java.g:780:9: IDENT COLON statement
                    {
                    IDENT332=(Token)input.LT(1);
                    match(input,IDENT,FOLLOW_IDENT_in_statement9847); if (failed) return retval;
                    if ( backtracking==0 ) stream_IDENT.add(IDENT332);

                    COLON333=(Token)input.LT(1);
                    match(input,COLON,FOLLOW_COLON_in_statement9849); if (failed) return retval;
                    if ( backtracking==0 ) stream_COLON.add(COLON333);

                    pushFollow(FOLLOW_statement_in_statement9851);
                    statement334=statement();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_statement.add(statement334.getTree());

                    // AST REWRITE
                    // elements: statement, IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 780:77: -> ^( LABELED_STATEMENT IDENT statement )
                    {
                        // /home/bigben/Desktop/Java.g:780:81: ^( LABELED_STATEMENT IDENT statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(LABELED_STATEMENT, "LABELED_STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_IDENT.next());
                        adaptor.addChild(root_1, stream_statement.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 15 :
                    // /home/bigben/Desktop/Java.g:781:9: expression SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_statement9918);
                    expression335=expression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expression335.getTree());
                    SEMI336=(Token)input.LT(1);
                    match(input,SEMI,FOLLOW_SEMI_in_statement9920); if (failed) return retval;
                    if ( backtracking==0 ) {
                    SEMI336_tree = (CommonTree)adaptor.create(SEMI336);
                    adaptor.addChild(root_0, SEMI336_tree);
                    }

                    }
                    break;
                case 16 :
                    // /home/bigben/Desktop/Java.g:782:9: SEMI
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI337=(Token)input.LT(1);
                    match(input,SEMI,FOLLOW_SEMI_in_statement9930); if (failed) return retval;
                    if ( backtracking==0 ) {
                    SEMI337_tree = (CommonTree)adaptor.create(SEMI337);
                    adaptor.addChild(root_0, SEMI337_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 75, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end statement

    public static class catches_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start catches
    // /home/bigben/Desktop/Java.g:785:1: catches : ( catchClause )+ -> ^( CATCH_CLAUSE_LIST ( catchClause )+ ) ;
    public final catches_return catches() throws RecognitionException {
        catches_return retval = new catches_return();
        retval.start = input.LT(1);
        int catches_StartIndex = input.index();
        CommonTree root_0 = null;

        catchClause_return catchClause338 = null;


        RewriteRuleSubtreeStream stream_catchClause=new RewriteRuleSubtreeStream(adaptor,"rule catchClause");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // /home/bigben/Desktop/Java.g:786:5: ( ( catchClause )+ -> ^( CATCH_CLAUSE_LIST ( catchClause )+ ) )
            // /home/bigben/Desktop/Java.g:786:9: ( catchClause )+
            {
            // /home/bigben/Desktop/Java.g:786:9: ( catchClause )+
            int cnt98=0;
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==CATCH) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:0:0: catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches9969);
            	    catchClause338=catchClause();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_catchClause.add(catchClause338.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt98 >= 1 ) break loop98;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(98, input);
                        throw eee;
                }
                cnt98++;
            } while (true);


            // AST REWRITE
            // elements: catchClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 787:9: -> ^( CATCH_CLAUSE_LIST ( catchClause )+ )
            {
                // /home/bigben/Desktop/Java.g:787:13: ^( CATCH_CLAUSE_LIST ( catchClause )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(CATCH_CLAUSE_LIST, "CATCH_CLAUSE_LIST"), root_1);

                if ( !(stream_catchClause.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_catchClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_catchClause.next());

                }
                stream_catchClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 76, catches_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end catches

    public static class catchClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start catchClause
    // /home/bigben/Desktop/Java.g:790:1: catchClause : CATCH LPAREN formalParameterStandardDecl RPAREN block ;
    public final catchClause_return catchClause() throws RecognitionException {
        catchClause_return retval = new catchClause_return();
        retval.start = input.LT(1);
        int catchClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CATCH339=null;
        Token LPAREN340=null;
        Token RPAREN342=null;
        formalParameterStandardDecl_return formalParameterStandardDecl341 = null;

        block_return block343 = null;


        CommonTree CATCH339_tree=null;
        CommonTree LPAREN340_tree=null;
        CommonTree RPAREN342_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // /home/bigben/Desktop/Java.g:791:5: ( CATCH LPAREN formalParameterStandardDecl RPAREN block )
            // /home/bigben/Desktop/Java.g:791:9: CATCH LPAREN formalParameterStandardDecl RPAREN block
            {
            root_0 = (CommonTree)adaptor.nil();

            CATCH339=(Token)input.LT(1);
            match(input,CATCH,FOLLOW_CATCH_in_catchClause10011); if (failed) return retval;
            if ( backtracking==0 ) {
            CATCH339_tree = (CommonTree)adaptor.create(CATCH339);
            root_0 = (CommonTree)adaptor.becomeRoot(CATCH339_tree, root_0);
            }
            LPAREN340=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_catchClause10014); if (failed) return retval;
            if ( backtracking==0 ) {
            LPAREN340_tree = (CommonTree)adaptor.create(LPAREN340);
            adaptor.addChild(root_0, LPAREN340_tree);
            }
            pushFollow(FOLLOW_formalParameterStandardDecl_in_catchClause10016);
            formalParameterStandardDecl341=formalParameterStandardDecl();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, formalParameterStandardDecl341.getTree());
            RPAREN342=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_catchClause10018); if (failed) return retval;
            if ( backtracking==0 ) {
            RPAREN342_tree = (CommonTree)adaptor.create(RPAREN342);
            adaptor.addChild(root_0, RPAREN342_tree);
            }
            pushFollow(FOLLOW_block_in_catchClause10020);
            block343=block();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, block343.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 77, catchClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end catchClause

    public static class finallyClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start finallyClause
    // /home/bigben/Desktop/Java.g:794:1: finallyClause : FINALLY block -> block ;
    public final finallyClause_return finallyClause() throws RecognitionException {
        finallyClause_return retval = new finallyClause_return();
        retval.start = input.LT(1);
        int finallyClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FINALLY344=null;
        block_return block345 = null;


        CommonTree FINALLY344_tree=null;
        RewriteRuleTokenStream stream_FINALLY=new RewriteRuleTokenStream(adaptor,"token FINALLY");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // /home/bigben/Desktop/Java.g:795:5: ( FINALLY block -> block )
            // /home/bigben/Desktop/Java.g:795:9: FINALLY block
            {
            FINALLY344=(Token)input.LT(1);
            match(input,FINALLY,FOLLOW_FINALLY_in_finallyClause10039); if (failed) return retval;
            if ( backtracking==0 ) stream_FINALLY.add(FINALLY344);

            pushFollow(FOLLOW_block_in_finallyClause10041);
            block345=block();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_block.add(block345.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 796:9: -> block
            {
                adaptor.addChild(root_0, stream_block.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 78, finallyClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end finallyClause

    public static class switchBlockLabels_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start switchBlockLabels
    // /home/bigben/Desktop/Java.g:799:1: switchBlockLabels : switchCaseLabels ( switchDefaultLabel )? switchCaseLabels -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels ) ;
    public final switchBlockLabels_return switchBlockLabels() throws RecognitionException {
        switchBlockLabels_return retval = new switchBlockLabels_return();
        retval.start = input.LT(1);
        int switchBlockLabels_StartIndex = input.index();
        CommonTree root_0 = null;

        switchCaseLabels_return switchCaseLabels346 = null;

        switchDefaultLabel_return switchDefaultLabel347 = null;

        switchCaseLabels_return switchCaseLabels348 = null;


        RewriteRuleSubtreeStream stream_switchDefaultLabel=new RewriteRuleSubtreeStream(adaptor,"rule switchDefaultLabel");
        RewriteRuleSubtreeStream stream_switchCaseLabels=new RewriteRuleSubtreeStream(adaptor,"rule switchCaseLabels");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // /home/bigben/Desktop/Java.g:800:5: ( switchCaseLabels ( switchDefaultLabel )? switchCaseLabels -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels ) )
            // /home/bigben/Desktop/Java.g:800:9: switchCaseLabels ( switchDefaultLabel )? switchCaseLabels
            {
            pushFollow(FOLLOW_switchCaseLabels_in_switchBlockLabels10073);
            switchCaseLabels346=switchCaseLabels();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_switchCaseLabels.add(switchCaseLabels346.getTree());
            // /home/bigben/Desktop/Java.g:800:26: ( switchDefaultLabel )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==DEFAULT) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: switchDefaultLabel
                    {
                    pushFollow(FOLLOW_switchDefaultLabel_in_switchBlockLabels10075);
                    switchDefaultLabel347=switchDefaultLabel();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_switchDefaultLabel.add(switchDefaultLabel347.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_switchCaseLabels_in_switchBlockLabels10078);
            switchCaseLabels348=switchCaseLabels();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_switchCaseLabels.add(switchCaseLabels348.getTree());

            // AST REWRITE
            // elements: switchCaseLabels, switchCaseLabels, switchDefaultLabel
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 801:9: -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels )
            {
                // /home/bigben/Desktop/Java.g:801:13: ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(SWITCH_BLOCK_LABEL_LIST, "SWITCH_BLOCK_LABEL_LIST"), root_1);

                adaptor.addChild(root_1, stream_switchCaseLabels.next());
                // /home/bigben/Desktop/Java.g:801:56: ( switchDefaultLabel )?
                if ( stream_switchDefaultLabel.hasNext() ) {
                    adaptor.addChild(root_1, stream_switchDefaultLabel.next());

                }
                stream_switchDefaultLabel.reset();
                adaptor.addChild(root_1, stream_switchCaseLabels.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 79, switchBlockLabels_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end switchBlockLabels

    public static class switchCaseLabels_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start switchCaseLabels
    // /home/bigben/Desktop/Java.g:804:1: switchCaseLabels : ( switchCaseLabel )* ;
    public final switchCaseLabels_return switchCaseLabels() throws RecognitionException {
        switchCaseLabels_return retval = new switchCaseLabels_return();
        retval.start = input.LT(1);
        int switchCaseLabels_StartIndex = input.index();
        CommonTree root_0 = null;

        switchCaseLabel_return switchCaseLabel349 = null;



        try {
            if ( backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // /home/bigben/Desktop/Java.g:805:5: ( ( switchCaseLabel )* )
            // /home/bigben/Desktop/Java.g:805:9: ( switchCaseLabel )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // /home/bigben/Desktop/Java.g:805:9: ( switchCaseLabel )*
            loop100:
            do {
                int alt100=2;
                int LA100_0 = input.LA(1);

                if ( (LA100_0==CASE) ) {
                    int LA100_2 = input.LA(2);

                    if ( (synpred143()) ) {
                        alt100=1;
                    }


                }


                switch (alt100) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:0:0: switchCaseLabel
            	    {
            	    pushFollow(FOLLOW_switchCaseLabel_in_switchCaseLabels10123);
            	    switchCaseLabel349=switchCaseLabel();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, switchCaseLabel349.getTree());

            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 80, switchCaseLabels_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end switchCaseLabels

    public static class switchCaseLabel_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start switchCaseLabel
    // /home/bigben/Desktop/Java.g:808:1: switchCaseLabel : CASE expression COLON ( blockStatement )* ;
    public final switchCaseLabel_return switchCaseLabel() throws RecognitionException {
        switchCaseLabel_return retval = new switchCaseLabel_return();
        retval.start = input.LT(1);
        int switchCaseLabel_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CASE350=null;
        Token COLON352=null;
        expression_return expression351 = null;

        blockStatement_return blockStatement353 = null;


        CommonTree CASE350_tree=null;
        CommonTree COLON352_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // /home/bigben/Desktop/Java.g:809:5: ( CASE expression COLON ( blockStatement )* )
            // /home/bigben/Desktop/Java.g:809:9: CASE expression COLON ( blockStatement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            CASE350=(Token)input.LT(1);
            match(input,CASE,FOLLOW_CASE_in_switchCaseLabel10151); if (failed) return retval;
            if ( backtracking==0 ) {
            CASE350_tree = (CommonTree)adaptor.create(CASE350);
            root_0 = (CommonTree)adaptor.becomeRoot(CASE350_tree, root_0);
            }
            pushFollow(FOLLOW_expression_in_switchCaseLabel10154);
            expression351=expression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expression351.getTree());
            COLON352=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_switchCaseLabel10156); if (failed) return retval;
            if ( backtracking==0 ) {
            COLON352_tree = (CommonTree)adaptor.create(COLON352);
            adaptor.addChild(root_0, COLON352_tree);
            }
            // /home/bigben/Desktop/Java.g:809:32: ( blockStatement )*
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==AT||LA101_0==DEC||LA101_0==INC||LA101_0==LCURLY||LA101_0==LESS_THAN||LA101_0==LOGICAL_NOT||(LA101_0>=LPAREN && LA101_0<=MINUS)||LA101_0==NOT||LA101_0==PLUS||LA101_0==SEMI||(LA101_0>=ABSTRACT && LA101_0<=BYTE)||(LA101_0>=CHAR && LA101_0<=CONTINUE)||(LA101_0>=DO && LA101_0<=DOUBLE)||LA101_0==ENUM||(LA101_0>=FALSE && LA101_0<=FINAL)||(LA101_0>=FLOAT && LA101_0<=IF)||LA101_0==INTERFACE||(LA101_0>=INT && LA101_0<=NULL)||(LA101_0>=PRIVATE && LA101_0<=THROW)||(LA101_0>=TRANSIENT && LA101_0<=WHILE)||(LA101_0>=IDENT && LA101_0<=STRING_LITERAL)) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchCaseLabel10158);
            	    blockStatement353=blockStatement();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, blockStatement353.getTree());

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 81, switchCaseLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end switchCaseLabel

    public static class switchDefaultLabel_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start switchDefaultLabel
    // /home/bigben/Desktop/Java.g:812:1: switchDefaultLabel : DEFAULT COLON ( blockStatement )* ;
    public final switchDefaultLabel_return switchDefaultLabel() throws RecognitionException {
        switchDefaultLabel_return retval = new switchDefaultLabel_return();
        retval.start = input.LT(1);
        int switchDefaultLabel_StartIndex = input.index();
        CommonTree root_0 = null;

        Token DEFAULT354=null;
        Token COLON355=null;
        blockStatement_return blockStatement356 = null;


        CommonTree DEFAULT354_tree=null;
        CommonTree COLON355_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // /home/bigben/Desktop/Java.g:813:5: ( DEFAULT COLON ( blockStatement )* )
            // /home/bigben/Desktop/Java.g:813:9: DEFAULT COLON ( blockStatement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            DEFAULT354=(Token)input.LT(1);
            match(input,DEFAULT,FOLLOW_DEFAULT_in_switchDefaultLabel10182); if (failed) return retval;
            if ( backtracking==0 ) {
            DEFAULT354_tree = (CommonTree)adaptor.create(DEFAULT354);
            root_0 = (CommonTree)adaptor.becomeRoot(DEFAULT354_tree, root_0);
            }
            COLON355=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_switchDefaultLabel10185); if (failed) return retval;
            if ( backtracking==0 ) {
            COLON355_tree = (CommonTree)adaptor.create(COLON355);
            adaptor.addChild(root_0, COLON355_tree);
            }
            // /home/bigben/Desktop/Java.g:813:24: ( blockStatement )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==AT||LA102_0==DEC||LA102_0==INC||LA102_0==LCURLY||LA102_0==LESS_THAN||LA102_0==LOGICAL_NOT||(LA102_0>=LPAREN && LA102_0<=MINUS)||LA102_0==NOT||LA102_0==PLUS||LA102_0==SEMI||(LA102_0>=ABSTRACT && LA102_0<=BYTE)||(LA102_0>=CHAR && LA102_0<=CONTINUE)||(LA102_0>=DO && LA102_0<=DOUBLE)||LA102_0==ENUM||(LA102_0>=FALSE && LA102_0<=FINAL)||(LA102_0>=FLOAT && LA102_0<=IF)||LA102_0==INTERFACE||(LA102_0>=INT && LA102_0<=NULL)||(LA102_0>=PRIVATE && LA102_0<=THROW)||(LA102_0>=TRANSIENT && LA102_0<=WHILE)||(LA102_0>=IDENT && LA102_0<=STRING_LITERAL)) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchDefaultLabel10187);
            	    blockStatement356=blockStatement();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, blockStatement356.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 82, switchDefaultLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end switchDefaultLabel

    public static class forInit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forInit
    // /home/bigben/Desktop/Java.g:816:1: forInit : ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) );
    public final forInit_return forInit() throws RecognitionException {
        forInit_return retval = new forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.index();
        CommonTree root_0 = null;

        localVariableDeclaration_return localVariableDeclaration357 = null;

        expressionList_return expressionList358 = null;


        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_localVariableDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule localVariableDeclaration");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // /home/bigben/Desktop/Java.g:817:5: ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) )
            int alt103=3;
            switch ( input.LA(1) ) {
            case AT:
            case FINAL:
                {
                alt103=1;
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                int LA103_3 = input.LA(2);

                if ( (synpred146()) ) {
                    alt103=1;
                }
                else if ( (synpred147()) ) {
                    alt103=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("816:1: forInit : ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) );", 103, 3, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                int LA103_4 = input.LA(2);

                if ( (synpred146()) ) {
                    alt103=1;
                }
                else if ( (synpred147()) ) {
                    alt103=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("816:1: forInit : ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) );", 103, 4, input);

                    throw nvae;
                }
                }
                break;
            case DEC:
            case INC:
            case LESS_THAN:
            case LOGICAL_NOT:
            case LPAREN:
            case MINUS:
            case NOT:
            case PLUS:
            case FALSE:
            case NEW:
            case NULL:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                {
                alt103=2;
                }
                break;
            case SEMI:
                {
                alt103=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("816:1: forInit : ( localVariableDeclaration -> ^( FOR_INIT localVariableDeclaration ) | expressionList -> ^( FOR_INIT expressionList ) | -> ^( FOR_INIT ) );", 103, 0, input);

                throw nvae;
            }

            switch (alt103) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:817:9: localVariableDeclaration
                    {
                    pushFollow(FOLLOW_localVariableDeclaration_in_forInit10211);
                    localVariableDeclaration357=localVariableDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_localVariableDeclaration.add(localVariableDeclaration357.getTree());

                    // AST REWRITE
                    // elements: localVariableDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 817:37: -> ^( FOR_INIT localVariableDeclaration )
                    {
                        // /home/bigben/Desktop/Java.g:817:41: ^( FOR_INIT localVariableDeclaration )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(FOR_INIT, "FOR_INIT"), root_1);

                        adaptor.addChild(root_1, stream_localVariableDeclaration.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:818:9: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_forInit10233);
                    expressionList358=expressionList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expressionList.add(expressionList358.getTree());

                    // AST REWRITE
                    // elements: expressionList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 818:37: -> ^( FOR_INIT expressionList )
                    {
                        // /home/bigben/Desktop/Java.g:818:41: ^( FOR_INIT expressionList )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(FOR_INIT, "FOR_INIT"), root_1);

                        adaptor.addChild(root_1, stream_expressionList.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 3 :
                    // /home/bigben/Desktop/Java.g:819:37: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 819:37: -> ^( FOR_INIT )
                    {
                        // /home/bigben/Desktop/Java.g:819:41: ^( FOR_INIT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(FOR_INIT, "FOR_INIT"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 83, forInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end forInit

    public static class forCondition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forCondition
    // /home/bigben/Desktop/Java.g:822:1: forCondition : ( expression )? -> ^( FOR_CONDITION ( expression )? ) ;
    public final forCondition_return forCondition() throws RecognitionException {
        forCondition_return retval = new forCondition_return();
        retval.start = input.LT(1);
        int forCondition_StartIndex = input.index();
        CommonTree root_0 = null;

        expression_return expression359 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // /home/bigben/Desktop/Java.g:823:5: ( ( expression )? -> ^( FOR_CONDITION ( expression )? ) )
            // /home/bigben/Desktop/Java.g:823:9: ( expression )?
            {
            // /home/bigben/Desktop/Java.g:823:9: ( expression )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==DEC||LA104_0==INC||LA104_0==LESS_THAN||LA104_0==LOGICAL_NOT||(LA104_0>=LPAREN && LA104_0<=MINUS)||LA104_0==NOT||LA104_0==PLUS||LA104_0==BOOLEAN||LA104_0==BYTE||LA104_0==CHAR||LA104_0==DOUBLE||LA104_0==FALSE||LA104_0==FLOAT||(LA104_0>=INT && LA104_0<=LONG)||(LA104_0>=NEW && LA104_0<=NULL)||LA104_0==SHORT||LA104_0==SUPER||LA104_0==THIS||LA104_0==TRUE||LA104_0==VOID||(LA104_0>=IDENT && LA104_0<=STRING_LITERAL)) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: expression
                    {
                    pushFollow(FOLLOW_expression_in_forCondition10321);
                    expression359=expression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expression.add(expression359.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 824:9: -> ^( FOR_CONDITION ( expression )? )
            {
                // /home/bigben/Desktop/Java.g:824:13: ^( FOR_CONDITION ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(FOR_CONDITION, "FOR_CONDITION"), root_1);

                // /home/bigben/Desktop/Java.g:824:29: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.next());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 84, forCondition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end forCondition

    public static class forUpdater_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forUpdater
    // /home/bigben/Desktop/Java.g:827:1: forUpdater : ( expressionList )? -> ^( FOR_UPDATE ( expressionList )? ) ;
    public final forUpdater_return forUpdater() throws RecognitionException {
        forUpdater_return retval = new forUpdater_return();
        retval.start = input.LT(1);
        int forUpdater_StartIndex = input.index();
        CommonTree root_0 = null;

        expressionList_return expressionList360 = null;


        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // /home/bigben/Desktop/Java.g:828:5: ( ( expressionList )? -> ^( FOR_UPDATE ( expressionList )? ) )
            // /home/bigben/Desktop/Java.g:828:9: ( expressionList )?
            {
            // /home/bigben/Desktop/Java.g:828:9: ( expressionList )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==DEC||LA105_0==INC||LA105_0==LESS_THAN||LA105_0==LOGICAL_NOT||(LA105_0>=LPAREN && LA105_0<=MINUS)||LA105_0==NOT||LA105_0==PLUS||LA105_0==BOOLEAN||LA105_0==BYTE||LA105_0==CHAR||LA105_0==DOUBLE||LA105_0==FALSE||LA105_0==FLOAT||(LA105_0>=INT && LA105_0<=LONG)||(LA105_0>=NEW && LA105_0<=NULL)||LA105_0==SHORT||LA105_0==SUPER||LA105_0==THIS||LA105_0==TRUE||LA105_0==VOID||(LA105_0>=IDENT && LA105_0<=STRING_LITERAL)) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_forUpdater10363);
                    expressionList360=expressionList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expressionList.add(expressionList360.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: expressionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 829:9: -> ^( FOR_UPDATE ( expressionList )? )
            {
                // /home/bigben/Desktop/Java.g:829:13: ^( FOR_UPDATE ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(FOR_UPDATE, "FOR_UPDATE"), root_1);

                // /home/bigben/Desktop/Java.g:829:26: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.next());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 85, forUpdater_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end forUpdater

    public static class parenthesizedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start parenthesizedExpression
    // /home/bigben/Desktop/Java.g:834:1: parenthesizedExpression : LPAREN expression RPAREN -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression ) ;
    public final parenthesizedExpression_return parenthesizedExpression() throws RecognitionException {
        parenthesizedExpression_return retval = new parenthesizedExpression_return();
        retval.start = input.LT(1);
        int parenthesizedExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN361=null;
        Token RPAREN363=null;
        expression_return expression362 = null;


        CommonTree LPAREN361_tree=null;
        CommonTree RPAREN363_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // /home/bigben/Desktop/Java.g:835:5: ( LPAREN expression RPAREN -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression ) )
            // /home/bigben/Desktop/Java.g:835:9: LPAREN expression RPAREN
            {
            LPAREN361=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_parenthesizedExpression10403); if (failed) return retval;
            if ( backtracking==0 ) stream_LPAREN.add(LPAREN361);

            pushFollow(FOLLOW_expression_in_parenthesizedExpression10405);
            expression362=expression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_expression.add(expression362.getTree());
            RPAREN363=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_parenthesizedExpression10407); if (failed) return retval;
            if ( backtracking==0 ) stream_RPAREN.add(RPAREN363);


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 836:9: -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression )
            {
                // /home/bigben/Desktop/Java.g:836:13: ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(PARENTESIZED_EXPR, LPAREN361,  "PARENTESIZED_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 86, parenthesizedExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end parenthesizedExpression

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start expressionList
    // /home/bigben/Desktop/Java.g:839:1: expressionList : expression ( COMMA expression )* ;
    public final expressionList_return expressionList() throws RecognitionException {
        expressionList_return retval = new expressionList_return();
        retval.start = input.LT(1);
        int expressionList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA365=null;
        expression_return expression364 = null;

        expression_return expression366 = null;


        CommonTree COMMA365_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // /home/bigben/Desktop/Java.g:840:5: ( expression ( COMMA expression )* )
            // /home/bigben/Desktop/Java.g:840:9: expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList10448);
            expression364=expression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expression364.getTree());
            // /home/bigben/Desktop/Java.g:840:20: ( COMMA expression )*
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);

                if ( (LA106_0==COMMA) ) {
                    alt106=1;
                }


                switch (alt106) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:840:21: COMMA expression
            	    {
            	    COMMA365=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_expressionList10451); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    COMMA365_tree = (CommonTree)adaptor.create(COMMA365);
            	    adaptor.addChild(root_0, COMMA365_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_expressionList10453);
            	    expression366=expression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, expression366.getTree());

            	    }
            	    break;

            	default :
            	    break loop106;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 87, expressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end expressionList

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start expression
    // /home/bigben/Desktop/Java.g:843:1: expression : assignmentExpression -> ^( EXPR assignmentExpression ) ;
    public final expression_return expression() throws RecognitionException {
        expression_return retval = new expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        CommonTree root_0 = null;

        assignmentExpression_return assignmentExpression367 = null;


        RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // /home/bigben/Desktop/Java.g:844:5: ( assignmentExpression -> ^( EXPR assignmentExpression ) )
            // /home/bigben/Desktop/Java.g:844:9: assignmentExpression
            {
            pushFollow(FOLLOW_assignmentExpression_in_expression10474);
            assignmentExpression367=assignmentExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_assignmentExpression.add(assignmentExpression367.getTree());

            // AST REWRITE
            // elements: assignmentExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 845:9: -> ^( EXPR assignmentExpression )
            {
                // /home/bigben/Desktop/Java.g:845:13: ^( EXPR assignmentExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(EXPR, "EXPR"), root_1);

                adaptor.addChild(root_1, stream_assignmentExpression.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 88, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end expression

    public static class assignmentExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start assignmentExpression
    // /home/bigben/Desktop/Java.g:848:1: assignmentExpression : conditionalExpression ( ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression )? ;
    public final assignmentExpression_return assignmentExpression() throws RecognitionException {
        assignmentExpression_return retval = new assignmentExpression_return();
        retval.start = input.LT(1);
        int assignmentExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSIGN369=null;
        Token PLUS_ASSIGN370=null;
        Token MINUS_ASSIGN371=null;
        Token STAR_ASSIGN372=null;
        Token DIV_ASSIGN373=null;
        Token AND_ASSIGN374=null;
        Token OR_ASSIGN375=null;
        Token XOR_ASSIGN376=null;
        Token MOD_ASSIGN377=null;
        Token SHIFT_LEFT_ASSIGN378=null;
        Token SHIFT_RIGHT_ASSIGN379=null;
        Token BIT_SHIFT_RIGHT_ASSIGN380=null;
        conditionalExpression_return conditionalExpression368 = null;

        assignmentExpression_return assignmentExpression381 = null;


        CommonTree ASSIGN369_tree=null;
        CommonTree PLUS_ASSIGN370_tree=null;
        CommonTree MINUS_ASSIGN371_tree=null;
        CommonTree STAR_ASSIGN372_tree=null;
        CommonTree DIV_ASSIGN373_tree=null;
        CommonTree AND_ASSIGN374_tree=null;
        CommonTree OR_ASSIGN375_tree=null;
        CommonTree XOR_ASSIGN376_tree=null;
        CommonTree MOD_ASSIGN377_tree=null;
        CommonTree SHIFT_LEFT_ASSIGN378_tree=null;
        CommonTree SHIFT_RIGHT_ASSIGN379_tree=null;
        CommonTree BIT_SHIFT_RIGHT_ASSIGN380_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // /home/bigben/Desktop/Java.g:849:5: ( conditionalExpression ( ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression )? )
            // /home/bigben/Desktop/Java.g:849:9: conditionalExpression ( ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_conditionalExpression_in_assignmentExpression10510);
            conditionalExpression368=conditionalExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, conditionalExpression368.getTree());
            // /home/bigben/Desktop/Java.g:850:9: ( ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( ((LA108_0>=AND_ASSIGN && LA108_0<=ASSIGN)||LA108_0==BIT_SHIFT_RIGHT_ASSIGN||LA108_0==DIV_ASSIGN||LA108_0==MINUS_ASSIGN||LA108_0==MOD_ASSIGN||LA108_0==OR_ASSIGN||LA108_0==PLUS_ASSIGN||LA108_0==SHIFT_LEFT_ASSIGN||LA108_0==SHIFT_RIGHT_ASSIGN||LA108_0==STAR_ASSIGN||LA108_0==XOR_ASSIGN) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:850:13: ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN ) assignmentExpression
                    {
                    // /home/bigben/Desktop/Java.g:850:13: ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN )
                    int alt107=12;
                    switch ( input.LA(1) ) {
                    case ASSIGN:
                        {
                        alt107=1;
                        }
                        break;
                    case PLUS_ASSIGN:
                        {
                        alt107=2;
                        }
                        break;
                    case MINUS_ASSIGN:
                        {
                        alt107=3;
                        }
                        break;
                    case STAR_ASSIGN:
                        {
                        alt107=4;
                        }
                        break;
                    case DIV_ASSIGN:
                        {
                        alt107=5;
                        }
                        break;
                    case AND_ASSIGN:
                        {
                        alt107=6;
                        }
                        break;
                    case OR_ASSIGN:
                        {
                        alt107=7;
                        }
                        break;
                    case XOR_ASSIGN:
                        {
                        alt107=8;
                        }
                        break;
                    case MOD_ASSIGN:
                        {
                        alt107=9;
                        }
                        break;
                    case SHIFT_LEFT_ASSIGN:
                        {
                        alt107=10;
                        }
                        break;
                    case SHIFT_RIGHT_ASSIGN:
                        {
                        alt107=11;
                        }
                        break;
                    case BIT_SHIFT_RIGHT_ASSIGN:
                        {
                        alt107=12;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("850:13: ( ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN )", 107, 0, input);

                        throw nvae;
                    }

                    switch (alt107) {
                        case 1 :
                            // /home/bigben/Desktop/Java.g:850:17: ASSIGN
                            {
                            ASSIGN369=(Token)input.LT(1);
                            match(input,ASSIGN,FOLLOW_ASSIGN_in_assignmentExpression10529); if (failed) return retval;
                            if ( backtracking==0 ) {
                            ASSIGN369_tree = (CommonTree)adaptor.create(ASSIGN369);
                            root_0 = (CommonTree)adaptor.becomeRoot(ASSIGN369_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // /home/bigben/Desktop/Java.g:851:17: PLUS_ASSIGN
                            {
                            PLUS_ASSIGN370=(Token)input.LT(1);
                            match(input,PLUS_ASSIGN,FOLLOW_PLUS_ASSIGN_in_assignmentExpression10548); if (failed) return retval;
                            if ( backtracking==0 ) {
                            PLUS_ASSIGN370_tree = (CommonTree)adaptor.create(PLUS_ASSIGN370);
                            root_0 = (CommonTree)adaptor.becomeRoot(PLUS_ASSIGN370_tree, root_0);
                            }

                            }
                            break;
                        case 3 :
                            // /home/bigben/Desktop/Java.g:852:17: MINUS_ASSIGN
                            {
                            MINUS_ASSIGN371=(Token)input.LT(1);
                            match(input,MINUS_ASSIGN,FOLLOW_MINUS_ASSIGN_in_assignmentExpression10567); if (failed) return retval;
                            if ( backtracking==0 ) {
                            MINUS_ASSIGN371_tree = (CommonTree)adaptor.create(MINUS_ASSIGN371);
                            root_0 = (CommonTree)adaptor.becomeRoot(MINUS_ASSIGN371_tree, root_0);
                            }

                            }
                            break;
                        case 4 :
                            // /home/bigben/Desktop/Java.g:853:17: STAR_ASSIGN
                            {
                            STAR_ASSIGN372=(Token)input.LT(1);
                            match(input,STAR_ASSIGN,FOLLOW_STAR_ASSIGN_in_assignmentExpression10586); if (failed) return retval;
                            if ( backtracking==0 ) {
                            STAR_ASSIGN372_tree = (CommonTree)adaptor.create(STAR_ASSIGN372);
                            root_0 = (CommonTree)adaptor.becomeRoot(STAR_ASSIGN372_tree, root_0);
                            }

                            }
                            break;
                        case 5 :
                            // /home/bigben/Desktop/Java.g:854:17: DIV_ASSIGN
                            {
                            DIV_ASSIGN373=(Token)input.LT(1);
                            match(input,DIV_ASSIGN,FOLLOW_DIV_ASSIGN_in_assignmentExpression10605); if (failed) return retval;
                            if ( backtracking==0 ) {
                            DIV_ASSIGN373_tree = (CommonTree)adaptor.create(DIV_ASSIGN373);
                            root_0 = (CommonTree)adaptor.becomeRoot(DIV_ASSIGN373_tree, root_0);
                            }

                            }
                            break;
                        case 6 :
                            // /home/bigben/Desktop/Java.g:855:17: AND_ASSIGN
                            {
                            AND_ASSIGN374=(Token)input.LT(1);
                            match(input,AND_ASSIGN,FOLLOW_AND_ASSIGN_in_assignmentExpression10624); if (failed) return retval;
                            if ( backtracking==0 ) {
                            AND_ASSIGN374_tree = (CommonTree)adaptor.create(AND_ASSIGN374);
                            root_0 = (CommonTree)adaptor.becomeRoot(AND_ASSIGN374_tree, root_0);
                            }

                            }
                            break;
                        case 7 :
                            // /home/bigben/Desktop/Java.g:856:17: OR_ASSIGN
                            {
                            OR_ASSIGN375=(Token)input.LT(1);
                            match(input,OR_ASSIGN,FOLLOW_OR_ASSIGN_in_assignmentExpression10643); if (failed) return retval;
                            if ( backtracking==0 ) {
                            OR_ASSIGN375_tree = (CommonTree)adaptor.create(OR_ASSIGN375);
                            root_0 = (CommonTree)adaptor.becomeRoot(OR_ASSIGN375_tree, root_0);
                            }

                            }
                            break;
                        case 8 :
                            // /home/bigben/Desktop/Java.g:857:17: XOR_ASSIGN
                            {
                            XOR_ASSIGN376=(Token)input.LT(1);
                            match(input,XOR_ASSIGN,FOLLOW_XOR_ASSIGN_in_assignmentExpression10662); if (failed) return retval;
                            if ( backtracking==0 ) {
                            XOR_ASSIGN376_tree = (CommonTree)adaptor.create(XOR_ASSIGN376);
                            root_0 = (CommonTree)adaptor.becomeRoot(XOR_ASSIGN376_tree, root_0);
                            }

                            }
                            break;
                        case 9 :
                            // /home/bigben/Desktop/Java.g:858:17: MOD_ASSIGN
                            {
                            MOD_ASSIGN377=(Token)input.LT(1);
                            match(input,MOD_ASSIGN,FOLLOW_MOD_ASSIGN_in_assignmentExpression10681); if (failed) return retval;
                            if ( backtracking==0 ) {
                            MOD_ASSIGN377_tree = (CommonTree)adaptor.create(MOD_ASSIGN377);
                            root_0 = (CommonTree)adaptor.becomeRoot(MOD_ASSIGN377_tree, root_0);
                            }

                            }
                            break;
                        case 10 :
                            // /home/bigben/Desktop/Java.g:859:17: SHIFT_LEFT_ASSIGN
                            {
                            SHIFT_LEFT_ASSIGN378=(Token)input.LT(1);
                            match(input,SHIFT_LEFT_ASSIGN,FOLLOW_SHIFT_LEFT_ASSIGN_in_assignmentExpression10700); if (failed) return retval;
                            if ( backtracking==0 ) {
                            SHIFT_LEFT_ASSIGN378_tree = (CommonTree)adaptor.create(SHIFT_LEFT_ASSIGN378);
                            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_LEFT_ASSIGN378_tree, root_0);
                            }

                            }
                            break;
                        case 11 :
                            // /home/bigben/Desktop/Java.g:860:17: SHIFT_RIGHT_ASSIGN
                            {
                            SHIFT_RIGHT_ASSIGN379=(Token)input.LT(1);
                            match(input,SHIFT_RIGHT_ASSIGN,FOLLOW_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10719); if (failed) return retval;
                            if ( backtracking==0 ) {
                            SHIFT_RIGHT_ASSIGN379_tree = (CommonTree)adaptor.create(SHIFT_RIGHT_ASSIGN379);
                            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_RIGHT_ASSIGN379_tree, root_0);
                            }

                            }
                            break;
                        case 12 :
                            // /home/bigben/Desktop/Java.g:861:17: BIT_SHIFT_RIGHT_ASSIGN
                            {
                            BIT_SHIFT_RIGHT_ASSIGN380=(Token)input.LT(1);
                            match(input,BIT_SHIFT_RIGHT_ASSIGN,FOLLOW_BIT_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10738); if (failed) return retval;
                            if ( backtracking==0 ) {
                            BIT_SHIFT_RIGHT_ASSIGN380_tree = (CommonTree)adaptor.create(BIT_SHIFT_RIGHT_ASSIGN380);
                            root_0 = (CommonTree)adaptor.becomeRoot(BIT_SHIFT_RIGHT_ASSIGN380_tree, root_0);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_assignmentExpression_in_assignmentExpression10760);
                    assignmentExpression381=assignmentExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, assignmentExpression381.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 89, assignmentExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end assignmentExpression

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start conditionalExpression
    // /home/bigben/Desktop/Java.g:866:1: conditionalExpression : logicalOrExpression ( QUESTION assignmentExpression COLON conditionalExpression )? ;
    public final conditionalExpression_return conditionalExpression() throws RecognitionException {
        conditionalExpression_return retval = new conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token QUESTION383=null;
        Token COLON385=null;
        logicalOrExpression_return logicalOrExpression382 = null;

        assignmentExpression_return assignmentExpression384 = null;

        conditionalExpression_return conditionalExpression386 = null;


        CommonTree QUESTION383_tree=null;
        CommonTree COLON385_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // /home/bigben/Desktop/Java.g:867:5: ( logicalOrExpression ( QUESTION assignmentExpression COLON conditionalExpression )? )
            // /home/bigben/Desktop/Java.g:867:9: logicalOrExpression ( QUESTION assignmentExpression COLON conditionalExpression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_logicalOrExpression_in_conditionalExpression10785);
            logicalOrExpression382=logicalOrExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, logicalOrExpression382.getTree());
            // /home/bigben/Desktop/Java.g:867:29: ( QUESTION assignmentExpression COLON conditionalExpression )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==QUESTION) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:867:30: QUESTION assignmentExpression COLON conditionalExpression
                    {
                    QUESTION383=(Token)input.LT(1);
                    match(input,QUESTION,FOLLOW_QUESTION_in_conditionalExpression10788); if (failed) return retval;
                    if ( backtracking==0 ) {
                    QUESTION383_tree = (CommonTree)adaptor.create(QUESTION383);
                    root_0 = (CommonTree)adaptor.becomeRoot(QUESTION383_tree, root_0);
                    }
                    pushFollow(FOLLOW_assignmentExpression_in_conditionalExpression10791);
                    assignmentExpression384=assignmentExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, assignmentExpression384.getTree());
                    COLON385=(Token)input.LT(1);
                    match(input,COLON,FOLLOW_COLON_in_conditionalExpression10793); if (failed) return retval;
                    if ( backtracking==0 ) {
                    COLON385_tree = (CommonTree)adaptor.create(COLON385);
                    adaptor.addChild(root_0, COLON385_tree);
                    }
                    pushFollow(FOLLOW_conditionalExpression_in_conditionalExpression10795);
                    conditionalExpression386=conditionalExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, conditionalExpression386.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 90, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end conditionalExpression

    public static class logicalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start logicalOrExpression
    // /home/bigben/Desktop/Java.g:870:1: logicalOrExpression : logicalAndExpression ( LOGICAL_OR logicalAndExpression )* ;
    public final logicalOrExpression_return logicalOrExpression() throws RecognitionException {
        logicalOrExpression_return retval = new logicalOrExpression_return();
        retval.start = input.LT(1);
        int logicalOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LOGICAL_OR388=null;
        logicalAndExpression_return logicalAndExpression387 = null;

        logicalAndExpression_return logicalAndExpression389 = null;


        CommonTree LOGICAL_OR388_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // /home/bigben/Desktop/Java.g:871:5: ( logicalAndExpression ( LOGICAL_OR logicalAndExpression )* )
            // /home/bigben/Desktop/Java.g:871:9: logicalAndExpression ( LOGICAL_OR logicalAndExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression10816);
            logicalAndExpression387=logicalAndExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, logicalAndExpression387.getTree());
            // /home/bigben/Desktop/Java.g:871:30: ( LOGICAL_OR logicalAndExpression )*
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);

                if ( (LA110_0==LOGICAL_OR) ) {
                    alt110=1;
                }


                switch (alt110) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:871:31: LOGICAL_OR logicalAndExpression
            	    {
            	    LOGICAL_OR388=(Token)input.LT(1);
            	    match(input,LOGICAL_OR,FOLLOW_LOGICAL_OR_in_logicalOrExpression10819); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    LOGICAL_OR388_tree = (CommonTree)adaptor.create(LOGICAL_OR388);
            	    root_0 = (CommonTree)adaptor.becomeRoot(LOGICAL_OR388_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression10822);
            	    logicalAndExpression389=logicalAndExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, logicalAndExpression389.getTree());

            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 91, logicalOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end logicalOrExpression

    public static class logicalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start logicalAndExpression
    // /home/bigben/Desktop/Java.g:874:1: logicalAndExpression : inclusiveOrExpression ( LOGICAL_AND inclusiveOrExpression )* ;
    public final logicalAndExpression_return logicalAndExpression() throws RecognitionException {
        logicalAndExpression_return retval = new logicalAndExpression_return();
        retval.start = input.LT(1);
        int logicalAndExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LOGICAL_AND391=null;
        inclusiveOrExpression_return inclusiveOrExpression390 = null;

        inclusiveOrExpression_return inclusiveOrExpression392 = null;


        CommonTree LOGICAL_AND391_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // /home/bigben/Desktop/Java.g:875:5: ( inclusiveOrExpression ( LOGICAL_AND inclusiveOrExpression )* )
            // /home/bigben/Desktop/Java.g:875:9: inclusiveOrExpression ( LOGICAL_AND inclusiveOrExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_inclusiveOrExpression_in_logicalAndExpression10843);
            inclusiveOrExpression390=inclusiveOrExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression390.getTree());
            // /home/bigben/Desktop/Java.g:875:31: ( LOGICAL_AND inclusiveOrExpression )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==LOGICAL_AND) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:875:32: LOGICAL_AND inclusiveOrExpression
            	    {
            	    LOGICAL_AND391=(Token)input.LT(1);
            	    match(input,LOGICAL_AND,FOLLOW_LOGICAL_AND_in_logicalAndExpression10846); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    LOGICAL_AND391_tree = (CommonTree)adaptor.create(LOGICAL_AND391);
            	    root_0 = (CommonTree)adaptor.becomeRoot(LOGICAL_AND391_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_inclusiveOrExpression_in_logicalAndExpression10849);
            	    inclusiveOrExpression392=inclusiveOrExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression392.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 92, logicalAndExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end logicalAndExpression

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start inclusiveOrExpression
    // /home/bigben/Desktop/Java.g:878:1: inclusiveOrExpression : exclusiveOrExpression ( OR exclusiveOrExpression )* ;
    public final inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        inclusiveOrExpression_return retval = new inclusiveOrExpression_return();
        retval.start = input.LT(1);
        int inclusiveOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OR394=null;
        exclusiveOrExpression_return exclusiveOrExpression393 = null;

        exclusiveOrExpression_return exclusiveOrExpression395 = null;


        CommonTree OR394_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // /home/bigben/Desktop/Java.g:879:5: ( exclusiveOrExpression ( OR exclusiveOrExpression )* )
            // /home/bigben/Desktop/Java.g:879:9: exclusiveOrExpression ( OR exclusiveOrExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression10870);
            exclusiveOrExpression393=exclusiveOrExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression393.getTree());
            // /home/bigben/Desktop/Java.g:879:31: ( OR exclusiveOrExpression )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==OR) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:879:32: OR exclusiveOrExpression
            	    {
            	    OR394=(Token)input.LT(1);
            	    match(input,OR,FOLLOW_OR_in_inclusiveOrExpression10873); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    OR394_tree = (CommonTree)adaptor.create(OR394);
            	    root_0 = (CommonTree)adaptor.becomeRoot(OR394_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression10876);
            	    exclusiveOrExpression395=exclusiveOrExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression395.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 93, inclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end inclusiveOrExpression

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start exclusiveOrExpression
    // /home/bigben/Desktop/Java.g:882:1: exclusiveOrExpression : andExpression ( XOR andExpression )* ;
    public final exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        exclusiveOrExpression_return retval = new exclusiveOrExpression_return();
        retval.start = input.LT(1);
        int exclusiveOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token XOR397=null;
        andExpression_return andExpression396 = null;

        andExpression_return andExpression398 = null;


        CommonTree XOR397_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // /home/bigben/Desktop/Java.g:883:5: ( andExpression ( XOR andExpression )* )
            // /home/bigben/Desktop/Java.g:883:9: andExpression ( XOR andExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression10897);
            andExpression396=andExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, andExpression396.getTree());
            // /home/bigben/Desktop/Java.g:883:23: ( XOR andExpression )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==XOR) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:883:24: XOR andExpression
            	    {
            	    XOR397=(Token)input.LT(1);
            	    match(input,XOR,FOLLOW_XOR_in_exclusiveOrExpression10900); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    XOR397_tree = (CommonTree)adaptor.create(XOR397);
            	    root_0 = (CommonTree)adaptor.becomeRoot(XOR397_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression10903);
            	    andExpression398=andExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, andExpression398.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 94, exclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end exclusiveOrExpression

    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start andExpression
    // /home/bigben/Desktop/Java.g:886:1: andExpression : equalityExpression ( AND equalityExpression )* ;
    public final andExpression_return andExpression() throws RecognitionException {
        andExpression_return retval = new andExpression_return();
        retval.start = input.LT(1);
        int andExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AND400=null;
        equalityExpression_return equalityExpression399 = null;

        equalityExpression_return equalityExpression401 = null;


        CommonTree AND400_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // /home/bigben/Desktop/Java.g:887:5: ( equalityExpression ( AND equalityExpression )* )
            // /home/bigben/Desktop/Java.g:887:9: equalityExpression ( AND equalityExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_equalityExpression_in_andExpression10924);
            equalityExpression399=equalityExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, equalityExpression399.getTree());
            // /home/bigben/Desktop/Java.g:887:28: ( AND equalityExpression )*
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( (LA114_0==AND) ) {
                    alt114=1;
                }


                switch (alt114) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:887:29: AND equalityExpression
            	    {
            	    AND400=(Token)input.LT(1);
            	    match(input,AND,FOLLOW_AND_in_andExpression10927); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    AND400_tree = (CommonTree)adaptor.create(AND400);
            	    root_0 = (CommonTree)adaptor.becomeRoot(AND400_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_equalityExpression_in_andExpression10930);
            	    equalityExpression401=equalityExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, equalityExpression401.getTree());

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 95, andExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end andExpression

    public static class equalityExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start equalityExpression
    // /home/bigben/Desktop/Java.g:890:1: equalityExpression : instanceOfExpression ( ( EQUAL | NOT_EQUAL ) instanceOfExpression )* ;
    public final equalityExpression_return equalityExpression() throws RecognitionException {
        equalityExpression_return retval = new equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EQUAL403=null;
        Token NOT_EQUAL404=null;
        instanceOfExpression_return instanceOfExpression402 = null;

        instanceOfExpression_return instanceOfExpression405 = null;


        CommonTree EQUAL403_tree=null;
        CommonTree NOT_EQUAL404_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // /home/bigben/Desktop/Java.g:891:5: ( instanceOfExpression ( ( EQUAL | NOT_EQUAL ) instanceOfExpression )* )
            // /home/bigben/Desktop/Java.g:891:9: instanceOfExpression ( ( EQUAL | NOT_EQUAL ) instanceOfExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression10951);
            instanceOfExpression402=instanceOfExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression402.getTree());
            // /home/bigben/Desktop/Java.g:892:9: ( ( EQUAL | NOT_EQUAL ) instanceOfExpression )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==EQUAL||LA116_0==NOT_EQUAL) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:892:13: ( EQUAL | NOT_EQUAL ) instanceOfExpression
            	    {
            	    // /home/bigben/Desktop/Java.g:892:13: ( EQUAL | NOT_EQUAL )
            	    int alt115=2;
            	    int LA115_0 = input.LA(1);

            	    if ( (LA115_0==EQUAL) ) {
            	        alt115=1;
            	    }
            	    else if ( (LA115_0==NOT_EQUAL) ) {
            	        alt115=2;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("892:13: ( EQUAL | NOT_EQUAL )", 115, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt115) {
            	        case 1 :
            	            // /home/bigben/Desktop/Java.g:892:17: EQUAL
            	            {
            	            EQUAL403=(Token)input.LT(1);
            	            match(input,EQUAL,FOLLOW_EQUAL_in_equalityExpression10970); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            EQUAL403_tree = (CommonTree)adaptor.create(EQUAL403);
            	            root_0 = (CommonTree)adaptor.becomeRoot(EQUAL403_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /home/bigben/Desktop/Java.g:893:17: NOT_EQUAL
            	            {
            	            NOT_EQUAL404=(Token)input.LT(1);
            	            match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_equalityExpression10989); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            NOT_EQUAL404_tree = (CommonTree)adaptor.create(NOT_EQUAL404);
            	            root_0 = (CommonTree)adaptor.becomeRoot(NOT_EQUAL404_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression11019);
            	    instanceOfExpression405=instanceOfExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression405.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 96, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end equalityExpression

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start instanceOfExpression
    // /home/bigben/Desktop/Java.g:899:1: instanceOfExpression : relationalExpression ( INSTANCEOF type )? ;
    public final instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        instanceOfExpression_return retval = new instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INSTANCEOF407=null;
        relationalExpression_return relationalExpression406 = null;

        type_return type408 = null;


        CommonTree INSTANCEOF407_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // /home/bigben/Desktop/Java.g:900:5: ( relationalExpression ( INSTANCEOF type )? )
            // /home/bigben/Desktop/Java.g:900:9: relationalExpression ( INSTANCEOF type )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression11049);
            relationalExpression406=relationalExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, relationalExpression406.getTree());
            // /home/bigben/Desktop/Java.g:900:30: ( INSTANCEOF type )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==INSTANCEOF) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:900:31: INSTANCEOF type
                    {
                    INSTANCEOF407=(Token)input.LT(1);
                    match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_instanceOfExpression11052); if (failed) return retval;
                    if ( backtracking==0 ) {
                    INSTANCEOF407_tree = (CommonTree)adaptor.create(INSTANCEOF407);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF407_tree, root_0);
                    }
                    pushFollow(FOLLOW_type_in_instanceOfExpression11055);
                    type408=type();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, type408.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 97, instanceOfExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end instanceOfExpression

    public static class relationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start relationalExpression
    // /home/bigben/Desktop/Java.g:903:1: relationalExpression : shiftExpression ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )* ;
    public final relationalExpression_return relationalExpression() throws RecognitionException {
        relationalExpression_return retval = new relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_OR_EQUAL410=null;
        Token GREATER_OR_EQUAL411=null;
        Token LESS_THAN412=null;
        Token GREATER_THAN413=null;
        shiftExpression_return shiftExpression409 = null;

        shiftExpression_return shiftExpression414 = null;


        CommonTree LESS_OR_EQUAL410_tree=null;
        CommonTree GREATER_OR_EQUAL411_tree=null;
        CommonTree LESS_THAN412_tree=null;
        CommonTree GREATER_THAN413_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // /home/bigben/Desktop/Java.g:904:5: ( shiftExpression ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )* )
            // /home/bigben/Desktop/Java.g:904:9: shiftExpression ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_shiftExpression_in_relationalExpression11076);
            shiftExpression409=shiftExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, shiftExpression409.getTree());
            // /home/bigben/Desktop/Java.g:905:9: ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( ((LA119_0>=GREATER_OR_EQUAL && LA119_0<=GREATER_THAN)||(LA119_0>=LESS_OR_EQUAL && LA119_0<=LESS_THAN)) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:905:13: ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression
            	    {
            	    // /home/bigben/Desktop/Java.g:905:13: ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN )
            	    int alt118=4;
            	    switch ( input.LA(1) ) {
            	    case LESS_OR_EQUAL:
            	        {
            	        alt118=1;
            	        }
            	        break;
            	    case GREATER_OR_EQUAL:
            	        {
            	        alt118=2;
            	        }
            	        break;
            	    case LESS_THAN:
            	        {
            	        alt118=3;
            	        }
            	        break;
            	    case GREATER_THAN:
            	        {
            	        alt118=4;
            	        }
            	        break;
            	    default:
            	        if (backtracking>0) {failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("905:13: ( LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN )", 118, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt118) {
            	        case 1 :
            	            // /home/bigben/Desktop/Java.g:905:17: LESS_OR_EQUAL
            	            {
            	            LESS_OR_EQUAL410=(Token)input.LT(1);
            	            match(input,LESS_OR_EQUAL,FOLLOW_LESS_OR_EQUAL_in_relationalExpression11095); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            LESS_OR_EQUAL410_tree = (CommonTree)adaptor.create(LESS_OR_EQUAL410);
            	            root_0 = (CommonTree)adaptor.becomeRoot(LESS_OR_EQUAL410_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /home/bigben/Desktop/Java.g:906:17: GREATER_OR_EQUAL
            	            {
            	            GREATER_OR_EQUAL411=(Token)input.LT(1);
            	            match(input,GREATER_OR_EQUAL,FOLLOW_GREATER_OR_EQUAL_in_relationalExpression11114); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            GREATER_OR_EQUAL411_tree = (CommonTree)adaptor.create(GREATER_OR_EQUAL411);
            	            root_0 = (CommonTree)adaptor.becomeRoot(GREATER_OR_EQUAL411_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // /home/bigben/Desktop/Java.g:907:17: LESS_THAN
            	            {
            	            LESS_THAN412=(Token)input.LT(1);
            	            match(input,LESS_THAN,FOLLOW_LESS_THAN_in_relationalExpression11133); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            LESS_THAN412_tree = (CommonTree)adaptor.create(LESS_THAN412);
            	            root_0 = (CommonTree)adaptor.becomeRoot(LESS_THAN412_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // /home/bigben/Desktop/Java.g:908:17: GREATER_THAN
            	            {
            	            GREATER_THAN413=(Token)input.LT(1);
            	            match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_relationalExpression11152); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            GREATER_THAN413_tree = (CommonTree)adaptor.create(GREATER_THAN413);
            	            root_0 = (CommonTree)adaptor.becomeRoot(GREATER_THAN413_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression11181);
            	    shiftExpression414=shiftExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, shiftExpression414.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 98, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end relationalExpression

    public static class shiftExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start shiftExpression
    // /home/bigben/Desktop/Java.g:914:1: shiftExpression : additiveExpression ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )* ;
    public final shiftExpression_return shiftExpression() throws RecognitionException {
        shiftExpression_return retval = new shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token BIT_SHIFT_RIGHT416=null;
        Token SHIFT_RIGHT417=null;
        Token SHIFT_LEFT418=null;
        additiveExpression_return additiveExpression415 = null;

        additiveExpression_return additiveExpression419 = null;


        CommonTree BIT_SHIFT_RIGHT416_tree=null;
        CommonTree SHIFT_RIGHT417_tree=null;
        CommonTree SHIFT_LEFT418_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // /home/bigben/Desktop/Java.g:915:5: ( additiveExpression ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )* )
            // /home/bigben/Desktop/Java.g:915:9: additiveExpression ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_additiveExpression_in_shiftExpression11215);
            additiveExpression415=additiveExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpression415.getTree());
            // /home/bigben/Desktop/Java.g:916:9: ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==BIT_SHIFT_RIGHT||LA121_0==SHIFT_LEFT||LA121_0==SHIFT_RIGHT) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:916:13: ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression
            	    {
            	    // /home/bigben/Desktop/Java.g:916:13: ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT )
            	    int alt120=3;
            	    switch ( input.LA(1) ) {
            	    case BIT_SHIFT_RIGHT:
            	        {
            	        alt120=1;
            	        }
            	        break;
            	    case SHIFT_RIGHT:
            	        {
            	        alt120=2;
            	        }
            	        break;
            	    case SHIFT_LEFT:
            	        {
            	        alt120=3;
            	        }
            	        break;
            	    default:
            	        if (backtracking>0) {failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("916:13: ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT )", 120, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt120) {
            	        case 1 :
            	            // /home/bigben/Desktop/Java.g:916:17: BIT_SHIFT_RIGHT
            	            {
            	            BIT_SHIFT_RIGHT416=(Token)input.LT(1);
            	            match(input,BIT_SHIFT_RIGHT,FOLLOW_BIT_SHIFT_RIGHT_in_shiftExpression11233); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            BIT_SHIFT_RIGHT416_tree = (CommonTree)adaptor.create(BIT_SHIFT_RIGHT416);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BIT_SHIFT_RIGHT416_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /home/bigben/Desktop/Java.g:917:17: SHIFT_RIGHT
            	            {
            	            SHIFT_RIGHT417=(Token)input.LT(1);
            	            match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_shiftExpression11252); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            SHIFT_RIGHT417_tree = (CommonTree)adaptor.create(SHIFT_RIGHT417);
            	            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_RIGHT417_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // /home/bigben/Desktop/Java.g:918:17: SHIFT_LEFT
            	            {
            	            SHIFT_LEFT418=(Token)input.LT(1);
            	            match(input,SHIFT_LEFT,FOLLOW_SHIFT_LEFT_in_shiftExpression11271); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            SHIFT_LEFT418_tree = (CommonTree)adaptor.create(SHIFT_LEFT418);
            	            root_0 = (CommonTree)adaptor.becomeRoot(SHIFT_LEFT418_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression11300);
            	    additiveExpression419=additiveExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpression419.getTree());

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 99, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end shiftExpression

    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start additiveExpression
    // /home/bigben/Desktop/Java.g:924:1: additiveExpression : multiplicativeExpression ( ( PLUS | MINUS ) multiplicativeExpression )* ;
    public final additiveExpression_return additiveExpression() throws RecognitionException {
        additiveExpression_return retval = new additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PLUS421=null;
        Token MINUS422=null;
        multiplicativeExpression_return multiplicativeExpression420 = null;

        multiplicativeExpression_return multiplicativeExpression423 = null;


        CommonTree PLUS421_tree=null;
        CommonTree MINUS422_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // /home/bigben/Desktop/Java.g:925:5: ( multiplicativeExpression ( ( PLUS | MINUS ) multiplicativeExpression )* )
            // /home/bigben/Desktop/Java.g:925:9: multiplicativeExpression ( ( PLUS | MINUS ) multiplicativeExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression11330);
            multiplicativeExpression420=multiplicativeExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression420.getTree());
            // /home/bigben/Desktop/Java.g:926:9: ( ( PLUS | MINUS ) multiplicativeExpression )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==MINUS||LA123_0==PLUS) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:926:13: ( PLUS | MINUS ) multiplicativeExpression
            	    {
            	    // /home/bigben/Desktop/Java.g:926:13: ( PLUS | MINUS )
            	    int alt122=2;
            	    int LA122_0 = input.LA(1);

            	    if ( (LA122_0==PLUS) ) {
            	        alt122=1;
            	    }
            	    else if ( (LA122_0==MINUS) ) {
            	        alt122=2;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("926:13: ( PLUS | MINUS )", 122, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt122) {
            	        case 1 :
            	            // /home/bigben/Desktop/Java.g:926:17: PLUS
            	            {
            	            PLUS421=(Token)input.LT(1);
            	            match(input,PLUS,FOLLOW_PLUS_in_additiveExpression11348); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            PLUS421_tree = (CommonTree)adaptor.create(PLUS421);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS421_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /home/bigben/Desktop/Java.g:927:17: MINUS
            	            {
            	            MINUS422=(Token)input.LT(1);
            	            match(input,MINUS,FOLLOW_MINUS_in_additiveExpression11367); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            MINUS422_tree = (CommonTree)adaptor.create(MINUS422);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS422_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression11396);
            	    multiplicativeExpression423=multiplicativeExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression423.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 100, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end additiveExpression

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start multiplicativeExpression
    // /home/bigben/Desktop/Java.g:933:1: multiplicativeExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        multiplicativeExpression_return retval = new multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token STAR425=null;
        Token DIV426=null;
        Token MOD427=null;
        unaryExpression_return unaryExpression424 = null;

        unaryExpression_return unaryExpression428 = null;


        CommonTree STAR425_tree=null;
        CommonTree DIV426_tree=null;
        CommonTree MOD427_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // /home/bigben/Desktop/Java.g:934:5: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // /home/bigben/Desktop/Java.g:934:9: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression11426);
            unaryExpression424=unaryExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, unaryExpression424.getTree());
            // /home/bigben/Desktop/Java.g:935:9: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( (LA125_0==DIV||LA125_0==MOD||LA125_0==STAR) ) {
                    alt125=1;
                }


                switch (alt125) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:935:13: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    // /home/bigben/Desktop/Java.g:935:13: ( STAR | DIV | MOD )
            	    int alt124=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt124=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt124=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt124=3;
            	        }
            	        break;
            	    default:
            	        if (backtracking>0) {failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("935:13: ( STAR | DIV | MOD )", 124, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt124) {
            	        case 1 :
            	            // /home/bigben/Desktop/Java.g:935:17: STAR
            	            {
            	            STAR425=(Token)input.LT(1);
            	            match(input,STAR,FOLLOW_STAR_in_multiplicativeExpression11445); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            STAR425_tree = (CommonTree)adaptor.create(STAR425);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR425_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /home/bigben/Desktop/Java.g:936:17: DIV
            	            {
            	            DIV426=(Token)input.LT(1);
            	            match(input,DIV,FOLLOW_DIV_in_multiplicativeExpression11464); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            DIV426_tree = (CommonTree)adaptor.create(DIV426);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV426_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // /home/bigben/Desktop/Java.g:937:17: MOD
            	            {
            	            MOD427=(Token)input.LT(1);
            	            match(input,MOD,FOLLOW_MOD_in_multiplicativeExpression11483); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            MOD427_tree = (CommonTree)adaptor.create(MOD427);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD427_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression11512);
            	    unaryExpression428=unaryExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, unaryExpression428.getTree());

            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 101, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end multiplicativeExpression

    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start unaryExpression
    // /home/bigben/Desktop/Java.g:943:1: unaryExpression : ( PLUS unaryExpression -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionNotPlusMinus );
    public final unaryExpression_return unaryExpression() throws RecognitionException {
        unaryExpression_return retval = new unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PLUS429=null;
        Token MINUS431=null;
        Token INC433=null;
        Token DEC435=null;
        unaryExpression_return unaryExpression430 = null;

        unaryExpression_return unaryExpression432 = null;

        postfixedExpression_return postfixedExpression434 = null;

        postfixedExpression_return postfixedExpression436 = null;

        unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus437 = null;


        CommonTree PLUS429_tree=null;
        CommonTree MINUS431_tree=null;
        CommonTree INC433_tree=null;
        CommonTree DEC435_tree=null;
        RewriteRuleTokenStream stream_DEC=new RewriteRuleTokenStream(adaptor,"token DEC");
        RewriteRuleTokenStream stream_INC=new RewriteRuleTokenStream(adaptor,"token INC");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_postfixedExpression=new RewriteRuleSubtreeStream(adaptor,"rule postfixedExpression");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // /home/bigben/Desktop/Java.g:944:5: ( PLUS unaryExpression -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionNotPlusMinus )
            int alt126=5;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt126=1;
                }
                break;
            case MINUS:
                {
                alt126=2;
                }
                break;
            case INC:
                {
                alt126=3;
                }
                break;
            case DEC:
                {
                alt126=4;
                }
                break;
            case LESS_THAN:
            case LOGICAL_NOT:
            case LPAREN:
            case NOT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case IDENT:
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                {
                alt126=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("943:1: unaryExpression : ( PLUS unaryExpression -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionNotPlusMinus );", 126, 0, input);

                throw nvae;
            }

            switch (alt126) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:944:9: PLUS unaryExpression
                    {
                    PLUS429=(Token)input.LT(1);
                    match(input,PLUS,FOLLOW_PLUS_in_unaryExpression11546); if (failed) return retval;
                    if ( backtracking==0 ) stream_PLUS.add(PLUS429);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression11548);
                    unaryExpression430=unaryExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_unaryExpression.add(unaryExpression430.getTree());

                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 944:37: -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression )
                    {
                        // /home/bigben/Desktop/Java.g:944:41: ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(UNARY_PLUS, PLUS429,  "UNARY_PLUS"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:945:9: MINUS unaryExpression
                    {
                    MINUS431=(Token)input.LT(1);
                    match(input,MINUS,FOLLOW_MINUS_in_unaryExpression11575); if (failed) return retval;
                    if ( backtracking==0 ) stream_MINUS.add(MINUS431);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression11577);
                    unaryExpression432=unaryExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_unaryExpression.add(unaryExpression432.getTree());

                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 945:37: -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression )
                    {
                        // /home/bigben/Desktop/Java.g:945:41: ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(UNARY_MINUS, MINUS431,  "UNARY_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 3 :
                    // /home/bigben/Desktop/Java.g:946:9: INC postfixedExpression
                    {
                    INC433=(Token)input.LT(1);
                    match(input,INC,FOLLOW_INC_in_unaryExpression11603); if (failed) return retval;
                    if ( backtracking==0 ) stream_INC.add(INC433);

                    pushFollow(FOLLOW_postfixedExpression_in_unaryExpression11605);
                    postfixedExpression434=postfixedExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_postfixedExpression.add(postfixedExpression434.getTree());

                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 946:37: -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression )
                    {
                        // /home/bigben/Desktop/Java.g:946:41: ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(PRE_INC, INC433,  "PRE_INC"), root_1);

                        adaptor.addChild(root_1, stream_postfixedExpression.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 4 :
                    // /home/bigben/Desktop/Java.g:947:9: DEC postfixedExpression
                    {
                    DEC435=(Token)input.LT(1);
                    match(input,DEC,FOLLOW_DEC_in_unaryExpression11629); if (failed) return retval;
                    if ( backtracking==0 ) stream_DEC.add(DEC435);

                    pushFollow(FOLLOW_postfixedExpression_in_unaryExpression11631);
                    postfixedExpression436=postfixedExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_postfixedExpression.add(postfixedExpression436.getTree());

                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 947:37: -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression )
                    {
                        // /home/bigben/Desktop/Java.g:947:41: ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(PRE_DEC, DEC435,  "PRE_DEC"), root_1);

                        adaptor.addChild(root_1, stream_postfixedExpression.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 5 :
                    // /home/bigben/Desktop/Java.g:948:9: unaryExpressionNotPlusMinus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression11655);
                    unaryExpressionNotPlusMinus437=unaryExpressionNotPlusMinus();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus437.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 102, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end unaryExpression

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start unaryExpressionNotPlusMinus
    // /home/bigben/Desktop/Java.g:951:1: unaryExpressionNotPlusMinus : ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression ) | postfixedExpression );
    public final unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        unaryExpressionNotPlusMinus_return retval = new unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NOT438=null;
        Token LOGICAL_NOT440=null;
        Token LPAREN442=null;
        Token RPAREN444=null;
        unaryExpression_return unaryExpression439 = null;

        unaryExpression_return unaryExpression441 = null;

        type_return type443 = null;

        unaryExpression_return unaryExpression445 = null;

        postfixedExpression_return postfixedExpression446 = null;


        CommonTree NOT438_tree=null;
        CommonTree LOGICAL_NOT440_tree=null;
        CommonTree LPAREN442_tree=null;
        CommonTree RPAREN444_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LOGICAL_NOT=new RewriteRuleTokenStream(adaptor,"token LOGICAL_NOT");
        RewriteRuleTokenStream stream_NOT=new RewriteRuleTokenStream(adaptor,"token NOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // /home/bigben/Desktop/Java.g:952:5: ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression ) | postfixedExpression )
            int alt127=4;
            switch ( input.LA(1) ) {
            case NOT:
                {
                alt127=1;
                }
                break;
            case LOGICAL_NOT:
                {
                alt127=2;
                }
                break;
            case LPAREN:
                {
                int LA127_3 = input.LA(2);

                if ( (synpred190()) ) {
                    alt127=3;
                }
                else if ( (true) ) {
                    alt127=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("951:1: unaryExpressionNotPlusMinus : ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression ) | postfixedExpression );", 127, 3, input);

                    throw nvae;
                }
                }
                break;
            case LESS_THAN:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case IDENT:
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                {
                alt127=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("951:1: unaryExpressionNotPlusMinus : ( NOT unaryExpression -> ^( NOT unaryExpression ) | LOGICAL_NOT unaryExpression -> ^( LOGICAL_NOT unaryExpression ) | LPAREN type RPAREN unaryExpression -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression ) | postfixedExpression );", 127, 0, input);

                throw nvae;
            }

            switch (alt127) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:952:9: NOT unaryExpression
                    {
                    NOT438=(Token)input.LT(1);
                    match(input,NOT,FOLLOW_NOT_in_unaryExpressionNotPlusMinus11674); if (failed) return retval;
                    if ( backtracking==0 ) stream_NOT.add(NOT438);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11676);
                    unaryExpression439=unaryExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_unaryExpression.add(unaryExpression439.getTree());

                    // AST REWRITE
                    // elements: NOT, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 952:57: -> ^( NOT unaryExpression )
                    {
                        // /home/bigben/Desktop/Java.g:952:61: ^( NOT unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_NOT.next(), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:953:9: LOGICAL_NOT unaryExpression
                    {
                    LOGICAL_NOT440=(Token)input.LT(1);
                    match(input,LOGICAL_NOT,FOLLOW_LOGICAL_NOT_in_unaryExpressionNotPlusMinus11723); if (failed) return retval;
                    if ( backtracking==0 ) stream_LOGICAL_NOT.add(LOGICAL_NOT440);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11725);
                    unaryExpression441=unaryExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_unaryExpression.add(unaryExpression441.getTree());

                    // AST REWRITE
                    // elements: LOGICAL_NOT, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 953:57: -> ^( LOGICAL_NOT unaryExpression )
                    {
                        // /home/bigben/Desktop/Java.g:953:61: ^( LOGICAL_NOT unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_LOGICAL_NOT.next(), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 3 :
                    // /home/bigben/Desktop/Java.g:954:9: LPAREN type RPAREN unaryExpression
                    {
                    LPAREN442=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpressionNotPlusMinus11764); if (failed) return retval;
                    if ( backtracking==0 ) stream_LPAREN.add(LPAREN442);

                    pushFollow(FOLLOW_type_in_unaryExpressionNotPlusMinus11766);
                    type443=type();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_type.add(type443.getTree());
                    RPAREN444=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpressionNotPlusMinus11768); if (failed) return retval;
                    if ( backtracking==0 ) stream_RPAREN.add(RPAREN444);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11770);
                    unaryExpression445=unaryExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_unaryExpression.add(unaryExpression445.getTree());

                    // AST REWRITE
                    // elements: unaryExpression, type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 954:57: -> ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression )
                    {
                        // /home/bigben/Desktop/Java.g:954:61: ^( CAST_EXPR[$LPAREN, \"CAST_EXPR\"] type unaryExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(CAST_EXPR, LPAREN442,  "CAST_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_type.next());
                        adaptor.addChild(root_1, stream_unaryExpression.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 4 :
                    // /home/bigben/Desktop/Java.g:955:9: postfixedExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_postfixedExpression_in_unaryExpressionNotPlusMinus11805);
                    postfixedExpression446=postfixedExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, postfixedExpression446.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 103, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end unaryExpressionNotPlusMinus

    public static class postfixedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start postfixedExpression
    // /home/bigben/Desktop/Java.g:958:1: postfixedExpression : ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )? ;
    public final postfixedExpression_return postfixedExpression() throws RecognitionException {
        postfixedExpression_return retval = new postfixedExpression_return();
        retval.start = input.LT(1);
        int postfixedExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token outerDot=null;
        Token Super=null;
        Token innerDot=null;
        Token IDENT449=null;
        Token THIS451=null;
        Token SUPER453=null;
        Token IDENT454=null;
        Token LBRACK457=null;
        Token RBRACK459=null;
        Token INC460=null;
        Token DEC461=null;
        primaryExpression_return primaryExpression447 = null;

        genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified448 = null;

        arguments_return arguments450 = null;

        arguments_return arguments452 = null;

        arguments_return arguments455 = null;

        innerNewExpression_return innerNewExpression456 = null;

        expression_return expression458 = null;


        CommonTree outerDot_tree=null;
        CommonTree Super_tree=null;
        CommonTree innerDot_tree=null;
        CommonTree IDENT449_tree=null;
        CommonTree THIS451_tree=null;
        CommonTree SUPER453_tree=null;
        CommonTree IDENT454_tree=null;
        CommonTree LBRACK457_tree=null;
        CommonTree RBRACK459_tree=null;
        CommonTree INC460_tree=null;
        CommonTree DEC461_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_INC=new RewriteRuleTokenStream(adaptor,"token INC");
        RewriteRuleTokenStream stream_DEC=new RewriteRuleTokenStream(adaptor,"token DEC");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        RewriteRuleSubtreeStream stream_innerNewExpression=new RewriteRuleSubtreeStream(adaptor,"rule innerNewExpression");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // /home/bigben/Desktop/Java.g:960:5: ( ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )? )
            // /home/bigben/Desktop/Java.g:960:9: ( primaryExpression -> primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?
            {
            // /home/bigben/Desktop/Java.g:960:9: ( primaryExpression -> primaryExpression )
            // /home/bigben/Desktop/Java.g:960:13: primaryExpression
            {
            pushFollow(FOLLOW_primaryExpression_in_postfixedExpression11841);
            primaryExpression447=primaryExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_primaryExpression.add(primaryExpression447.getTree());

            // AST REWRITE
            // elements: primaryExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 960:53: -> primaryExpression
            {
                adaptor.addChild(root_0, stream_primaryExpression.next());

            }

            }

            }

            // /home/bigben/Desktop/Java.g:963:9: (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )*
            loop132:
            do {
                int alt132=3;
                int LA132_0 = input.LA(1);

                if ( (LA132_0==DOT) ) {
                    alt132=1;
                }
                else if ( (LA132_0==LBRACK) ) {
                    alt132=2;
                }


                switch (alt132) {
            	case 1 :
            	    // /home/bigben/Desktop/Java.g:963:13: outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
            	    {
            	    outerDot=(Token)input.LT(1);
            	    match(input,DOT,FOLLOW_DOT_in_postfixedExpression11903); if (failed) return retval;
            	    if ( backtracking==0 ) stream_DOT.add(outerDot);

            	    // /home/bigben/Desktop/Java.g:964:13: ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
            	    int alt131=5;
            	    switch ( input.LA(1) ) {
            	    case LESS_THAN:
            	    case IDENT:
            	        {
            	        alt131=1;
            	        }
            	        break;
            	    case THIS:
            	        {
            	        alt131=2;
            	        }
            	        break;
            	    case SUPER:
            	        {
            	        int LA131_3 = input.LA(2);

            	        if ( (LA131_3==DOT) ) {
            	            alt131=4;
            	        }
            	        else if ( (LA131_3==LPAREN) ) {
            	            alt131=3;
            	        }
            	        else {
            	            if (backtracking>0) {failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("964:13: ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )", 131, 3, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case NEW:
            	        {
            	        alt131=5;
            	        }
            	        break;
            	    default:
            	        if (backtracking>0) {failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("964:13: ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )", 131, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt131) {
            	        case 1 :
            	            // /home/bigben/Desktop/Java.g:964:17: ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?
            	            {
            	            // /home/bigben/Desktop/Java.g:964:17: ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) )
            	            // /home/bigben/Desktop/Java.g:964:21: ( genericTypeArgumentListSimplified )? IDENT
            	            {
            	            // /home/bigben/Desktop/Java.g:964:21: ( genericTypeArgumentListSimplified )?
            	            int alt128=2;
            	            int LA128_0 = input.LA(1);

            	            if ( (LA128_0==LESS_THAN) ) {
            	                alt128=1;
            	            }
            	            switch (alt128) {
            	                case 1 :
            	                    // /home/bigben/Desktop/Java.g:0:0: genericTypeArgumentListSimplified
            	                    {
            	                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_postfixedExpression11953);
            	                    genericTypeArgumentListSimplified448=genericTypeArgumentListSimplified();
            	                    _fsp--;
            	                    if (failed) return retval;
            	                    if ( backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified448.getTree());

            	                    }
            	                    break;

            	            }

            	            IDENT449=(Token)input.LT(1);
            	            match(input,IDENT,FOLLOW_IDENT_in_postfixedExpression12035); if (failed) return retval;
            	            if ( backtracking==0 ) stream_IDENT.add(IDENT449);


            	            // AST REWRITE
            	            // elements: IDENT, DOT, postfixedExpression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            if ( backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 966:53: -> ^( DOT $postfixedExpression IDENT )
            	            {
            	                // /home/bigben/Desktop/Java.g:966:57: ^( DOT $postfixedExpression IDENT )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.next(), root_1);

            	                adaptor.addChild(root_1, stream_retval.next());
            	                adaptor.addChild(root_1, stream_IDENT.next());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            }

            	            }

            	            // /home/bigben/Desktop/Java.g:968:17: ( arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?
            	            int alt129=2;
            	            int LA129_0 = input.LA(1);

            	            if ( (LA129_0==LPAREN) ) {
            	                alt129=1;
            	            }
            	            switch (alt129) {
            	                case 1 :
            	                    // /home/bigben/Desktop/Java.g:968:21: arguments
            	                    {
            	                    pushFollow(FOLLOW_arguments_in_postfixedExpression12114);
            	                    arguments450=arguments();
            	                    _fsp--;
            	                    if (failed) return retval;
            	                    if ( backtracking==0 ) stream_arguments.add(arguments450.getTree());

            	                    // AST REWRITE
            	                    // elements: postfixedExpression, genericTypeArgumentListSimplified, arguments
            	                    // token labels: 
            	                    // rule labels: retval
            	                    // token list labels: 
            	                    // rule list labels: 
            	                    if ( backtracking==0 ) {
            	                    retval.tree = root_0;
            	                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            	                    root_0 = (CommonTree)adaptor.nil();
            	                    // 968:53: -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
            	                    {
            	                        // /home/bigben/Desktop/Java.g:968:57: ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
            	                        {
            	                        CommonTree root_1 = (CommonTree)adaptor.nil();
            	                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

            	                        adaptor.addChild(root_1, stream_retval.next());
            	                        // /home/bigben/Desktop/Java.g:968:92: ( genericTypeArgumentListSimplified )?
            	                        if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
            	                            adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.next());

            	                        }
            	                        stream_genericTypeArgumentListSimplified.reset();
            	                        adaptor.addChild(root_1, stream_arguments.next());

            	                        adaptor.addChild(root_0, root_1);
            	                        }

            	                    }

            	                    }

            	                    }
            	                    break;

            	            }


            	            }
            	            break;
            	        case 2 :
            	            // /home/bigben/Desktop/Java.g:970:17: THIS
            	            {
            	            THIS451=(Token)input.LT(1);
            	            match(input,THIS,FOLLOW_THIS_in_postfixedExpression12188); if (failed) return retval;
            	            if ( backtracking==0 ) stream_THIS.add(THIS451);


            	            // AST REWRITE
            	            // elements: postfixedExpression, DOT, THIS
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            if ( backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 970:53: -> ^( DOT $postfixedExpression THIS )
            	            {
            	                // /home/bigben/Desktop/Java.g:970:57: ^( DOT $postfixedExpression THIS )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.next(), root_1);

            	                adaptor.addChild(root_1, stream_retval.next());
            	                adaptor.addChild(root_1, stream_THIS.next());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            }

            	            }
            	            break;
            	        case 3 :
            	            // /home/bigben/Desktop/Java.g:971:17: Super= SUPER arguments
            	            {
            	            Super=(Token)input.LT(1);
            	            match(input,SUPER,FOLLOW_SUPER_in_postfixedExpression12251); if (failed) return retval;
            	            if ( backtracking==0 ) stream_SUPER.add(Super);

            	            pushFollow(FOLLOW_arguments_in_postfixedExpression12253);
            	            arguments452=arguments();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) stream_arguments.add(arguments452.getTree());

            	            // AST REWRITE
            	            // elements: postfixedExpression, arguments
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            if ( backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 971:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments )
            	            {
            	                // /home/bigben/Desktop/Java.g:971:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(SUPER_CONSTRUCTOR_CALL, Super,  "SUPER_CONSTRUCTOR_CALL"), root_1);

            	                adaptor.addChild(root_1, stream_retval.next());
            	                adaptor.addChild(root_1, stream_arguments.next());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            }

            	            }
            	            break;
            	        case 4 :
            	            // /home/bigben/Desktop/Java.g:972:17: ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )?
            	            {
            	            // /home/bigben/Desktop/Java.g:972:17: ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) )
            	            // /home/bigben/Desktop/Java.g:972:21: SUPER innerDot= DOT IDENT
            	            {
            	            SUPER453=(Token)input.LT(1);
            	            match(input,SUPER,FOLLOW_SUPER_in_postfixedExpression12306); if (failed) return retval;
            	            if ( backtracking==0 ) stream_SUPER.add(SUPER453);

            	            innerDot=(Token)input.LT(1);
            	            match(input,DOT,FOLLOW_DOT_in_postfixedExpression12310); if (failed) return retval;
            	            if ( backtracking==0 ) stream_DOT.add(innerDot);

            	            IDENT454=(Token)input.LT(1);
            	            match(input,IDENT,FOLLOW_IDENT_in_postfixedExpression12312); if (failed) return retval;
            	            if ( backtracking==0 ) stream_IDENT.add(IDENT454);


            	            // AST REWRITE
            	            // elements: postfixedExpression, innerDot, IDENT, SUPER, outerDot
            	            // token labels: outerDot, innerDot
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            if ( backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleTokenStream stream_outerDot=new RewriteRuleTokenStream(adaptor,"token outerDot",outerDot);
            	            RewriteRuleTokenStream stream_innerDot=new RewriteRuleTokenStream(adaptor,"token innerDot",innerDot);
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 972:53: -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT )
            	            {
            	                // /home/bigben/Desktop/Java.g:972:57: ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_innerDot.next(), root_1);

            	                // /home/bigben/Desktop/Java.g:972:69: ^( $outerDot $postfixedExpression SUPER )
            	                {
            	                CommonTree root_2 = (CommonTree)adaptor.nil();
            	                root_2 = (CommonTree)adaptor.becomeRoot(stream_outerDot.next(), root_2);

            	                adaptor.addChild(root_2, stream_retval.next());
            	                adaptor.addChild(root_2, stream_SUPER.next());

            	                adaptor.addChild(root_1, root_2);
            	                }
            	                adaptor.addChild(root_1, stream_IDENT.next());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            }

            	            }

            	            // /home/bigben/Desktop/Java.g:974:17: ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )?
            	            int alt130=2;
            	            int LA130_0 = input.LA(1);

            	            if ( (LA130_0==LPAREN) ) {
            	                alt130=1;
            	            }
            	            switch (alt130) {
            	                case 1 :
            	                    // /home/bigben/Desktop/Java.g:974:21: arguments
            	                    {
            	                    pushFollow(FOLLOW_arguments_in_postfixedExpression12379);
            	                    arguments455=arguments();
            	                    _fsp--;
            	                    if (failed) return retval;
            	                    if ( backtracking==0 ) stream_arguments.add(arguments455.getTree());

            	                    // AST REWRITE
            	                    // elements: postfixedExpression, arguments
            	                    // token labels: 
            	                    // rule labels: retval
            	                    // token list labels: 
            	                    // rule list labels: 
            	                    if ( backtracking==0 ) {
            	                    retval.tree = root_0;
            	                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            	                    root_0 = (CommonTree)adaptor.nil();
            	                    // 974:53: -> ^( METHOD_CALL $postfixedExpression arguments )
            	                    {
            	                        // /home/bigben/Desktop/Java.g:974:57: ^( METHOD_CALL $postfixedExpression arguments )
            	                        {
            	                        CommonTree root_1 = (CommonTree)adaptor.nil();
            	                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

            	                        adaptor.addChild(root_1, stream_retval.next());
            	                        adaptor.addChild(root_1, stream_arguments.next());

            	                        adaptor.addChild(root_0, root_1);
            	                        }

            	                    }

            	                    }

            	                    }
            	                    break;

            	            }


            	            }
            	            break;
            	        case 5 :
            	            // /home/bigben/Desktop/Java.g:976:17: innerNewExpression
            	            {
            	            pushFollow(FOLLOW_innerNewExpression_in_postfixedExpression12450);
            	            innerNewExpression456=innerNewExpression();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) stream_innerNewExpression.add(innerNewExpression456.getTree());

            	            // AST REWRITE
            	            // elements: innerNewExpression, DOT, postfixedExpression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            if ( backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            	            root_0 = (CommonTree)adaptor.nil();
            	            // 976:53: -> ^( DOT $postfixedExpression innerNewExpression )
            	            {
            	                // /home/bigben/Desktop/Java.g:976:57: ^( DOT $postfixedExpression innerNewExpression )
            	                {
            	                CommonTree root_1 = (CommonTree)adaptor.nil();
            	                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.next(), root_1);

            	                adaptor.addChild(root_1, stream_retval.next());
            	                adaptor.addChild(root_1, stream_innerNewExpression.next());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 2 :
            	    // /home/bigben/Desktop/Java.g:978:13: LBRACK expression RBRACK
            	    {
            	    LBRACK457=(Token)input.LT(1);
            	    match(input,LBRACK,FOLLOW_LBRACK_in_postfixedExpression12507); if (failed) return retval;
            	    if ( backtracking==0 ) stream_LBRACK.add(LBRACK457);

            	    pushFollow(FOLLOW_expression_in_postfixedExpression12509);
            	    expression458=expression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_expression.add(expression458.getTree());
            	    RBRACK459=(Token)input.LT(1);
            	    match(input,RBRACK,FOLLOW_RBRACK_in_postfixedExpression12511); if (failed) return retval;
            	    if ( backtracking==0 ) stream_RBRACK.add(RBRACK459);


            	    // AST REWRITE
            	    // elements: expression, postfixedExpression
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    if ( backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 978:53: -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression )
            	    {
            	        // /home/bigben/Desktop/Java.g:978:57: ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression )
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(ARRAY_ELEMENT_ACCESS, "ARRAY_ELEMENT_ACCESS"), root_1);

            	        adaptor.addChild(root_1, stream_retval.next());
            	        adaptor.addChild(root_1, stream_expression.next());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    }

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);

            // /home/bigben/Desktop/Java.g:981:9: ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?
            int alt133=3;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==INC) ) {
                alt133=1;
            }
            else if ( (LA133_0==DEC) ) {
                alt133=2;
            }
            switch (alt133) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:981:13: INC
                    {
                    INC460=(Token)input.LT(1);
                    match(input,INC,FOLLOW_INC_in_postfixedExpression12572); if (failed) return retval;
                    if ( backtracking==0 ) stream_INC.add(INC460);


                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 981:17: -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression)
                    {
                        // /home/bigben/Desktop/Java.g:981:20: ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(POST_INC, INC460,  "POST_INC"), root_1);

                        adaptor.addChild(root_1, stream_retval.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:982:13: DEC
                    {
                    DEC461=(Token)input.LT(1);
                    match(input,DEC,FOLLOW_DEC_in_postfixedExpression12596); if (failed) return retval;
                    if ( backtracking==0 ) stream_DEC.add(DEC461);


                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 982:17: -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression)
                    {
                        // /home/bigben/Desktop/Java.g:982:20: ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(POST_DEC, DEC461,  "POST_DEC"), root_1);

                        adaptor.addChild(root_1, stream_retval.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 104, postfixedExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end postfixedExpression

    public static class primaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start primaryExpression
    // /home/bigben/Desktop/Java.g:986:1: primaryExpression : ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) );
    public final primaryExpression_return primaryExpression() throws RecognitionException {
        primaryExpression_return retval = new primaryExpression_return();
        retval.start = input.LT(1);
        int primaryExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SUPER467=null;
        Token DOT469=null;
        Token IDENT470=null;
        Token IDENT472=null;
        Token THIS474=null;
        Token THIS476=null;
        Token SUPER478=null;
        Token SUPER480=null;
        Token DOT481=null;
        Token IDENT482=null;
        Token DOT486=null;
        Token CLASS487=null;
        Token VOID488=null;
        Token DOT489=null;
        Token CLASS490=null;
        parenthesizedExpression_return parenthesizedExpression462 = null;

        literal_return literal463 = null;

        newExpression_return newExpression464 = null;

        qualifiedIdentExpression_return qualifiedIdentExpression465 = null;

        genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified466 = null;

        arguments_return arguments468 = null;

        arguments_return arguments471 = null;

        arguments_return arguments473 = null;

        arguments_return arguments475 = null;

        arguments_return arguments477 = null;

        arguments_return arguments479 = null;

        arguments_return arguments483 = null;

        primitiveType_return primitiveType484 = null;

        arrayDeclarator_return arrayDeclarator485 = null;


        CommonTree SUPER467_tree=null;
        CommonTree DOT469_tree=null;
        CommonTree IDENT470_tree=null;
        CommonTree IDENT472_tree=null;
        CommonTree THIS474_tree=null;
        CommonTree THIS476_tree=null;
        CommonTree SUPER478_tree=null;
        CommonTree SUPER480_tree=null;
        CommonTree DOT481_tree=null;
        CommonTree IDENT482_tree=null;
        CommonTree DOT486_tree=null;
        CommonTree CLASS487_tree=null;
        CommonTree VOID488_tree=null;
        CommonTree DOT489_tree=null;
        CommonTree CLASS490_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // /home/bigben/Desktop/Java.g:987:5: ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) )
            int alt139=10;
            switch ( input.LA(1) ) {
            case LPAREN:
                {
                alt139=1;
                }
                break;
            case FALSE:
            case NULL:
            case TRUE:
            case HEX_LITERAL:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                {
                alt139=2;
                }
                break;
            case NEW:
                {
                alt139=3;
                }
                break;
            case IDENT:
                {
                alt139=4;
                }
                break;
            case LESS_THAN:
                {
                alt139=5;
                }
                break;
            case THIS:
                {
                alt139=6;
                }
                break;
            case SUPER:
                {
                int LA139_7 = input.LA(2);

                if ( (LA139_7==DOT) ) {
                    alt139=8;
                }
                else if ( (LA139_7==LPAREN) ) {
                    alt139=7;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("986:1: primaryExpression : ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) );", 139, 7, input);

                    throw nvae;
                }
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                alt139=9;
                }
                break;
            case VOID:
                {
                alt139=10;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("986:1: primaryExpression : ( parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) );", 139, 0, input);

                throw nvae;
            }

            switch (alt139) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:987:9: parenthesizedExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_parenthesizedExpression_in_primaryExpression12644);
                    parenthesizedExpression462=parenthesizedExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, parenthesizedExpression462.getTree());

                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:988:9: literal
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primaryExpression12654);
                    literal463=literal();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, literal463.getTree());

                    }
                    break;
                case 3 :
                    // /home/bigben/Desktop/Java.g:989:9: newExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_newExpression_in_primaryExpression12664);
                    newExpression464=newExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, newExpression464.getTree());

                    }
                    break;
                case 4 :
                    // /home/bigben/Desktop/Java.g:990:9: qualifiedIdentExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_qualifiedIdentExpression_in_primaryExpression12674);
                    qualifiedIdentExpression465=qualifiedIdentExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, qualifiedIdentExpression465.getTree());

                    }
                    break;
                case 5 :
                    // /home/bigben/Desktop/Java.g:991:9: genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_primaryExpression12684);
                    genericTypeArgumentListSimplified466=genericTypeArgumentListSimplified();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified466.getTree());
                    // /home/bigben/Desktop/Java.g:992:9: ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
                    int alt135=3;
                    switch ( input.LA(1) ) {
                    case SUPER:
                        {
                        alt135=1;
                        }
                        break;
                    case IDENT:
                        {
                        alt135=2;
                        }
                        break;
                    case THIS:
                        {
                        alt135=3;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("992:9: ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )", 135, 0, input);

                        throw nvae;
                    }

                    switch (alt135) {
                        case 1 :
                            // /home/bigben/Desktop/Java.g:992:13: SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )
                            {
                            SUPER467=(Token)input.LT(1);
                            match(input,SUPER,FOLLOW_SUPER_in_primaryExpression12699); if (failed) return retval;
                            if ( backtracking==0 ) stream_SUPER.add(SUPER467);

                            // /home/bigben/Desktop/Java.g:993:13: ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )
                            int alt134=2;
                            int LA134_0 = input.LA(1);

                            if ( (LA134_0==LPAREN) ) {
                                alt134=1;
                            }
                            else if ( (LA134_0==DOT) ) {
                                alt134=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("993:13: ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )", 134, 0, input);

                                throw nvae;
                            }
                            switch (alt134) {
                                case 1 :
                                    // /home/bigben/Desktop/Java.g:993:17: arguments
                                    {
                                    pushFollow(FOLLOW_arguments_in_primaryExpression12717);
                                    arguments468=arguments();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_arguments.add(arguments468.getTree());

                                    // AST REWRITE
                                    // elements: genericTypeArgumentListSimplified, arguments
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 993:57: -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                    {
                                        // /home/bigben/Desktop/Java.g:993:61: ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(SUPER_CONSTRUCTOR_CALL, SUPER467,  "SUPER_CONSTRUCTOR_CALL"), root_1);

                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.next());
                                        adaptor.addChild(root_1, stream_arguments.next());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    }

                                    }
                                    break;
                                case 2 :
                                    // /home/bigben/Desktop/Java.g:994:17: DOT IDENT arguments
                                    {
                                    DOT469=(Token)input.LT(1);
                                    match(input,DOT,FOLLOW_DOT_in_primaryExpression12777); if (failed) return retval;
                                    if ( backtracking==0 ) stream_DOT.add(DOT469);

                                    IDENT470=(Token)input.LT(1);
                                    match(input,IDENT,FOLLOW_IDENT_in_primaryExpression12779); if (failed) return retval;
                                    if ( backtracking==0 ) stream_IDENT.add(IDENT470);

                                    pushFollow(FOLLOW_arguments_in_primaryExpression12781);
                                    arguments471=arguments();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_arguments.add(arguments471.getTree());

                                    // AST REWRITE
                                    // elements: IDENT, arguments, DOT, genericTypeArgumentListSimplified, SUPER
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 994:57: -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments )
                                    {
                                        // /home/bigben/Desktop/Java.g:994:61: ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                        // /home/bigben/Desktop/Java.g:994:75: ^( DOT SUPER IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot(stream_DOT.next(), root_2);

                                        adaptor.addChild(root_2, stream_SUPER.next());
                                        adaptor.addChild(root_2, stream_IDENT.next());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.next());
                                        adaptor.addChild(root_1, stream_arguments.next());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    }

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // /home/bigben/Desktop/Java.g:996:13: IDENT arguments
                            {
                            IDENT472=(Token)input.LT(1);
                            match(input,IDENT,FOLLOW_IDENT_in_primaryExpression12848); if (failed) return retval;
                            if ( backtracking==0 ) stream_IDENT.add(IDENT472);

                            pushFollow(FOLLOW_arguments_in_primaryExpression12850);
                            arguments473=arguments();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_arguments.add(arguments473.getTree());

                            // AST REWRITE
                            // elements: IDENT, genericTypeArgumentListSimplified, arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 996:57: -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments )
                            {
                                // /home/bigben/Desktop/Java.g:996:61: ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                adaptor.addChild(root_1, stream_IDENT.next());
                                adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.next());
                                adaptor.addChild(root_1, stream_arguments.next());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;
                        case 3 :
                            // /home/bigben/Desktop/Java.g:997:13: THIS arguments
                            {
                            THIS474=(Token)input.LT(1);
                            match(input,THIS,FOLLOW_THIS_in_primaryExpression12905); if (failed) return retval;
                            if ( backtracking==0 ) stream_THIS.add(THIS474);

                            pushFollow(FOLLOW_arguments_in_primaryExpression12907);
                            arguments475=arguments();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_arguments.add(arguments475.getTree());

                            // AST REWRITE
                            // elements: arguments, genericTypeArgumentListSimplified
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 997:57: -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                            {
                                // /home/bigben/Desktop/Java.g:997:61: ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(THIS_CONSTRUCTOR_CALL, THIS474,  "THIS_CONSTRUCTOR_CALL"), root_1);

                                adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.next());
                                adaptor.addChild(root_1, stream_arguments.next());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // /home/bigben/Desktop/Java.g:999:9: ( THIS -> THIS ) ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?
                    {
                    // /home/bigben/Desktop/Java.g:999:9: ( THIS -> THIS )
                    // /home/bigben/Desktop/Java.g:999:13: THIS
                    {
                    THIS476=(Token)input.LT(1);
                    match(input,THIS,FOLLOW_THIS_in_primaryExpression12972); if (failed) return retval;
                    if ( backtracking==0 ) stream_THIS.add(THIS476);


                    // AST REWRITE
                    // elements: THIS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 999:57: -> THIS
                    {
                        adaptor.addChild(root_0, stream_THIS.next());

                    }

                    }

                    }

                    // /home/bigben/Desktop/Java.g:1001:9: ( arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?
                    int alt136=2;
                    int LA136_0 = input.LA(1);

                    if ( (LA136_0==LPAREN) ) {
                        alt136=1;
                    }
                    switch (alt136) {
                        case 1 :
                            // /home/bigben/Desktop/Java.g:1001:13: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primaryExpression13040);
                            arguments477=arguments();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_arguments.add(arguments477.getTree());

                            // AST REWRITE
                            // elements: arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1001:57: -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments )
                            {
                                // /home/bigben/Desktop/Java.g:1001:61: ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(THIS_CONSTRUCTOR_CALL, THIS476,  "THIS_CONSTRUCTOR_CALL"), root_1);

                                adaptor.addChild(root_1, stream_arguments.next());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // /home/bigben/Desktop/Java.g:1003:9: SUPER arguments
                    {
                    SUPER478=(Token)input.LT(1);
                    match(input,SUPER,FOLLOW_SUPER_in_primaryExpression13105); if (failed) return retval;
                    if ( backtracking==0 ) stream_SUPER.add(SUPER478);

                    pushFollow(FOLLOW_arguments_in_primaryExpression13107);
                    arguments479=arguments();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_arguments.add(arguments479.getTree());

                    // AST REWRITE
                    // elements: arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1003:57: -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments )
                    {
                        // /home/bigben/Desktop/Java.g:1003:61: ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(SUPER_CONSTRUCTOR_CALL, SUPER478,  "SUPER_CONSTRUCTOR_CALL"), root_1);

                        adaptor.addChild(root_1, stream_arguments.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 8 :
                    // /home/bigben/Desktop/Java.g:1004:9: ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
                    {
                    // /home/bigben/Desktop/Java.g:1004:9: ( SUPER DOT IDENT )
                    // /home/bigben/Desktop/Java.g:1004:13: SUPER DOT IDENT
                    {
                    SUPER480=(Token)input.LT(1);
                    match(input,SUPER,FOLLOW_SUPER_in_primaryExpression13163); if (failed) return retval;
                    if ( backtracking==0 ) stream_SUPER.add(SUPER480);

                    DOT481=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_primaryExpression13165); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOT.add(DOT481);

                    IDENT482=(Token)input.LT(1);
                    match(input,IDENT,FOLLOW_IDENT_in_primaryExpression13167); if (failed) return retval;
                    if ( backtracking==0 ) stream_IDENT.add(IDENT482);


                    }

                    // /home/bigben/Desktop/Java.g:1006:9: ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==LPAREN) ) {
                        alt137=1;
                    }
                    else if ( (LA137_0==EOF||(LA137_0>=AND && LA137_0<=ASSIGN)||(LA137_0>=BIT_SHIFT_RIGHT && LA137_0<=DOT)||(LA137_0>=EQUAL && LA137_0<=LBRACK)||(LA137_0>=LESS_OR_EQUAL && LA137_0<=LOGICAL_AND)||LA137_0==LOGICAL_OR||(LA137_0>=MINUS && LA137_0<=MOD_ASSIGN)||(LA137_0>=NOT_EQUAL && LA137_0<=XOR_ASSIGN)||LA137_0==INSTANCEOF) ) {
                        alt137=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1006:9: ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )", 137, 0, input);

                        throw nvae;
                    }
                    switch (alt137) {
                        case 1 :
                            // /home/bigben/Desktop/Java.g:1006:13: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primaryExpression13191);
                            arguments483=arguments();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_arguments.add(arguments483.getTree());

                            // AST REWRITE
                            // elements: IDENT, SUPER, arguments, DOT
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1006:57: -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments )
                            {
                                // /home/bigben/Desktop/Java.g:1006:61: ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                // /home/bigben/Desktop/Java.g:1006:75: ^( DOT SUPER IDENT )
                                {
                                CommonTree root_2 = (CommonTree)adaptor.nil();
                                root_2 = (CommonTree)adaptor.becomeRoot(stream_DOT.next(), root_2);

                                adaptor.addChild(root_2, stream_SUPER.next());
                                adaptor.addChild(root_2, stream_IDENT.next());

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_arguments.next());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;
                        case 2 :
                            // /home/bigben/Desktop/Java.g:1007:57: 
                            {

                            // AST REWRITE
                            // elements: DOT, IDENT, SUPER
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1007:57: -> ^( DOT SUPER IDENT )
                            {
                                // /home/bigben/Desktop/Java.g:1007:61: ^( DOT SUPER IDENT )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.next(), root_1);

                                adaptor.addChild(root_1, stream_SUPER.next());
                                adaptor.addChild(root_1, stream_IDENT.next());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // /home/bigben/Desktop/Java.g:1009:9: ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS
                    {
                    // /home/bigben/Desktop/Java.g:1009:9: ( primitiveType -> primitiveType )
                    // /home/bigben/Desktop/Java.g:1009:13: primitiveType
                    {
                    pushFollow(FOLLOW_primitiveType_in_primaryExpression13333);
                    primitiveType484=primitiveType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_primitiveType.add(primitiveType484.getTree());

                    // AST REWRITE
                    // elements: primitiveType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1009:57: -> primitiveType
                    {
                        adaptor.addChild(root_0, stream_primitiveType.next());

                    }

                    }

                    }

                    // /home/bigben/Desktop/Java.g:1011:9: ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )*
                    loop138:
                    do {
                        int alt138=2;
                        int LA138_0 = input.LA(1);

                        if ( (LA138_0==LBRACK) ) {
                            alt138=1;
                        }


                        switch (alt138) {
                    	case 1 :
                    	    // /home/bigben/Desktop/Java.g:1011:13: arrayDeclarator
                    	    {
                    	    pushFollow(FOLLOW_arrayDeclarator_in_primaryExpression13392);
                    	    arrayDeclarator485=arrayDeclarator();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_arrayDeclarator.add(arrayDeclarator485.getTree());

                    	    // AST REWRITE
                    	    // elements: arrayDeclarator, primaryExpression
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    if ( backtracking==0 ) {
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    	    root_0 = (CommonTree)adaptor.nil();
                    	    // 1011:57: -> ^( arrayDeclarator $primaryExpression)
                    	    {
                    	        // /home/bigben/Desktop/Java.g:1011:61: ^( arrayDeclarator $primaryExpression)
                    	        {
                    	        CommonTree root_1 = (CommonTree)adaptor.nil();
                    	        root_1 = (CommonTree)adaptor.becomeRoot(stream_arrayDeclarator.nextNode(), root_1);

                    	        adaptor.addChild(root_1, stream_retval.next());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop138;
                        }
                    } while (true);

                    DOT486=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_primaryExpression13455); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOT.add(DOT486);

                    CLASS487=(Token)input.LT(1);
                    match(input,CLASS,FOLLOW_CLASS_in_primaryExpression13457); if (failed) return retval;
                    if ( backtracking==0 ) stream_CLASS.add(CLASS487);


                    // AST REWRITE
                    // elements: CLASS, primaryExpression, DOT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1013:57: -> ^( DOT $primaryExpression CLASS )
                    {
                        // /home/bigben/Desktop/Java.g:1013:61: ^( DOT $primaryExpression CLASS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.next(), root_1);

                        adaptor.addChild(root_1, stream_retval.next());
                        adaptor.addChild(root_1, stream_CLASS.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 10 :
                    // /home/bigben/Desktop/Java.g:1014:9: VOID DOT CLASS
                    {
                    VOID488=(Token)input.LT(1);
                    match(input,VOID,FOLLOW_VOID_in_primaryExpression13517); if (failed) return retval;
                    if ( backtracking==0 ) stream_VOID.add(VOID488);

                    DOT489=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_primaryExpression13519); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOT.add(DOT489);

                    CLASS490=(Token)input.LT(1);
                    match(input,CLASS,FOLLOW_CLASS_in_primaryExpression13521); if (failed) return retval;
                    if ( backtracking==0 ) stream_CLASS.add(CLASS490);


                    // AST REWRITE
                    // elements: DOT, CLASS, VOID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1014:57: -> ^( DOT VOID CLASS )
                    {
                        // /home/bigben/Desktop/Java.g:1014:61: ^( DOT VOID CLASS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.next(), root_1);

                        adaptor.addChild(root_1, stream_VOID.next());
                        adaptor.addChild(root_1, stream_CLASS.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 105, primaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end primaryExpression

    public static class qualifiedIdentExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start qualifiedIdentExpression
    // /home/bigben/Desktop/Java.g:1017:1: qualifiedIdentExpression : ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )? ;
    public final qualifiedIdentExpression_return qualifiedIdentExpression() throws RecognitionException {
        qualifiedIdentExpression_return retval = new qualifiedIdentExpression_return();
        retval.start = input.LT(1);
        int qualifiedIdentExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token outerDot=null;
        Token Super=null;
        Token innerDot=null;
        Token DOT493=null;
        Token CLASS494=null;
        Token CLASS496=null;
        Token SUPER499=null;
        Token IDENT500=null;
        Token IDENT502=null;
        Token THIS504=null;
        qualifiedIdentifier_return qualifiedIdentifier491 = null;

        arrayDeclarator_return arrayDeclarator492 = null;

        arguments_return arguments495 = null;

        genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified497 = null;

        arguments_return arguments498 = null;

        arguments_return arguments501 = null;

        arguments_return arguments503 = null;

        arguments_return arguments505 = null;

        innerNewExpression_return innerNewExpression506 = null;


        CommonTree outerDot_tree=null;
        CommonTree Super_tree=null;
        CommonTree innerDot_tree=null;
        CommonTree DOT493_tree=null;
        CommonTree CLASS494_tree=null;
        CommonTree CLASS496_tree=null;
        CommonTree SUPER499_tree=null;
        CommonTree IDENT500_tree=null;
        CommonTree IDENT502_tree=null;
        CommonTree THIS504_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_arrayDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule arrayDeclarator");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_qualifiedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentifier");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        RewriteRuleSubtreeStream stream_innerNewExpression=new RewriteRuleSubtreeStream(adaptor,"rule innerNewExpression");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // /home/bigben/Desktop/Java.g:1019:5: ( ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )? )
            // /home/bigben/Desktop/Java.g:1019:9: ( qualifiedIdentifier -> qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
            {
            // /home/bigben/Desktop/Java.g:1019:9: ( qualifiedIdentifier -> qualifiedIdentifier )
            // /home/bigben/Desktop/Java.g:1019:13: qualifiedIdentifier
            {
            pushFollow(FOLLOW_qualifiedIdentifier_in_qualifiedIdentExpression13601);
            qualifiedIdentifier491=qualifiedIdentifier();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_qualifiedIdentifier.add(qualifiedIdentifier491.getTree());

            // AST REWRITE
            // elements: qualifiedIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1019:61: -> qualifiedIdentifier
            {
                adaptor.addChild(root_0, stream_qualifiedIdentifier.next());

            }

            }

            }

            // /home/bigben/Desktop/Java.g:1022:9: ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
            int alt143=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    int LA143_1 = input.LA(2);

                    if ( (synpred218()) ) {
                        alt143=1;
                    }
                    }
                    break;
                case LPAREN:
                    {
                    alt143=2;
                    }
                    break;
                case DOT:
                    {
                    int LA143_3 = input.LA(2);

                    if ( (synpred226()) ) {
                        alt143=3;
                    }
                    }
                    break;
            }

            switch (alt143) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:1022:13: ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) )
                    {
                    // /home/bigben/Desktop/Java.g:1022:13: ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+
                    int cnt140=0;
                    loop140:
                    do {
                        int alt140=2;
                        int LA140_0 = input.LA(1);

                        if ( (LA140_0==LBRACK) ) {
                            alt140=1;
                        }


                        switch (alt140) {
                    	case 1 :
                    	    // /home/bigben/Desktop/Java.g:1022:17: arrayDeclarator
                    	    {
                    	    pushFollow(FOLLOW_arrayDeclarator_in_qualifiedIdentExpression13671);
                    	    arrayDeclarator492=arrayDeclarator();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_arrayDeclarator.add(arrayDeclarator492.getTree());

                    	    // AST REWRITE
                    	    // elements: qualifiedIdentExpression, arrayDeclarator
                    	    // token labels: 
                    	    // rule labels: retval
                    	    // token list labels: 
                    	    // rule list labels: 
                    	    if ( backtracking==0 ) {
                    	    retval.tree = root_0;
                    	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    	    root_0 = (CommonTree)adaptor.nil();
                    	    // 1022:57: -> ^( arrayDeclarator $qualifiedIdentExpression)
                    	    {
                    	        // /home/bigben/Desktop/Java.g:1022:61: ^( arrayDeclarator $qualifiedIdentExpression)
                    	        {
                    	        CommonTree root_1 = (CommonTree)adaptor.nil();
                    	        root_1 = (CommonTree)adaptor.becomeRoot(stream_arrayDeclarator.nextNode(), root_1);

                    	        adaptor.addChild(root_1, stream_retval.next());

                    	        adaptor.addChild(root_0, root_1);
                    	        }

                    	    }

                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt140 >= 1 ) break loop140;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(140, input);
                                throw eee;
                        }
                        cnt140++;
                    } while (true);

                    // /home/bigben/Desktop/Java.g:1024:13: ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) )
                    // /home/bigben/Desktop/Java.g:1024:17: DOT CLASS
                    {
                    DOT493=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_qualifiedIdentExpression13739); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOT.add(DOT493);

                    CLASS494=(Token)input.LT(1);
                    match(input,CLASS,FOLLOW_CLASS_in_qualifiedIdentExpression13741); if (failed) return retval;
                    if ( backtracking==0 ) stream_CLASS.add(CLASS494);


                    // AST REWRITE
                    // elements: DOT, qualifiedIdentExpression, CLASS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1024:57: -> ^( DOT $qualifiedIdentExpression CLASS )
                    {
                        // /home/bigben/Desktop/Java.g:1024:61: ^( DOT $qualifiedIdentExpression CLASS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.next(), root_1);

                        adaptor.addChild(root_1, stream_retval.next());
                        adaptor.addChild(root_1, stream_CLASS.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }


                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:1026:13: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression13811);
                    arguments495=arguments();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_arguments.add(arguments495.getTree());

                    // AST REWRITE
                    // elements: qualifiedIdentifier, arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1026:57: -> ^( METHOD_CALL qualifiedIdentifier arguments )
                    {
                        // /home/bigben/Desktop/Java.g:1026:61: ^( METHOD_CALL qualifiedIdentifier arguments )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                        adaptor.addChild(root_1, stream_qualifiedIdentifier.next());
                        adaptor.addChild(root_1, stream_arguments.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 3 :
                    // /home/bigben/Desktop/Java.g:1027:13: outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
                    {
                    outerDot=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_qualifiedIdentExpression13872); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOT.add(outerDot);

                    // /home/bigben/Desktop/Java.g:1028:13: ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
                    int alt142=5;
                    switch ( input.LA(1) ) {
                    case CLASS:
                        {
                        alt142=1;
                        }
                        break;
                    case LESS_THAN:
                        {
                        alt142=2;
                        }
                        break;
                    case THIS:
                        {
                        alt142=3;
                        }
                        break;
                    case SUPER:
                        {
                        alt142=4;
                        }
                        break;
                    case NEW:
                        {
                        alt142=5;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1028:13: ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )", 142, 0, input);

                        throw nvae;
                    }

                    switch (alt142) {
                        case 1 :
                            // /home/bigben/Desktop/Java.g:1028:17: CLASS
                            {
                            CLASS496=(Token)input.LT(1);
                            match(input,CLASS,FOLLOW_CLASS_in_qualifiedIdentExpression13890); if (failed) return retval;
                            if ( backtracking==0 ) stream_CLASS.add(CLASS496);


                            // AST REWRITE
                            // elements: qualifiedIdentifier, DOT, CLASS
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1028:57: -> ^( DOT qualifiedIdentifier CLASS )
                            {
                                // /home/bigben/Desktop/Java.g:1028:61: ^( DOT qualifiedIdentifier CLASS )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.next(), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.next());
                                adaptor.addChild(root_1, stream_CLASS.next());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;
                        case 2 :
                            // /home/bigben/Desktop/Java.g:1029:17: genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )
                            {
                            pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_qualifiedIdentExpression13953);
                            genericTypeArgumentListSimplified497=genericTypeArgumentListSimplified();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified497.getTree());
                            // /home/bigben/Desktop/Java.g:1030:17: (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )
                            int alt141=3;
                            int LA141_0 = input.LA(1);

                            if ( (LA141_0==SUPER) ) {
                                int LA141_1 = input.LA(2);

                                if ( (LA141_1==DOT) ) {
                                    alt141=2;
                                }
                                else if ( (LA141_1==LPAREN) ) {
                                    alt141=1;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("1030:17: (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )", 141, 1, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA141_0==IDENT) ) {
                                alt141=3;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("1030:17: (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )", 141, 0, input);

                                throw nvae;
                            }
                            switch (alt141) {
                                case 1 :
                                    // /home/bigben/Desktop/Java.g:1030:21: Super= SUPER arguments
                                    {
                                    Super=(Token)input.LT(1);
                                    match(input,SUPER,FOLLOW_SUPER_in_qualifiedIdentExpression13978); if (failed) return retval;
                                    if ( backtracking==0 ) stream_SUPER.add(Super);

                                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression13980);
                                    arguments498=arguments();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_arguments.add(arguments498.getTree());

                                    // AST REWRITE
                                    // elements: arguments, genericTypeArgumentListSimplified, qualifiedIdentifier
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1030:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments )
                                    {
                                        // /home/bigben/Desktop/Java.g:1030:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(SUPER_CONSTRUCTOR_CALL, Super,  "SUPER_CONSTRUCTOR_CALL"), root_1);

                                        adaptor.addChild(root_1, stream_qualifiedIdentifier.next());
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.next());
                                        adaptor.addChild(root_1, stream_arguments.next());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    }

                                    }
                                    break;
                                case 2 :
                                    // /home/bigben/Desktop/Java.g:1031:21: SUPER innerDot= DOT IDENT arguments
                                    {
                                    SUPER499=(Token)input.LT(1);
                                    match(input,SUPER,FOLLOW_SUPER_in_qualifiedIdentExpression14030); if (failed) return retval;
                                    if ( backtracking==0 ) stream_SUPER.add(SUPER499);

                                    innerDot=(Token)input.LT(1);
                                    match(input,DOT,FOLLOW_DOT_in_qualifiedIdentExpression14034); if (failed) return retval;
                                    if ( backtracking==0 ) stream_DOT.add(innerDot);

                                    IDENT500=(Token)input.LT(1);
                                    match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentExpression14036); if (failed) return retval;
                                    if ( backtracking==0 ) stream_IDENT.add(IDENT500);

                                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14038);
                                    arguments501=arguments();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_arguments.add(arguments501.getTree());

                                    // AST REWRITE
                                    // elements: genericTypeArgumentListSimplified, IDENT, qualifiedIdentifier, innerDot, SUPER, outerDot, arguments
                                    // token labels: outerDot, innerDot
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleTokenStream stream_outerDot=new RewriteRuleTokenStream(adaptor,"token outerDot",outerDot);
                                    RewriteRuleTokenStream stream_innerDot=new RewriteRuleTokenStream(adaptor,"token innerDot",innerDot);
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1031:57: -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments )
                                    {
                                        // /home/bigben/Desktop/Java.g:1031:61: ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                        // /home/bigben/Desktop/Java.g:1031:75: ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot(stream_innerDot.next(), root_2);

                                        // /home/bigben/Desktop/Java.g:1031:87: ^( $outerDot qualifiedIdentifier SUPER )
                                        {
                                        CommonTree root_3 = (CommonTree)adaptor.nil();
                                        root_3 = (CommonTree)adaptor.becomeRoot(stream_outerDot.next(), root_3);

                                        adaptor.addChild(root_3, stream_qualifiedIdentifier.next());
                                        adaptor.addChild(root_3, stream_SUPER.next());

                                        adaptor.addChild(root_2, root_3);
                                        }
                                        adaptor.addChild(root_2, stream_IDENT.next());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.next());
                                        adaptor.addChild(root_1, stream_arguments.next());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    }

                                    }
                                    break;
                                case 3 :
                                    // /home/bigben/Desktop/Java.g:1032:21: IDENT arguments
                                    {
                                    IDENT502=(Token)input.LT(1);
                                    match(input,IDENT,FOLLOW_IDENT_in_qualifiedIdentExpression14088); if (failed) return retval;
                                    if ( backtracking==0 ) stream_IDENT.add(IDENT502);

                                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14090);
                                    arguments503=arguments();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_arguments.add(arguments503.getTree());

                                    // AST REWRITE
                                    // elements: DOT, qualifiedIdentifier, genericTypeArgumentListSimplified, IDENT, arguments
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1032:57: -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments )
                                    {
                                        // /home/bigben/Desktop/Java.g:1032:61: ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                        // /home/bigben/Desktop/Java.g:1032:75: ^( DOT qualifiedIdentifier IDENT )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot(stream_DOT.next(), root_2);

                                        adaptor.addChild(root_2, stream_qualifiedIdentifier.next());
                                        adaptor.addChild(root_2, stream_IDENT.next());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.next());
                                        adaptor.addChild(root_1, stream_arguments.next());

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    }

                                    }
                                    break;

                            }


                            }
                            break;
                        case 3 :
                            // /home/bigben/Desktop/Java.g:1034:17: THIS
                            {
                            THIS504=(Token)input.LT(1);
                            match(input,THIS,FOLLOW_THIS_in_qualifiedIdentExpression14165); if (failed) return retval;
                            if ( backtracking==0 ) stream_THIS.add(THIS504);


                            // AST REWRITE
                            // elements: THIS, DOT, qualifiedIdentifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1034:57: -> ^( DOT qualifiedIdentifier THIS )
                            {
                                // /home/bigben/Desktop/Java.g:1034:61: ^( DOT qualifiedIdentifier THIS )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.next(), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.next());
                                adaptor.addChild(root_1, stream_THIS.next());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;
                        case 4 :
                            // /home/bigben/Desktop/Java.g:1035:17: Super= SUPER arguments
                            {
                            Super=(Token)input.LT(1);
                            match(input,SUPER,FOLLOW_SUPER_in_qualifiedIdentExpression14231); if (failed) return retval;
                            if ( backtracking==0 ) stream_SUPER.add(Super);

                            pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14233);
                            arguments505=arguments();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_arguments.add(arguments505.getTree());

                            // AST REWRITE
                            // elements: arguments, qualifiedIdentifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1035:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
                            {
                                // /home/bigben/Desktop/Java.g:1035:61: ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(SUPER_CONSTRUCTOR_CALL, Super,  "SUPER_CONSTRUCTOR_CALL"), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.next());
                                adaptor.addChild(root_1, stream_arguments.next());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;
                        case 5 :
                            // /home/bigben/Desktop/Java.g:1036:17: innerNewExpression
                            {
                            pushFollow(FOLLOW_innerNewExpression_in_qualifiedIdentExpression14281);
                            innerNewExpression506=innerNewExpression();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_innerNewExpression.add(innerNewExpression506.getTree());

                            // AST REWRITE
                            // elements: innerNewExpression, qualifiedIdentifier, DOT
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1036:57: -> ^( DOT qualifiedIdentifier innerNewExpression )
                            {
                                // /home/bigben/Desktop/Java.g:1036:61: ^( DOT qualifiedIdentifier innerNewExpression )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.next(), root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.next());
                                adaptor.addChild(root_1, stream_innerNewExpression.next());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 106, qualifiedIdentExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end qualifiedIdentExpression

    public static class newExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start newExpression
    // /home/bigben/Desktop/Java.g:1041:1: newExpression : NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"CLASS_CONSTRUCTOR_CALL\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) ) ;
    public final newExpression_return newExpression() throws RecognitionException {
        newExpression_return retval = new newExpression_return();
        retval.start = input.LT(1);
        int newExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NEW507=null;
        primitiveType_return primitiveType508 = null;

        newArrayConstruction_return newArrayConstruction509 = null;

        genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified510 = null;

        qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified511 = null;

        newArrayConstruction_return newArrayConstruction512 = null;

        arguments_return arguments513 = null;

        classBody_return classBody514 = null;


        CommonTree NEW507_tree=null;
        RewriteRuleTokenStream stream_NEW=new RewriteRuleTokenStream(adaptor,"token NEW");
        RewriteRuleSubtreeStream stream_newArrayConstruction=new RewriteRuleSubtreeStream(adaptor,"rule newArrayConstruction");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedTypeIdentSimplified");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // /home/bigben/Desktop/Java.g:1042:5: ( NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"CLASS_CONSTRUCTOR_CALL\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) ) )
            // /home/bigben/Desktop/Java.g:1042:9: NEW ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"CLASS_CONSTRUCTOR_CALL\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) )
            {
            NEW507=(Token)input.LT(1);
            match(input,NEW,FOLLOW_NEW_in_newExpression14357); if (failed) return retval;
            if ( backtracking==0 ) stream_NEW.add(NEW507);

            // /home/bigben/Desktop/Java.g:1043:9: ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"CLASS_CONSTRUCTOR_CALL\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) )
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==BOOLEAN||LA147_0==BYTE||LA147_0==CHAR||LA147_0==DOUBLE||LA147_0==FLOAT||(LA147_0>=INT && LA147_0<=LONG)||LA147_0==SHORT) ) {
                alt147=1;
            }
            else if ( (LA147_0==LESS_THAN||LA147_0==IDENT) ) {
                alt147=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("1043:9: ( primitiveType newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"CLASS_CONSTRUCTOR_CALL\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) )", 147, 0, input);

                throw nvae;
            }
            switch (alt147) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:1043:13: primitiveType newArrayConstruction
                    {
                    pushFollow(FOLLOW_primitiveType_in_newExpression14373);
                    primitiveType508=primitiveType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_primitiveType.add(primitiveType508.getTree());
                    pushFollow(FOLLOW_newArrayConstruction_in_newExpression14375);
                    newArrayConstruction509=newArrayConstruction();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_newArrayConstruction.add(newArrayConstruction509.getTree());

                    // AST REWRITE
                    // elements: newArrayConstruction, primitiveType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1044:13: -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction )
                    {
                        // /home/bigben/Desktop/Java.g:1044:17: ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(STATIC_ARRAY_CREATOR, NEW507,  "STATIC_ARRAY_CREATOR"), root_1);

                        adaptor.addChild(root_1, stream_primitiveType.next());
                        adaptor.addChild(root_1, stream_newArrayConstruction.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:1045:13: ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"CLASS_CONSTRUCTOR_CALL\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) )
                    {
                    // /home/bigben/Desktop/Java.g:1045:13: ( genericTypeArgumentListSimplified )?
                    int alt144=2;
                    int LA144_0 = input.LA(1);

                    if ( (LA144_0==LESS_THAN) ) {
                        alt144=1;
                    }
                    switch (alt144) {
                        case 1 :
                            // /home/bigben/Desktop/Java.g:0:0: genericTypeArgumentListSimplified
                            {
                            pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_newExpression14419);
                            genericTypeArgumentListSimplified510=genericTypeArgumentListSimplified();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified510.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_qualifiedTypeIdentSimplified_in_newExpression14422);
                    qualifiedTypeIdentSimplified511=qualifiedTypeIdentSimplified();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_qualifiedTypeIdentSimplified.add(qualifiedTypeIdentSimplified511.getTree());
                    // /home/bigben/Desktop/Java.g:1046:13: ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"CLASS_CONSTRUCTOR_CALL\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) )
                    int alt146=2;
                    int LA146_0 = input.LA(1);

                    if ( (LA146_0==LBRACK) ) {
                        alt146=1;
                    }
                    else if ( (LA146_0==LPAREN) ) {
                        alt146=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("1046:13: ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"CLASS_CONSTRUCTOR_CALL\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? ) )", 146, 0, input);

                        throw nvae;
                    }
                    switch (alt146) {
                        case 1 :
                            // /home/bigben/Desktop/Java.g:1046:17: newArrayConstruction
                            {
                            pushFollow(FOLLOW_newArrayConstruction_in_newExpression14440);
                            newArrayConstruction512=newArrayConstruction();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_newArrayConstruction.add(newArrayConstruction512.getTree());

                            // AST REWRITE
                            // elements: genericTypeArgumentListSimplified, newArrayConstruction, qualifiedTypeIdentSimplified
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1047:17: -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction )
                            {
                                // /home/bigben/Desktop/Java.g:1047:21: ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(STATIC_ARRAY_CREATOR, NEW507,  "STATIC_ARRAY_CREATOR"), root_1);

                                // /home/bigben/Desktop/Java.g:1047:74: ( genericTypeArgumentListSimplified )?
                                if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
                                    adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.next());

                                }
                                stream_genericTypeArgumentListSimplified.reset();
                                adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.next());
                                adaptor.addChild(root_1, stream_newArrayConstruction.next());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;
                        case 2 :
                            // /home/bigben/Desktop/Java.g:1048:17: arguments ( classBody )?
                            {
                            pushFollow(FOLLOW_arguments_in_newExpression14505);
                            arguments513=arguments();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_arguments.add(arguments513.getTree());
                            // /home/bigben/Desktop/Java.g:1048:27: ( classBody )?
                            int alt145=2;
                            int LA145_0 = input.LA(1);

                            if ( (LA145_0==LCURLY) ) {
                                alt145=1;
                            }
                            switch (alt145) {
                                case 1 :
                                    // /home/bigben/Desktop/Java.g:0:0: classBody
                                    {
                                    pushFollow(FOLLOW_classBody_in_newExpression14507);
                                    classBody514=classBody();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_classBody.add(classBody514.getTree());

                                    }
                                    break;

                            }


                            // AST REWRITE
                            // elements: classBody, qualifiedTypeIdentSimplified, arguments, genericTypeArgumentListSimplified
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1049:17: -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"CLASS_CONSTRUCTOR_CALL\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? )
                            {
                                // /home/bigben/Desktop/Java.g:1049:21: ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"CLASS_CONSTRUCTOR_CALL\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(CLASS_CONSTRUCTOR_CALL, NEW507,  "CLASS_CONSTRUCTOR_CALL"), root_1);

                                // /home/bigben/Desktop/Java.g:1049:78: ( genericTypeArgumentListSimplified )?
                                if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
                                    adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.next());

                                }
                                stream_genericTypeArgumentListSimplified.reset();
                                adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.next());
                                adaptor.addChild(root_1, stream_arguments.next());
                                // /home/bigben/Desktop/Java.g:1049:152: ( classBody )?
                                if ( stream_classBody.hasNext() ) {
                                    adaptor.addChild(root_1, stream_classBody.next());

                                }
                                stream_classBody.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 107, newExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end newExpression

    public static class innerNewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start innerNewExpression
    // /home/bigben/Desktop/Java.g:1054:1: innerNewExpression : NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"CLASS_CONSTRUCTOR_CALL\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? ) ;
    public final innerNewExpression_return innerNewExpression() throws RecognitionException {
        innerNewExpression_return retval = new innerNewExpression_return();
        retval.start = input.LT(1);
        int innerNewExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NEW515=null;
        Token IDENT517=null;
        genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified516 = null;

        arguments_return arguments518 = null;

        classBody_return classBody519 = null;


        CommonTree NEW515_tree=null;
        CommonTree IDENT517_tree=null;
        RewriteRuleTokenStream stream_NEW=new RewriteRuleTokenStream(adaptor,"token NEW");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeArgumentListSimplified");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // /home/bigben/Desktop/Java.g:1055:5: ( NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"CLASS_CONSTRUCTOR_CALL\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? ) )
            // /home/bigben/Desktop/Java.g:1055:9: NEW ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )?
            {
            NEW515=(Token)input.LT(1);
            match(input,NEW,FOLLOW_NEW_in_innerNewExpression14606); if (failed) return retval;
            if ( backtracking==0 ) stream_NEW.add(NEW515);

            // /home/bigben/Desktop/Java.g:1055:13: ( genericTypeArgumentListSimplified )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==LESS_THAN) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: genericTypeArgumentListSimplified
                    {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_innerNewExpression14608);
                    genericTypeArgumentListSimplified516=genericTypeArgumentListSimplified();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified516.getTree());

                    }
                    break;

            }

            IDENT517=(Token)input.LT(1);
            match(input,IDENT,FOLLOW_IDENT_in_innerNewExpression14611); if (failed) return retval;
            if ( backtracking==0 ) stream_IDENT.add(IDENT517);

            pushFollow(FOLLOW_arguments_in_innerNewExpression14613);
            arguments518=arguments();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_arguments.add(arguments518.getTree());
            // /home/bigben/Desktop/Java.g:1055:64: ( classBody )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==LCURLY) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_innerNewExpression14615);
                    classBody519=classBody();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_classBody.add(classBody519.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: genericTypeArgumentListSimplified, classBody, arguments, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1056:9: -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"CLASS_CONSTRUCTOR_CALL\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? )
            {
                // /home/bigben/Desktop/Java.g:1056:13: ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"CLASS_CONSTRUCTOR_CALL\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(CLASS_CONSTRUCTOR_CALL, NEW515,  "CLASS_CONSTRUCTOR_CALL"), root_1);

                // /home/bigben/Desktop/Java.g:1056:70: ( genericTypeArgumentListSimplified )?
                if ( stream_genericTypeArgumentListSimplified.hasNext() ) {
                    adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.next());

                }
                stream_genericTypeArgumentListSimplified.reset();
                adaptor.addChild(root_1, stream_IDENT.next());
                adaptor.addChild(root_1, stream_arguments.next());
                // /home/bigben/Desktop/Java.g:1056:121: ( classBody )?
                if ( stream_classBody.hasNext() ) {
                    adaptor.addChild(root_1, stream_classBody.next());

                }
                stream_classBody.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 108, innerNewExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end innerNewExpression

    public static class newArrayConstruction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start newArrayConstruction
    // /home/bigben/Desktop/Java.g:1059:1: newArrayConstruction : ( arrayDeclaratorList arrayInitializer | LBRACK expression RBRACK ( LBRACK expression RBRACK )* ( arrayDeclaratorList )? );
    public final newArrayConstruction_return newArrayConstruction() throws RecognitionException {
        newArrayConstruction_return retval = new newArrayConstruction_return();
        retval.start = input.LT(1);
        int newArrayConstruction_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LBRACK522=null;
        Token RBRACK524=null;
        Token LBRACK525=null;
        Token RBRACK527=null;
        arrayDeclaratorList_return arrayDeclaratorList520 = null;

        arrayInitializer_return arrayInitializer521 = null;

        expression_return expression523 = null;

        expression_return expression526 = null;

        arrayDeclaratorList_return arrayDeclaratorList528 = null;


        CommonTree LBRACK522_tree=null;
        CommonTree RBRACK524_tree=null;
        CommonTree LBRACK525_tree=null;
        CommonTree RBRACK527_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // /home/bigben/Desktop/Java.g:1060:5: ( arrayDeclaratorList arrayInitializer | LBRACK expression RBRACK ( LBRACK expression RBRACK )* ( arrayDeclaratorList )? )
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==LBRACK) ) {
                int LA152_1 = input.LA(2);

                if ( (LA152_1==RBRACK) ) {
                    alt152=1;
                }
                else if ( (LA152_1==DEC||LA152_1==INC||LA152_1==LESS_THAN||LA152_1==LOGICAL_NOT||(LA152_1>=LPAREN && LA152_1<=MINUS)||LA152_1==NOT||LA152_1==PLUS||LA152_1==BOOLEAN||LA152_1==BYTE||LA152_1==CHAR||LA152_1==DOUBLE||LA152_1==FALSE||LA152_1==FLOAT||(LA152_1>=INT && LA152_1<=LONG)||(LA152_1>=NEW && LA152_1<=NULL)||LA152_1==SHORT||LA152_1==SUPER||LA152_1==THIS||LA152_1==TRUE||LA152_1==VOID||(LA152_1>=IDENT && LA152_1<=STRING_LITERAL)) ) {
                    alt152=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("1059:1: newArrayConstruction : ( arrayDeclaratorList arrayInitializer | LBRACK expression RBRACK ( LBRACK expression RBRACK )* ( arrayDeclaratorList )? );", 152, 1, input);

                    throw nvae;
                }
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("1059:1: newArrayConstruction : ( arrayDeclaratorList arrayInitializer | LBRACK expression RBRACK ( LBRACK expression RBRACK )* ( arrayDeclaratorList )? );", 152, 0, input);

                throw nvae;
            }
            switch (alt152) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:1060:9: arrayDeclaratorList arrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayDeclaratorList_in_newArrayConstruction14661);
                    arrayDeclaratorList520=arrayDeclaratorList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, arrayDeclaratorList520.getTree());
                    pushFollow(FOLLOW_arrayInitializer_in_newArrayConstruction14663);
                    arrayInitializer521=arrayInitializer();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, arrayInitializer521.getTree());

                    }
                    break;
                case 2 :
                    // /home/bigben/Desktop/Java.g:1061:9: LBRACK expression RBRACK ( LBRACK expression RBRACK )* ( arrayDeclaratorList )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LBRACK522=(Token)input.LT(1);
                    match(input,LBRACK,FOLLOW_LBRACK_in_newArrayConstruction14673); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LBRACK522_tree = (CommonTree)adaptor.create(LBRACK522);
                    adaptor.addChild(root_0, LBRACK522_tree);
                    }
                    pushFollow(FOLLOW_expression_in_newArrayConstruction14675);
                    expression523=expression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expression523.getTree());
                    RBRACK524=(Token)input.LT(1);
                    match(input,RBRACK,FOLLOW_RBRACK_in_newArrayConstruction14677); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RBRACK524_tree = (CommonTree)adaptor.create(RBRACK524);
                    adaptor.addChild(root_0, RBRACK524_tree);
                    }
                    // /home/bigben/Desktop/Java.g:1061:34: ( LBRACK expression RBRACK )*
                    loop150:
                    do {
                        int alt150=2;
                        int LA150_0 = input.LA(1);

                        if ( (LA150_0==LBRACK) ) {
                            int LA150_1 = input.LA(2);

                            if ( (synpred234()) ) {
                                alt150=1;
                            }


                        }


                        switch (alt150) {
                    	case 1 :
                    	    // /home/bigben/Desktop/Java.g:1061:35: LBRACK expression RBRACK
                    	    {
                    	    LBRACK525=(Token)input.LT(1);
                    	    match(input,LBRACK,FOLLOW_LBRACK_in_newArrayConstruction14680); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    LBRACK525_tree = (CommonTree)adaptor.create(LBRACK525);
                    	    adaptor.addChild(root_0, LBRACK525_tree);
                    	    }
                    	    pushFollow(FOLLOW_expression_in_newArrayConstruction14682);
                    	    expression526=expression();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, expression526.getTree());
                    	    RBRACK527=(Token)input.LT(1);
                    	    match(input,RBRACK,FOLLOW_RBRACK_in_newArrayConstruction14684); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    RBRACK527_tree = (CommonTree)adaptor.create(RBRACK527);
                    	    adaptor.addChild(root_0, RBRACK527_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop150;
                        }
                    } while (true);

                    // /home/bigben/Desktop/Java.g:1061:62: ( arrayDeclaratorList )?
                    int alt151=2;
                    int LA151_0 = input.LA(1);

                    if ( (LA151_0==LBRACK) ) {
                        int LA151_1 = input.LA(2);

                        if ( (LA151_1==RBRACK) ) {
                            alt151=1;
                        }
                    }
                    switch (alt151) {
                        case 1 :
                            // /home/bigben/Desktop/Java.g:0:0: arrayDeclaratorList
                            {
                            pushFollow(FOLLOW_arrayDeclaratorList_in_newArrayConstruction14688);
                            arrayDeclaratorList528=arrayDeclaratorList();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, arrayDeclaratorList528.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 109, newArrayConstruction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end newArrayConstruction

    public static class arguments_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start arguments
    // /home/bigben/Desktop/Java.g:1064:1: arguments : LPAREN ( expressionList )? RPAREN -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? ) ;
    public final arguments_return arguments() throws RecognitionException {
        arguments_return retval = new arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN529=null;
        Token RPAREN531=null;
        expressionList_return expressionList530 = null;


        CommonTree LPAREN529_tree=null;
        CommonTree RPAREN531_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            if ( backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // /home/bigben/Desktop/Java.g:1065:5: ( LPAREN ( expressionList )? RPAREN -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? ) )
            // /home/bigben/Desktop/Java.g:1065:9: LPAREN ( expressionList )? RPAREN
            {
            LPAREN529=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_arguments14708); if (failed) return retval;
            if ( backtracking==0 ) stream_LPAREN.add(LPAREN529);

            // /home/bigben/Desktop/Java.g:1065:16: ( expressionList )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==DEC||LA153_0==INC||LA153_0==LESS_THAN||LA153_0==LOGICAL_NOT||(LA153_0>=LPAREN && LA153_0<=MINUS)||LA153_0==NOT||LA153_0==PLUS||LA153_0==BOOLEAN||LA153_0==BYTE||LA153_0==CHAR||LA153_0==DOUBLE||LA153_0==FALSE||LA153_0==FLOAT||(LA153_0>=INT && LA153_0<=LONG)||(LA153_0>=NEW && LA153_0<=NULL)||LA153_0==SHORT||LA153_0==SUPER||LA153_0==THIS||LA153_0==TRUE||LA153_0==VOID||(LA153_0>=IDENT && LA153_0<=STRING_LITERAL)) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // /home/bigben/Desktop/Java.g:0:0: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments14710);
                    expressionList530=expressionList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expressionList.add(expressionList530.getTree());

                    }
                    break;

            }

            RPAREN531=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_arguments14713); if (failed) return retval;
            if ( backtracking==0 ) stream_RPAREN.add(RPAREN531);


            // AST REWRITE
            // elements: expressionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1066:9: -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? )
            {
                // /home/bigben/Desktop/Java.g:1066:13: ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(ARGUMENT_LIST, LPAREN529,  "ARGUMENT_LIST"), root_1);

                // /home/bigben/Desktop/Java.g:1066:55: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.next());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 110, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end arguments

    public static class literal_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start literal
    // /home/bigben/Desktop/Java.g:1069:1: literal : ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL );
    public final literal_return literal() throws RecognitionException {
        literal_return retval = new literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set532=null;

        CommonTree set532_tree=null;

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // /home/bigben/Desktop/Java.g:1070:5: ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL )
            // /home/bigben/Desktop/Java.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set532=(Token)input.LT(1);
            if ( input.LA(1)==FALSE||input.LA(1)==NULL||input.LA(1)==TRUE||(input.LA(1)>=HEX_LITERAL && input.LA(1)<=STRING_LITERAL) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set532));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_literal0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 111, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end literal

    // $ANTLR start synpred14
    public final void synpred14_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:387:9: ( GREATER_THAN )
        // /home/bigben/Desktop/Java.g:387:9: GREATER_THAN
        {
        match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_synpred145115); if (failed) return ;

        }
    }
    // $ANTLR end synpred14

    // $ANTLR start synpred15
    public final void synpred15_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:388:9: ( SHIFT_RIGHT )
        // /home/bigben/Desktop/Java.g:388:9: SHIFT_RIGHT
        {
        match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_synpred155125); if (failed) return ;

        }
    }
    // $ANTLR end synpred15

    // $ANTLR start synpred16
    public final void synpred16_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:389:9: ( BIT_SHIFT_RIGHT )
        // /home/bigben/Desktop/Java.g:389:9: BIT_SHIFT_RIGHT
        {
        match(input,BIT_SHIFT_RIGHT,FOLLOW_BIT_SHIFT_RIGHT_in_synpred165135); if (failed) return ;

        }
    }
    // $ANTLR end synpred16

    // $ANTLR start synpred17
    public final void synpred17_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:394:15: ( bound )
        // /home/bigben/Desktop/Java.g:394:15: bound
        {
        pushFollow(FOLLOW_bound_in_synpred175165);
        bound();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred17

    // $ANTLR start synpred32
    public final void synpred32_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:451:9: ( STATIC block )
        // /home/bigben/Desktop/Java.g:451:9: STATIC block
        {
        match(input,STATIC,FOLLOW_STATIC_in_synpred325694); if (failed) return ;
        pushFollow(FOLLOW_block_in_synpred325696);
        block();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred32

    // $ANTLR start synpred42
    public final void synpred42_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:453:13: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | IDENT formalParameterList ( throwsClause )? block ) )
        // /home/bigben/Desktop/Java.g:453:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | IDENT formalParameterList ( throwsClause )? block )
        {
        // /home/bigben/Desktop/Java.g:453:13: ( genericTypeParameterList )?
        int alt159=2;
        int LA159_0 = input.LA(1);

        if ( (LA159_0==LESS_THAN) ) {
            alt159=1;
        }
        switch (alt159) {
            case 1 :
                // /home/bigben/Desktop/Java.g:0:0: genericTypeParameterList
                {
                pushFollow(FOLLOW_genericTypeParameterList_in_synpred425733);
                genericTypeParameterList();
                _fsp--;
                if (failed) return ;

                }
                break;

        }

        // /home/bigben/Desktop/Java.g:454:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | IDENT formalParameterList ( throwsClause )? block )
        int alt166=3;
        switch ( input.LA(1) ) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
            {
            alt166=1;
            }
            break;
        case IDENT:
            {
            int LA166_2 = input.LA(2);

            if ( (LA166_2==LPAREN) ) {
                alt166=3;
            }
            else if ( (LA166_2==DOT||LA166_2==LBRACK||LA166_2==LESS_THAN||LA166_2==IDENT) ) {
                alt166=1;
            }
            else {
                if (backtracking>0) {failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("454:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | IDENT formalParameterList ( throwsClause )? block )", 166, 2, input);

                throw nvae;
            }
            }
            break;
        case VOID:
            {
            alt166=2;
            }
            break;
        default:
            if (backtracking>0) {failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("454:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | IDENT formalParameterList ( throwsClause )? block )", 166, 0, input);

            throw nvae;
        }

        switch (alt166) {
            case 1 :
                // /home/bigben/Desktop/Java.g:454:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
                {
                pushFollow(FOLLOW_type_in_synpred425752);
                type();
                _fsp--;
                if (failed) return ;
                match(input,IDENT,FOLLOW_IDENT_in_synpred425754); if (failed) return ;
                pushFollow(FOLLOW_formalParameterList_in_synpred425756);
                formalParameterList();
                _fsp--;
                if (failed) return ;
                // /home/bigben/Desktop/Java.g:454:48: ( arrayDeclaratorList )?
                int alt160=2;
                int LA160_0 = input.LA(1);

                if ( (LA160_0==LBRACK) ) {
                    alt160=1;
                }
                switch (alt160) {
                    case 1 :
                        // /home/bigben/Desktop/Java.g:0:0: arrayDeclaratorList
                        {
                        pushFollow(FOLLOW_arrayDeclaratorList_in_synpred425758);
                        arrayDeclaratorList();
                        _fsp--;
                        if (failed) return ;

                        }
                        break;

                }

                // /home/bigben/Desktop/Java.g:454:69: ( throwsClause )?
                int alt161=2;
                int LA161_0 = input.LA(1);

                if ( (LA161_0==THROWS) ) {
                    alt161=1;
                }
                switch (alt161) {
                    case 1 :
                        // /home/bigben/Desktop/Java.g:0:0: throwsClause
                        {
                        pushFollow(FOLLOW_throwsClause_in_synpred425761);
                        throwsClause();
                        _fsp--;
                        if (failed) return ;

                        }
                        break;

                }

                // /home/bigben/Desktop/Java.g:454:83: ( block | SEMI )
                int alt162=2;
                int LA162_0 = input.LA(1);

                if ( (LA162_0==LCURLY) ) {
                    alt162=1;
                }
                else if ( (LA162_0==SEMI) ) {
                    alt162=2;
                }
                else {
                    if (backtracking>0) {failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("454:83: ( block | SEMI )", 162, 0, input);

                    throw nvae;
                }
                switch (alt162) {
                    case 1 :
                        // /home/bigben/Desktop/Java.g:454:84: block
                        {
                        pushFollow(FOLLOW_block_in_synpred425765);
                        block();
                        _fsp--;
                        if (failed) return ;

                        }
                        break;
                    case 2 :
                        // /home/bigben/Desktop/Java.g:454:92: SEMI
                        {
                        match(input,SEMI,FOLLOW_SEMI_in_synpred425769); if (failed) return ;

                        }
                        break;

                }


                }
                break;
            case 2 :
                // /home/bigben/Desktop/Java.g:456:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
                {
                match(input,VOID,FOLLOW_VOID_in_synpred425831); if (failed) return ;
                match(input,IDENT,FOLLOW_IDENT_in_synpred425833); if (failed) return ;
                pushFollow(FOLLOW_formalParameterList_in_synpred425835);
                formalParameterList();
                _fsp--;
                if (failed) return ;
                // /home/bigben/Desktop/Java.g:456:48: ( throwsClause )?
                int alt163=2;
                int LA163_0 = input.LA(1);

                if ( (LA163_0==THROWS) ) {
                    alt163=1;
                }
                switch (alt163) {
                    case 1 :
                        // /home/bigben/Desktop/Java.g:0:0: throwsClause
                        {
                        pushFollow(FOLLOW_throwsClause_in_synpred425837);
                        throwsClause();
                        _fsp--;
                        if (failed) return ;

                        }
                        break;

                }

                // /home/bigben/Desktop/Java.g:456:62: ( block | SEMI )
                int alt164=2;
                int LA164_0 = input.LA(1);

                if ( (LA164_0==LCURLY) ) {
                    alt164=1;
                }
                else if ( (LA164_0==SEMI) ) {
                    alt164=2;
                }
                else {
                    if (backtracking>0) {failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("456:62: ( block | SEMI )", 164, 0, input);

                    throw nvae;
                }
                switch (alt164) {
                    case 1 :
                        // /home/bigben/Desktop/Java.g:456:63: block
                        {
                        pushFollow(FOLLOW_block_in_synpred425841);
                        block();
                        _fsp--;
                        if (failed) return ;

                        }
                        break;
                    case 2 :
                        // /home/bigben/Desktop/Java.g:456:71: SEMI
                        {
                        match(input,SEMI,FOLLOW_SEMI_in_synpred425845); if (failed) return ;

                        }
                        break;

                }


                }
                break;
            case 3 :
                // /home/bigben/Desktop/Java.g:458:17: IDENT formalParameterList ( throwsClause )? block
                {
                match(input,IDENT,FOLLOW_IDENT_in_synpred425904); if (failed) return ;
                pushFollow(FOLLOW_formalParameterList_in_synpred425906);
                formalParameterList();
                _fsp--;
                if (failed) return ;
                // /home/bigben/Desktop/Java.g:458:49: ( throwsClause )?
                int alt165=2;
                int LA165_0 = input.LA(1);

                if ( (LA165_0==THROWS) ) {
                    alt165=1;
                }
                switch (alt165) {
                    case 1 :
                        // /home/bigben/Desktop/Java.g:0:0: throwsClause
                        {
                        pushFollow(FOLLOW_throwsClause_in_synpred425908);
                        throwsClause();
                        _fsp--;
                        if (failed) return ;

                        }
                        break;

                }

                pushFollow(FOLLOW_block_in_synpred425911);
                block();
                _fsp--;
                if (failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred42

    // $ANTLR start synpred43
    public final void synpred43_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:452:9: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI ) )
        // /home/bigben/Desktop/Java.g:452:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI )
        {
        pushFollow(FOLLOW_modifierList_in_synpred435719);
        modifierList();
        _fsp--;
        if (failed) return ;
        // /home/bigben/Desktop/Java.g:453:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI )
        int alt175=2;
        alt175 = dfa175.predict(input);
        switch (alt175) {
            case 1 :
                // /home/bigben/Desktop/Java.g:453:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | IDENT formalParameterList ( throwsClause )? block )
                {
                // /home/bigben/Desktop/Java.g:453:13: ( genericTypeParameterList )?
                int alt167=2;
                int LA167_0 = input.LA(1);

                if ( (LA167_0==LESS_THAN) ) {
                    alt167=1;
                }
                switch (alt167) {
                    case 1 :
                        // /home/bigben/Desktop/Java.g:0:0: genericTypeParameterList
                        {
                        pushFollow(FOLLOW_genericTypeParameterList_in_synpred435733);
                        genericTypeParameterList();
                        _fsp--;
                        if (failed) return ;

                        }
                        break;

                }

                // /home/bigben/Desktop/Java.g:454:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | IDENT formalParameterList ( throwsClause )? block )
                int alt174=3;
                switch ( input.LA(1) ) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FLOAT:
                case INT:
                case LONG:
                case SHORT:
                    {
                    alt174=1;
                    }
                    break;
                case IDENT:
                    {
                    int LA174_2 = input.LA(2);

                    if ( (LA174_2==LPAREN) ) {
                        alt174=3;
                    }
                    else if ( (LA174_2==DOT||LA174_2==LBRACK||LA174_2==LESS_THAN||LA174_2==IDENT) ) {
                        alt174=1;
                    }
                    else {
                        if (backtracking>0) {failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("454:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | IDENT formalParameterList ( throwsClause )? block )", 174, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case VOID:
                    {
                    alt174=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("454:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | IDENT formalParameterList ( throwsClause )? block )", 174, 0, input);

                    throw nvae;
                }

                switch (alt174) {
                    case 1 :
                        // /home/bigben/Desktop/Java.g:454:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
                        {
                        pushFollow(FOLLOW_type_in_synpred435752);
                        type();
                        _fsp--;
                        if (failed) return ;
                        match(input,IDENT,FOLLOW_IDENT_in_synpred435754); if (failed) return ;
                        pushFollow(FOLLOW_formalParameterList_in_synpred435756);
                        formalParameterList();
                        _fsp--;
                        if (failed) return ;
                        // /home/bigben/Desktop/Java.g:454:48: ( arrayDeclaratorList )?
                        int alt168=2;
                        int LA168_0 = input.LA(1);

                        if ( (LA168_0==LBRACK) ) {
                            alt168=1;
                        }
                        switch (alt168) {
                            case 1 :
                                // /home/bigben/Desktop/Java.g:0:0: arrayDeclaratorList
                                {
                                pushFollow(FOLLOW_arrayDeclaratorList_in_synpred435758);
                                arrayDeclaratorList();
                                _fsp--;
                                if (failed) return ;

                                }
                                break;

                        }

                        // /home/bigben/Desktop/Java.g:454:69: ( throwsClause )?
                        int alt169=2;
                        int LA169_0 = input.LA(1);

                        if ( (LA169_0==THROWS) ) {
                            alt169=1;
                        }
                        switch (alt169) {
                            case 1 :
                                // /home/bigben/Desktop/Java.g:0:0: throwsClause
                                {
                                pushFollow(FOLLOW_throwsClause_in_synpred435761);
                                throwsClause();
                                _fsp--;
                                if (failed) return ;

                                }
                                break;

                        }

                        // /home/bigben/Desktop/Java.g:454:83: ( block | SEMI )
                        int alt170=2;
                        int LA170_0 = input.LA(1);

                        if ( (LA170_0==LCURLY) ) {
                            alt170=1;
                        }
                        else if ( (LA170_0==SEMI) ) {
                            alt170=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("454:83: ( block | SEMI )", 170, 0, input);

                            throw nvae;
                        }
                        switch (alt170) {
                            case 1 :
                                // /home/bigben/Desktop/Java.g:454:84: block
                                {
                                pushFollow(FOLLOW_block_in_synpred435765);
                                block();
                                _fsp--;
                                if (failed) return ;

                                }
                                break;
                            case 2 :
                                // /home/bigben/Desktop/Java.g:454:92: SEMI
                                {
                                match(input,SEMI,FOLLOW_SEMI_in_synpred435769); if (failed) return ;

                                }
                                break;

                        }


                        }
                        break;
                    case 2 :
                        // /home/bigben/Desktop/Java.g:456:17: VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI )
                        {
                        match(input,VOID,FOLLOW_VOID_in_synpred435831); if (failed) return ;
                        match(input,IDENT,FOLLOW_IDENT_in_synpred435833); if (failed) return ;
                        pushFollow(FOLLOW_formalParameterList_in_synpred435835);
                        formalParameterList();
                        _fsp--;
                        if (failed) return ;
                        // /home/bigben/Desktop/Java.g:456:48: ( throwsClause )?
                        int alt171=2;
                        int LA171_0 = input.LA(1);

                        if ( (LA171_0==THROWS) ) {
                            alt171=1;
                        }
                        switch (alt171) {
                            case 1 :
                                // /home/bigben/Desktop/Java.g:0:0: throwsClause
                                {
                                pushFollow(FOLLOW_throwsClause_in_synpred435837);
                                throwsClause();
                                _fsp--;
                                if (failed) return ;

                                }
                                break;

                        }

                        // /home/bigben/Desktop/Java.g:456:62: ( block | SEMI )
                        int alt172=2;
                        int LA172_0 = input.LA(1);

                        if ( (LA172_0==LCURLY) ) {
                            alt172=1;
                        }
                        else if ( (LA172_0==SEMI) ) {
                            alt172=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("456:62: ( block | SEMI )", 172, 0, input);

                            throw nvae;
                        }
                        switch (alt172) {
                            case 1 :
                                // /home/bigben/Desktop/Java.g:456:63: block
                                {
                                pushFollow(FOLLOW_block_in_synpred435841);
                                block();
                                _fsp--;
                                if (failed) return ;

                                }
                                break;
                            case 2 :
                                // /home/bigben/Desktop/Java.g:456:71: SEMI
                                {
                                match(input,SEMI,FOLLOW_SEMI_in_synpred435845); if (failed) return ;

                                }
                                break;

                        }


                        }
                        break;
                    case 3 :
                        // /home/bigben/Desktop/Java.g:458:17: IDENT formalParameterList ( throwsClause )? block
                        {
                        match(input,IDENT,FOLLOW_IDENT_in_synpred435904); if (failed) return ;
                        pushFollow(FOLLOW_formalParameterList_in_synpred435906);
                        formalParameterList();
                        _fsp--;
                        if (failed) return ;
                        // /home/bigben/Desktop/Java.g:458:49: ( throwsClause )?
                        int alt173=2;
                        int LA173_0 = input.LA(1);

                        if ( (LA173_0==THROWS) ) {
                            alt173=1;
                        }
                        switch (alt173) {
                            case 1 :
                                // /home/bigben/Desktop/Java.g:0:0: throwsClause
                                {
                                pushFollow(FOLLOW_throwsClause_in_synpred435908);
                                throwsClause();
                                _fsp--;
                                if (failed) return ;

                                }
                                break;

                        }

                        pushFollow(FOLLOW_block_in_synpred435911);
                        block();
                        _fsp--;
                        if (failed) return ;

                        }
                        break;

                }


                }
                break;
            case 2 :
                // /home/bigben/Desktop/Java.g:461:13: type classFieldDeclaratorList SEMI
                {
                pushFollow(FOLLOW_type_in_synpred435975);
                type();
                _fsp--;
                if (failed) return ;
                pushFollow(FOLLOW_classFieldDeclaratorList_in_synpred435977);
                classFieldDeclaratorList();
                _fsp--;
                if (failed) return ;
                match(input,SEMI,FOLLOW_SEMI_in_synpred435979); if (failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred43

    // $ANTLR start synpred44
    public final void synpred44_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:464:9: ( typeDeclaration )
        // /home/bigben/Desktop/Java.g:464:9: typeDeclaration
        {
        pushFollow(FOLLOW_typeDeclaration_in_synpred446024);
        typeDeclaration();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred44

    // $ANTLR start synpred50
    public final void synpred50_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:470:13: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) )
        // /home/bigben/Desktop/Java.g:470:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
        {
        // /home/bigben/Desktop/Java.g:470:13: ( genericTypeParameterList )?
        int alt178=2;
        int LA178_0 = input.LA(1);

        if ( (LA178_0==LESS_THAN) ) {
            alt178=1;
        }
        switch (alt178) {
            case 1 :
                // /home/bigben/Desktop/Java.g:0:0: genericTypeParameterList
                {
                pushFollow(FOLLOW_genericTypeParameterList_in_synpred506079);
                genericTypeParameterList();
                _fsp--;
                if (failed) return ;

                }
                break;

        }

        // /home/bigben/Desktop/Java.g:471:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
        int alt182=2;
        int LA182_0 = input.LA(1);

        if ( (LA182_0==BOOLEAN||LA182_0==BYTE||LA182_0==CHAR||LA182_0==DOUBLE||LA182_0==FLOAT||(LA182_0>=INT && LA182_0<=LONG)||LA182_0==SHORT||LA182_0==IDENT) ) {
            alt182=1;
        }
        else if ( (LA182_0==VOID) ) {
            alt182=2;
        }
        else {
            if (backtracking>0) {failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("471:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )", 182, 0, input);

            throw nvae;
        }
        switch (alt182) {
            case 1 :
                // /home/bigben/Desktop/Java.g:471:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
                {
                pushFollow(FOLLOW_type_in_synpred506098);
                type();
                _fsp--;
                if (failed) return ;
                match(input,IDENT,FOLLOW_IDENT_in_synpred506100); if (failed) return ;
                pushFollow(FOLLOW_formalParameterList_in_synpred506102);
                formalParameterList();
                _fsp--;
                if (failed) return ;
                // /home/bigben/Desktop/Java.g:471:48: ( arrayDeclaratorList )?
                int alt179=2;
                int LA179_0 = input.LA(1);

                if ( (LA179_0==LBRACK) ) {
                    alt179=1;
                }
                switch (alt179) {
                    case 1 :
                        // /home/bigben/Desktop/Java.g:0:0: arrayDeclaratorList
                        {
                        pushFollow(FOLLOW_arrayDeclaratorList_in_synpred506104);
                        arrayDeclaratorList();
                        _fsp--;
                        if (failed) return ;

                        }
                        break;

                }

                // /home/bigben/Desktop/Java.g:471:69: ( throwsClause )?
                int alt180=2;
                int LA180_0 = input.LA(1);

                if ( (LA180_0==THROWS) ) {
                    alt180=1;
                }
                switch (alt180) {
                    case 1 :
                        // /home/bigben/Desktop/Java.g:0:0: throwsClause
                        {
                        pushFollow(FOLLOW_throwsClause_in_synpred506107);
                        throwsClause();
                        _fsp--;
                        if (failed) return ;

                        }
                        break;

                }

                match(input,SEMI,FOLLOW_SEMI_in_synpred506110); if (failed) return ;

                }
                break;
            case 2 :
                // /home/bigben/Desktop/Java.g:473:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
                {
                match(input,VOID,FOLLOW_VOID_in_synpred506168); if (failed) return ;
                match(input,IDENT,FOLLOW_IDENT_in_synpred506170); if (failed) return ;
                pushFollow(FOLLOW_formalParameterList_in_synpred506172);
                formalParameterList();
                _fsp--;
                if (failed) return ;
                // /home/bigben/Desktop/Java.g:473:48: ( throwsClause )?
                int alt181=2;
                int LA181_0 = input.LA(1);

                if ( (LA181_0==THROWS) ) {
                    alt181=1;
                }
                switch (alt181) {
                    case 1 :
                        // /home/bigben/Desktop/Java.g:0:0: throwsClause
                        {
                        pushFollow(FOLLOW_throwsClause_in_synpred506174);
                        throwsClause();
                        _fsp--;
                        if (failed) return ;

                        }
                        break;

                }

                match(input,SEMI,FOLLOW_SEMI_in_synpred506177); if (failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred50

    // $ANTLR start synpred51
    public final void synpred51_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:469:9: ( modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI ) )
        // /home/bigben/Desktop/Java.g:469:9: modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI )
        {
        pushFollow(FOLLOW_modifierList_in_synpred516065);
        modifierList();
        _fsp--;
        if (failed) return ;
        // /home/bigben/Desktop/Java.g:470:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI )
        int alt188=2;
        alt188 = dfa188.predict(input);
        switch (alt188) {
            case 1 :
                // /home/bigben/Desktop/Java.g:470:13: ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
                {
                // /home/bigben/Desktop/Java.g:470:13: ( genericTypeParameterList )?
                int alt183=2;
                int LA183_0 = input.LA(1);

                if ( (LA183_0==LESS_THAN) ) {
                    alt183=1;
                }
                switch (alt183) {
                    case 1 :
                        // /home/bigben/Desktop/Java.g:0:0: genericTypeParameterList
                        {
                        pushFollow(FOLLOW_genericTypeParameterList_in_synpred516079);
                        genericTypeParameterList();
                        _fsp--;
                        if (failed) return ;

                        }
                        break;

                }

                // /home/bigben/Desktop/Java.g:471:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )
                int alt187=2;
                int LA187_0 = input.LA(1);

                if ( (LA187_0==BOOLEAN||LA187_0==BYTE||LA187_0==CHAR||LA187_0==DOUBLE||LA187_0==FLOAT||(LA187_0>=INT && LA187_0<=LONG)||LA187_0==SHORT||LA187_0==IDENT) ) {
                    alt187=1;
                }
                else if ( (LA187_0==VOID) ) {
                    alt187=2;
                }
                else {
                    if (backtracking>0) {failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("471:13: ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI )", 187, 0, input);

                    throw nvae;
                }
                switch (alt187) {
                    case 1 :
                        // /home/bigben/Desktop/Java.g:471:17: type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
                        {
                        pushFollow(FOLLOW_type_in_synpred516098);
                        type();
                        _fsp--;
                        if (failed) return ;
                        match(input,IDENT,FOLLOW_IDENT_in_synpred516100); if (failed) return ;
                        pushFollow(FOLLOW_formalParameterList_in_synpred516102);
                        formalParameterList();
                        _fsp--;
                        if (failed) return ;
                        // /home/bigben/Desktop/Java.g:471:48: ( arrayDeclaratorList )?
                        int alt184=2;
                        int LA184_0 = input.LA(1);

                        if ( (LA184_0==LBRACK) ) {
                            alt184=1;
                        }
                        switch (alt184) {
                            case 1 :
                                // /home/bigben/Desktop/Java.g:0:0: arrayDeclaratorList
                                {
                                pushFollow(FOLLOW_arrayDeclaratorList_in_synpred516104);
                                arrayDeclaratorList();
                                _fsp--;
                                if (failed) return ;

                                }
                                break;

                        }

                        // /home/bigben/Desktop/Java.g:471:69: ( throwsClause )?
                        int alt185=2;
                        int LA185_0 = input.LA(1);

                        if ( (LA185_0==THROWS) ) {
                            alt185=1;
                        }
                        switch (alt185) {
                            case 1 :
                                // /home/bigben/Desktop/Java.g:0:0: throwsClause
                                {
                                pushFollow(FOLLOW_throwsClause_in_synpred516107);
                                throwsClause();
                                _fsp--;
                                if (failed) return ;

                                }
                                break;

                        }

                        match(input,SEMI,FOLLOW_SEMI_in_synpred516110); if (failed) return ;

                        }
                        break;
                    case 2 :
                        // /home/bigben/Desktop/Java.g:473:17: VOID IDENT formalParameterList ( throwsClause )? SEMI
                        {
                        match(input,VOID,FOLLOW_VOID_in_synpred516168); if (failed) return ;
                        match(input,IDENT,FOLLOW_IDENT_in_synpred516170); if (failed) return ;
                        pushFollow(FOLLOW_formalParameterList_in_synpred516172);
                        formalParameterList();
                        _fsp--;
                        if (failed) return ;
                        // /home/bigben/Desktop/Java.g:473:48: ( throwsClause )?
                        int alt186=2;
                        int LA186_0 = input.LA(1);

                        if ( (LA186_0==THROWS) ) {
                            alt186=1;
                        }
                        switch (alt186) {
                            case 1 :
                                // /home/bigben/Desktop/Java.g:0:0: throwsClause
                                {
                                pushFollow(FOLLOW_throwsClause_in_synpred516174);
                                throwsClause();
                                _fsp--;
                                if (failed) return ;

                                }
                                break;

                        }

                        match(input,SEMI,FOLLOW_SEMI_in_synpred516177); if (failed) return ;

                        }
                        break;

                }


                }
                break;
            case 2 :
                // /home/bigben/Desktop/Java.g:476:13: type interfaceFieldDeclaratorList SEMI
                {
                pushFollow(FOLLOW_type_in_synpred516240);
                type();
                _fsp--;
                if (failed) return ;
                pushFollow(FOLLOW_interfaceFieldDeclaratorList_in_synpred516242);
                interfaceFieldDeclaratorList();
                _fsp--;
                if (failed) return ;
                match(input,SEMI,FOLLOW_SEMI_in_synpred516244); if (failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred51

    // $ANTLR start synpred52
    public final void synpred52_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:479:9: ( typeDeclaration )
        // /home/bigben/Desktop/Java.g:479:9: typeDeclaration
        {
        pushFollow(FOLLOW_typeDeclaration_in_synpred526289);
        typeDeclaration();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred52

    // $ANTLR start synpred58
    public final void synpred58_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:518:9: ( arrayDeclarator )
        // /home/bigben/Desktop/Java.g:518:9: arrayDeclarator
        {
        pushFollow(FOLLOW_arrayDeclarator_in_synpred586590);
        arrayDeclarator();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred58

    // $ANTLR start synpred76
    public final void synpred76_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:567:23: ( arrayDeclaratorList )
        // /home/bigben/Desktop/Java.g:567:23: arrayDeclaratorList
        {
        pushFollow(FOLLOW_arrayDeclaratorList_in_synpred766991);
        arrayDeclaratorList();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred76

    // $ANTLR start synpred77
    public final void synpred77_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:572:28: ( arrayDeclaratorList )
        // /home/bigben/Desktop/Java.g:572:28: arrayDeclaratorList
        {
        pushFollow(FOLLOW_arrayDeclaratorList_in_synpred777040);
        arrayDeclaratorList();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred77

    // $ANTLR start synpred79
    public final void synpred79_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:582:20: ( DOT typeIdent )
        // /home/bigben/Desktop/Java.g:582:20: DOT typeIdent
        {
        match(input,DOT,FOLLOW_DOT_in_synpred797125); if (failed) return ;
        pushFollow(FOLLOW_typeIdent_in_synpred797127);
        typeIdent();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred79

    // $ANTLR start synpred90
    public final void synpred90_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:611:40: ( COMMA genericTypeArgument )
        // /home/bigben/Desktop/Java.g:611:40: COMMA genericTypeArgument
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred907352); if (failed) return ;
        pushFollow(FOLLOW_genericTypeArgument_in_synpred907354);
        genericTypeArgument();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred90

    // $ANTLR start synpred92
    public final void synpred92_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:617:18: ( genericWildcardBoundType )
        // /home/bigben/Desktop/Java.g:617:18: genericWildcardBoundType
        {
        pushFollow(FOLLOW_genericWildcardBoundType_in_synpred927408);
        genericWildcardBoundType();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred92

    // $ANTLR start synpred97
    public final void synpred97_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:642:42: ( COMMA formalParameterStandardDecl )
        // /home/bigben/Desktop/Java.g:642:42: COMMA formalParameterStandardDecl
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred977625); if (failed) return ;
        pushFollow(FOLLOW_formalParameterStandardDecl_in_synpred977627);
        formalParameterStandardDecl();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred97

    // $ANTLR start synpred99
    public final void synpred99_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:642:13: ( formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? )
        // /home/bigben/Desktop/Java.g:642:13: formalParameterStandardDecl ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
        {
        pushFollow(FOLLOW_formalParameterStandardDecl_in_synpred997622);
        formalParameterStandardDecl();
        _fsp--;
        if (failed) return ;
        // /home/bigben/Desktop/Java.g:642:41: ( COMMA formalParameterStandardDecl )*
        loop191:
        do {
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==COMMA) ) {
                int LA191_1 = input.LA(2);

                if ( (synpred97()) ) {
                    alt191=1;
                }


            }


            switch (alt191) {
        	case 1 :
        	    // /home/bigben/Desktop/Java.g:642:42: COMMA formalParameterStandardDecl
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred997625); if (failed) return ;
        	    pushFollow(FOLLOW_formalParameterStandardDecl_in_synpred997627);
        	    formalParameterStandardDecl();
        	    _fsp--;
        	    if (failed) return ;

        	    }
        	    break;

        	default :
        	    break loop191;
            }
        } while (true);

        // /home/bigben/Desktop/Java.g:642:78: ( COMMA formalParameterVarArgDecl )?
        int alt192=2;
        int LA192_0 = input.LA(1);

        if ( (LA192_0==COMMA) ) {
            alt192=1;
        }
        switch (alt192) {
            case 1 :
                // /home/bigben/Desktop/Java.g:642:79: COMMA formalParameterVarArgDecl
                {
                match(input,COMMA,FOLLOW_COMMA_in_synpred997632); if (failed) return ;
                pushFollow(FOLLOW_formalParameterVarArgDecl_in_synpred997634);
                formalParameterVarArgDecl();
                _fsp--;
                if (failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred99

    // $ANTLR start synpred100
    public final void synpred100_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:645:13: ( formalParameterVarArgDecl )
        // /home/bigben/Desktop/Java.g:645:13: formalParameterVarArgDecl
        {
        pushFollow(FOLLOW_formalParameterVarArgDecl_in_synpred1007691);
        formalParameterVarArgDecl();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred100

    // $ANTLR start synpred101
    public final void synpred101_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:666:13: ( DOT IDENT )
        // /home/bigben/Desktop/Java.g:666:13: DOT IDENT
        {
        match(input,DOT,FOLLOW_DOT_in_synpred1017936); if (failed) return ;
        match(input,IDENT,FOLLOW_IDENT_in_synpred1017940); if (failed) return ;

        }
    }
    // $ANTLR end synpred101

    // $ANTLR start synpred102
    public final void synpred102_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:673:9: ( annotation )
        // /home/bigben/Desktop/Java.g:673:9: annotation
        {
        pushFollow(FOLLOW_annotation_in_synpred1027993);
        annotation();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred102

    // $ANTLR start synpred114
    public final void synpred114_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:724:9: ( modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI ) )
        // /home/bigben/Desktop/Java.g:724:9: modifierList type ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
        {
        pushFollow(FOLLOW_modifierList_in_synpred1148446);
        modifierList();
        _fsp--;
        if (failed) return ;
        pushFollow(FOLLOW_type_in_synpred1148448);
        type();
        _fsp--;
        if (failed) return ;
        // /home/bigben/Desktop/Java.g:725:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )
        int alt197=2;
        int LA197_0 = input.LA(1);

        if ( (LA197_0==IDENT) ) {
            int LA197_1 = input.LA(2);

            if ( (LA197_1==LPAREN) ) {
                alt197=1;
            }
            else if ( (LA197_1==ASSIGN||LA197_1==COMMA||LA197_1==LBRACK||LA197_1==SEMI) ) {
                alt197=2;
            }
            else {
                if (backtracking>0) {failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("725:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )", 197, 1, input);

                throw nvae;
            }
        }
        else {
            if (backtracking>0) {failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("725:9: ( IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI | classFieldDeclaratorList SEMI )", 197, 0, input);

            throw nvae;
        }
        switch (alt197) {
            case 1 :
                // /home/bigben/Desktop/Java.g:725:13: IDENT LPAREN RPAREN ( annotationDefaultValue )? SEMI
                {
                match(input,IDENT,FOLLOW_IDENT_in_synpred1148462); if (failed) return ;
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred1148464); if (failed) return ;
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred1148466); if (failed) return ;
                // /home/bigben/Desktop/Java.g:725:33: ( annotationDefaultValue )?
                int alt196=2;
                int LA196_0 = input.LA(1);

                if ( (LA196_0==DEFAULT) ) {
                    alt196=1;
                }
                switch (alt196) {
                    case 1 :
                        // /home/bigben/Desktop/Java.g:0:0: annotationDefaultValue
                        {
                        pushFollow(FOLLOW_annotationDefaultValue_in_synpred1148468);
                        annotationDefaultValue();
                        _fsp--;
                        if (failed) return ;

                        }
                        break;

                }

                match(input,SEMI,FOLLOW_SEMI_in_synpred1148471); if (failed) return ;

                }
                break;
            case 2 :
                // /home/bigben/Desktop/Java.g:727:13: classFieldDeclaratorList SEMI
                {
                pushFollow(FOLLOW_classFieldDeclaratorList_in_synpred1148513);
                classFieldDeclaratorList();
                _fsp--;
                if (failed) return ;
                match(input,SEMI,FOLLOW_SEMI_in_synpred1148515); if (failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred114

    // $ANTLR start synpred116
    public final void synpred116_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:745:9: ( localVariableDeclaration SEMI )
        // /home/bigben/Desktop/Java.g:745:9: localVariableDeclaration SEMI
        {
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred1168650);
        localVariableDeclaration();
        _fsp--;
        if (failed) return ;
        match(input,SEMI,FOLLOW_SEMI_in_synpred1168652); if (failed) return ;

        }
    }
    // $ANTLR end synpred116

    // $ANTLR start synpred117
    public final void synpred117_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:746:9: ( typeDeclaration )
        // /home/bigben/Desktop/Java.g:746:9: typeDeclaration
        {
        pushFollow(FOLLOW_typeDeclaration_in_synpred1178662);
        typeDeclaration();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred117

    // $ANTLR start synpred121
    public final void synpred121_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:763:13: ( ELSE statement )
        // /home/bigben/Desktop/Java.g:763:13: ELSE statement
        {
        match(input,ELSE,FOLLOW_ELSE_in_synpred1218960); if (failed) return ;
        pushFollow(FOLLOW_statement_in_synpred1218964);
        statement();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred121

    // $ANTLR start synpred123
    public final void synpred123_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:767:13: ( forInit SEMI forCondition SEMI forUpdater RPAREN statement )
        // /home/bigben/Desktop/Java.g:767:13: forInit SEMI forCondition SEMI forUpdater RPAREN statement
        {
        pushFollow(FOLLOW_forInit_in_synpred1239147);
        forInit();
        _fsp--;
        if (failed) return ;
        match(input,SEMI,FOLLOW_SEMI_in_synpred1239149); if (failed) return ;
        pushFollow(FOLLOW_forCondition_in_synpred1239151);
        forCondition();
        _fsp--;
        if (failed) return ;
        match(input,SEMI,FOLLOW_SEMI_in_synpred1239153); if (failed) return ;
        pushFollow(FOLLOW_forUpdater_in_synpred1239155);
        forUpdater();
        _fsp--;
        if (failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred1239157); if (failed) return ;
        pushFollow(FOLLOW_statement_in_synpred1239159);
        statement();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred123

    // $ANTLR start synpred143
    public final void synpred143_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:805:9: ( switchCaseLabel )
        // /home/bigben/Desktop/Java.g:805:9: switchCaseLabel
        {
        pushFollow(FOLLOW_switchCaseLabel_in_synpred14310123);
        switchCaseLabel();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred143

    // $ANTLR start synpred146
    public final void synpred146_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:817:9: ( localVariableDeclaration )
        // /home/bigben/Desktop/Java.g:817:9: localVariableDeclaration
        {
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred14610211);
        localVariableDeclaration();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred146

    // $ANTLR start synpred147
    public final void synpred147_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:818:9: ( expressionList )
        // /home/bigben/Desktop/Java.g:818:9: expressionList
        {
        pushFollow(FOLLOW_expressionList_in_synpred14710233);
        expressionList();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred147

    // $ANTLR start synpred190
    public final void synpred190_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:954:9: ( LPAREN type RPAREN unaryExpression )
        // /home/bigben/Desktop/Java.g:954:9: LPAREN type RPAREN unaryExpression
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred19011764); if (failed) return ;
        pushFollow(FOLLOW_type_in_synpred19011766);
        type();
        _fsp--;
        if (failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred19011768); if (failed) return ;
        pushFollow(FOLLOW_unaryExpression_in_synpred19011770);
        unaryExpression();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred190

    // $ANTLR start synpred218
    public final void synpred218_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:1022:13: ( ( arrayDeclarator )+ ( DOT CLASS ) )
        // /home/bigben/Desktop/Java.g:1022:13: ( arrayDeclarator )+ ( DOT CLASS )
        {
        // /home/bigben/Desktop/Java.g:1022:13: ( arrayDeclarator )+
        int cnt220=0;
        loop220:
        do {
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==LBRACK) ) {
                alt220=1;
            }


            switch (alt220) {
        	case 1 :
        	    // /home/bigben/Desktop/Java.g:1022:17: arrayDeclarator
        	    {
        	    pushFollow(FOLLOW_arrayDeclarator_in_synpred21813671);
        	    arrayDeclarator();
        	    _fsp--;
        	    if (failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt220 >= 1 ) break loop220;
        	    if (backtracking>0) {failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(220, input);
                    throw eee;
            }
            cnt220++;
        } while (true);

        // /home/bigben/Desktop/Java.g:1024:13: ( DOT CLASS )
        // /home/bigben/Desktop/Java.g:1024:17: DOT CLASS
        {
        match(input,DOT,FOLLOW_DOT_in_synpred21813739); if (failed) return ;
        match(input,CLASS,FOLLOW_CLASS_in_synpred21813741); if (failed) return ;

        }


        }
    }
    // $ANTLR end synpred218

    // $ANTLR start synpred226
    public final void synpred226_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:1027:13: ( DOT ( CLASS | genericTypeArgumentListSimplified ( SUPER arguments | SUPER DOT IDENT arguments | IDENT arguments ) | THIS | SUPER arguments | innerNewExpression ) )
        // /home/bigben/Desktop/Java.g:1027:13: DOT ( CLASS | genericTypeArgumentListSimplified ( SUPER arguments | SUPER DOT IDENT arguments | IDENT arguments ) | THIS | SUPER arguments | innerNewExpression )
        {
        match(input,DOT,FOLLOW_DOT_in_synpred22613872); if (failed) return ;
        // /home/bigben/Desktop/Java.g:1028:13: ( CLASS | genericTypeArgumentListSimplified ( SUPER arguments | SUPER DOT IDENT arguments | IDENT arguments ) | THIS | SUPER arguments | innerNewExpression )
        int alt223=5;
        switch ( input.LA(1) ) {
        case CLASS:
            {
            alt223=1;
            }
            break;
        case LESS_THAN:
            {
            alt223=2;
            }
            break;
        case THIS:
            {
            alt223=3;
            }
            break;
        case SUPER:
            {
            alt223=4;
            }
            break;
        case NEW:
            {
            alt223=5;
            }
            break;
        default:
            if (backtracking>0) {failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("1028:13: ( CLASS | genericTypeArgumentListSimplified ( SUPER arguments | SUPER DOT IDENT arguments | IDENT arguments ) | THIS | SUPER arguments | innerNewExpression )", 223, 0, input);

            throw nvae;
        }

        switch (alt223) {
            case 1 :
                // /home/bigben/Desktop/Java.g:1028:17: CLASS
                {
                match(input,CLASS,FOLLOW_CLASS_in_synpred22613890); if (failed) return ;

                }
                break;
            case 2 :
                // /home/bigben/Desktop/Java.g:1029:17: genericTypeArgumentListSimplified ( SUPER arguments | SUPER DOT IDENT arguments | IDENT arguments )
                {
                pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_synpred22613953);
                genericTypeArgumentListSimplified();
                _fsp--;
                if (failed) return ;
                // /home/bigben/Desktop/Java.g:1030:17: ( SUPER arguments | SUPER DOT IDENT arguments | IDENT arguments )
                int alt222=3;
                int LA222_0 = input.LA(1);

                if ( (LA222_0==SUPER) ) {
                    int LA222_1 = input.LA(2);

                    if ( (LA222_1==DOT) ) {
                        alt222=2;
                    }
                    else if ( (LA222_1==LPAREN) ) {
                        alt222=1;
                    }
                    else {
                        if (backtracking>0) {failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("1030:17: ( SUPER arguments | SUPER DOT IDENT arguments | IDENT arguments )", 222, 1, input);

                        throw nvae;
                    }
                }
                else if ( (LA222_0==IDENT) ) {
                    alt222=3;
                }
                else {
                    if (backtracking>0) {failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("1030:17: ( SUPER arguments | SUPER DOT IDENT arguments | IDENT arguments )", 222, 0, input);

                    throw nvae;
                }
                switch (alt222) {
                    case 1 :
                        // /home/bigben/Desktop/Java.g:1030:21: SUPER arguments
                        {
                        match(input,SUPER,FOLLOW_SUPER_in_synpred22613978); if (failed) return ;
                        pushFollow(FOLLOW_arguments_in_synpred22613980);
                        arguments();
                        _fsp--;
                        if (failed) return ;

                        }
                        break;
                    case 2 :
                        // /home/bigben/Desktop/Java.g:1031:21: SUPER DOT IDENT arguments
                        {
                        match(input,SUPER,FOLLOW_SUPER_in_synpred22614030); if (failed) return ;
                        match(input,DOT,FOLLOW_DOT_in_synpred22614034); if (failed) return ;
                        match(input,IDENT,FOLLOW_IDENT_in_synpred22614036); if (failed) return ;
                        pushFollow(FOLLOW_arguments_in_synpred22614038);
                        arguments();
                        _fsp--;
                        if (failed) return ;

                        }
                        break;
                    case 3 :
                        // /home/bigben/Desktop/Java.g:1032:21: IDENT arguments
                        {
                        match(input,IDENT,FOLLOW_IDENT_in_synpred22614088); if (failed) return ;
                        pushFollow(FOLLOW_arguments_in_synpred22614090);
                        arguments();
                        _fsp--;
                        if (failed) return ;

                        }
                        break;

                }


                }
                break;
            case 3 :
                // /home/bigben/Desktop/Java.g:1034:17: THIS
                {
                match(input,THIS,FOLLOW_THIS_in_synpred22614165); if (failed) return ;

                }
                break;
            case 4 :
                // /home/bigben/Desktop/Java.g:1035:17: SUPER arguments
                {
                match(input,SUPER,FOLLOW_SUPER_in_synpred22614231); if (failed) return ;
                pushFollow(FOLLOW_arguments_in_synpred22614233);
                arguments();
                _fsp--;
                if (failed) return ;

                }
                break;
            case 5 :
                // /home/bigben/Desktop/Java.g:1036:17: innerNewExpression
                {
                pushFollow(FOLLOW_innerNewExpression_in_synpred22614281);
                innerNewExpression();
                _fsp--;
                if (failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred226

    // $ANTLR start synpred234
    public final void synpred234_fragment() throws RecognitionException {   
        // /home/bigben/Desktop/Java.g:1061:35: ( LBRACK expression RBRACK )
        // /home/bigben/Desktop/Java.g:1061:35: LBRACK expression RBRACK
        {
        match(input,LBRACK,FOLLOW_LBRACK_in_synpred23414680); if (failed) return ;
        pushFollow(FOLLOW_expression_in_synpred23414682);
        expression();
        _fsp--;
        if (failed) return ;
        match(input,RBRACK,FOLLOW_RBRACK_in_synpred23414684); if (failed) return ;

        }
    }
    // $ANTLR end synpred234

    public final boolean synpred44() {
        backtracking++;
        int start = input.mark();
        try {
            synpred44_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred43() {
        backtracking++;
        int start = input.mark();
        try {
            synpred43_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred146() {
        backtracking++;
        int start = input.mark();
        try {
            synpred146_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred147() {
        backtracking++;
        int start = input.mark();
        try {
            synpred147_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred123() {
        backtracking++;
        int start = input.mark();
        try {
            synpred123_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred101() {
        backtracking++;
        int start = input.mark();
        try {
            synpred101_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred100() {
        backtracking++;
        int start = input.mark();
        try {
            synpred100_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred218() {
        backtracking++;
        int start = input.mark();
        try {
            synpred218_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred121() {
        backtracking++;
        int start = input.mark();
        try {
            synpred121_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred102() {
        backtracking++;
        int start = input.mark();
        try {
            synpred102_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred190() {
        backtracking++;
        int start = input.mark();
        try {
            synpred190_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred42() {
        backtracking++;
        int start = input.mark();
        try {
            synpred42_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred143() {
        backtracking++;
        int start = input.mark();
        try {
            synpred143_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred234() {
        backtracking++;
        int start = input.mark();
        try {
            synpred234_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred117() {
        backtracking++;
        int start = input.mark();
        try {
            synpred117_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred97() {
        backtracking++;
        int start = input.mark();
        try {
            synpred97_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred58() {
        backtracking++;
        int start = input.mark();
        try {
            synpred58_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred32() {
        backtracking++;
        int start = input.mark();
        try {
            synpred32_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred116() {
        backtracking++;
        int start = input.mark();
        try {
            synpred116_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred92() {
        backtracking++;
        int start = input.mark();
        try {
            synpred92_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred114() {
        backtracking++;
        int start = input.mark();
        try {
            synpred114_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred90() {
        backtracking++;
        int start = input.mark();
        try {
            synpred90_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred52() {
        backtracking++;
        int start = input.mark();
        try {
            synpred52_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred79() {
        backtracking++;
        int start = input.mark();
        try {
            synpred79_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred76() {
        backtracking++;
        int start = input.mark();
        try {
            synpred76_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred51() {
        backtracking++;
        int start = input.mark();
        try {
            synpred51_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred50() {
        backtracking++;
        int start = input.mark();
        try {
            synpred50_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred77() {
        backtracking++;
        int start = input.mark();
        try {
            synpred77_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred99() {
        backtracking++;
        int start = input.mark();
        try {
            synpred99_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred226() {
        backtracking++;
        int start = input.mark();
        try {
            synpred226_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred14() {
        backtracking++;
        int start = input.mark();
        try {
            synpred14_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred15() {
        backtracking++;
        int start = input.mark();
        try {
            synpred15_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred16() {
        backtracking++;
        int start = input.mark();
        try {
            synpred16_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred17() {
        backtracking++;
        int start = input.mark();
        try {
            synpred17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }


    protected DFA35 dfa35 = new DFA35(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA175 dfa175 = new DFA175(this);
    protected DFA188 dfa188 = new DFA188(this);
    static final String DFA35_eotS =
        "\16\uffff";
    static final String DFA35_eofS =
        "\16\uffff";
    static final String DFA35_minS =
        "\1\31\1\uffff\1\26\1\17\1\51\1\6\1\0\1\u00a4\1\51\1\26\1\uffff\1"+
        "\17\1\26\1\0";
    static final String DFA35_maxS =
        "\1\u00a4\1\uffff\2\u00a4\1\51\1\54\1\0\1\u00a4\1\51\1\u00a4\1\uffff"+
        "\2\u00a4\1\0";
    static final String DFA35_acceptS =
        "\1\uffff\1\1\10\uffff\1\2\3\uffff";
    static final String DFA35_specialS =
        "\6\uffff\1\0\6\uffff\1\1}>";
    static final String[] DFA35_transitionS = {
            "\1\1\35\uffff\1\2\1\uffff\1\2\2\uffff\1\2\4\uffff\1\2\6\uffff"+
            "\1\2\6\uffff\2\2\10\uffff\1\2\13\uffff\1\1\76\uffff\1\3",
            "",
            "\1\4\u008d\uffff\1\5",
            "\1\7\6\uffff\1\10\2\uffff\1\6\3\uffff\1\1\u0086\uffff\1\5",
            "\1\11",
            "\1\12\4\uffff\1\12\12\uffff\1\12\6\uffff\1\1\16\uffff\1\12",
            "\1\uffff",
            "\1\13",
            "\1\14",
            "\1\4\u008d\uffff\1\5",
            "",
            "\1\7\6\uffff\1\10\2\uffff\1\15\u008a\uffff\1\5",
            "\1\10\u008d\uffff\1\5",
            "\1\uffff"
    };

    static final short[] DFA35_eot = DFA.unpackEncodedString(DFA35_eotS);
    static final short[] DFA35_eof = DFA.unpackEncodedString(DFA35_eofS);
    static final char[] DFA35_min = DFA.unpackEncodedStringToUnsignedChars(DFA35_minS);
    static final char[] DFA35_max = DFA.unpackEncodedStringToUnsignedChars(DFA35_maxS);
    static final short[] DFA35_accept = DFA.unpackEncodedString(DFA35_acceptS);
    static final short[] DFA35_special = DFA.unpackEncodedString(DFA35_specialS);
    static final short[][] DFA35_transition;

    static {
        int numStates = DFA35_transitionS.length;
        DFA35_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA35_transition[i] = DFA.unpackEncodedString(DFA35_transitionS[i]);
        }
    }

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = DFA35_eot;
            this.eof = DFA35_eof;
            this.min = DFA35_min;
            this.max = DFA35_max;
            this.accept = DFA35_accept;
            this.special = DFA35_special;
            this.transition = DFA35_transition;
        }
        public String getDescription() {
            return "453:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )";
        }
        public int specialStateTransition(int s, IntStream input) throws NoViableAltException {
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA35_6 = input.LA(1);

                         
                        int index35_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index35_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA35_13 = input.LA(1);

                         
                        int index35_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index35_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (backtracking>0) {failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 35, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA42_eotS =
        "\16\uffff";
    static final String DFA42_eofS =
        "\16\uffff";
    static final String DFA42_minS =
        "\1\31\1\uffff\1\26\1\17\1\51\1\6\1\0\1\u00a4\1\51\1\26\1\uffff\1"+
        "\17\1\26\1\0";
    static final String DFA42_maxS =
        "\1\u00a4\1\uffff\2\u00a4\1\51\1\35\1\0\1\u00a4\1\51\1\u00a4\1\uffff"+
        "\2\u00a4\1\0";
    static final String DFA42_acceptS =
        "\1\uffff\1\1\10\uffff\1\2\3\uffff";
    static final String DFA42_specialS =
        "\6\uffff\1\0\6\uffff\1\1}>";
    static final String[] DFA42_transitionS = {
            "\1\1\35\uffff\1\2\1\uffff\1\2\2\uffff\1\2\4\uffff\1\2\6\uffff"+
            "\1\2\6\uffff\2\2\10\uffff\1\2\13\uffff\1\1\76\uffff\1\3",
            "",
            "\1\4\u008d\uffff\1\5",
            "\1\7\6\uffff\1\10\2\uffff\1\6\u008a\uffff\1\5",
            "\1\11",
            "\1\12\17\uffff\1\12\6\uffff\1\1",
            "\1\uffff",
            "\1\13",
            "\1\14",
            "\1\4\u008d\uffff\1\5",
            "",
            "\1\7\6\uffff\1\10\2\uffff\1\15\u008a\uffff\1\5",
            "\1\10\u008d\uffff\1\5",
            "\1\uffff"
    };

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "470:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) )";
        }
        public int specialStateTransition(int s, IntStream input) throws NoViableAltException {
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA42_6 = input.LA(1);

                         
                        int index42_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index42_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA42_13 = input.LA(1);

                         
                        int index42_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index42_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (backtracking>0) {failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA175_eotS =
        "\16\uffff";
    static final String DFA175_eofS =
        "\16\uffff";
    static final String DFA175_minS =
        "\1\31\1\uffff\1\26\1\17\1\51\1\6\1\0\1\u00a4\1\51\1\26\1\uffff\1"+
        "\17\1\26\1\0";
    static final String DFA175_maxS =
        "\1\u00a4\1\uffff\2\u00a4\1\51\1\54\1\0\1\u00a4\1\51\1\u00a4\1\uffff"+
        "\2\u00a4\1\0";
    static final String DFA175_acceptS =
        "\1\uffff\1\1\10\uffff\1\2\3\uffff";
    static final String DFA175_specialS =
        "\6\uffff\1\1\6\uffff\1\0}>";
    static final String[] DFA175_transitionS = {
            "\1\1\35\uffff\1\2\1\uffff\1\2\2\uffff\1\2\4\uffff\1\2\6\uffff"+
            "\1\2\6\uffff\2\2\10\uffff\1\2\13\uffff\1\1\76\uffff\1\3",
            "",
            "\1\4\u008d\uffff\1\5",
            "\1\7\6\uffff\1\10\2\uffff\1\6\3\uffff\1\1\u0086\uffff\1\5",
            "\1\11",
            "\1\12\4\uffff\1\12\12\uffff\1\12\6\uffff\1\1\16\uffff\1\12",
            "\1\uffff",
            "\1\13",
            "\1\14",
            "\1\4\u008d\uffff\1\5",
            "",
            "\1\7\6\uffff\1\10\2\uffff\1\15\u008a\uffff\1\5",
            "\1\10\u008d\uffff\1\5",
            "\1\uffff"
    };

    static final short[] DFA175_eot = DFA.unpackEncodedString(DFA175_eotS);
    static final short[] DFA175_eof = DFA.unpackEncodedString(DFA175_eofS);
    static final char[] DFA175_min = DFA.unpackEncodedStringToUnsignedChars(DFA175_minS);
    static final char[] DFA175_max = DFA.unpackEncodedStringToUnsignedChars(DFA175_maxS);
    static final short[] DFA175_accept = DFA.unpackEncodedString(DFA175_acceptS);
    static final short[] DFA175_special = DFA.unpackEncodedString(DFA175_specialS);
    static final short[][] DFA175_transition;

    static {
        int numStates = DFA175_transitionS.length;
        DFA175_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA175_transition[i] = DFA.unpackEncodedString(DFA175_transitionS[i]);
        }
    }

    class DFA175 extends DFA {

        public DFA175(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 175;
            this.eot = DFA175_eot;
            this.eof = DFA175_eof;
            this.min = DFA175_min;
            this.max = DFA175_max;
            this.accept = DFA175_accept;
            this.special = DFA175_special;
            this.transition = DFA175_transition;
        }
        public String getDescription() {
            return "453:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) | IDENT formalParameterList ( throwsClause )? block ) | type classFieldDeclaratorList SEMI )";
        }
        public int specialStateTransition(int s, IntStream input) throws NoViableAltException {
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA175_13 = input.LA(1);

                         
                        int index175_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index175_13);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA175_6 = input.LA(1);

                         
                        int index175_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index175_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (backtracking>0) {failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 175, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA188_eotS =
        "\16\uffff";
    static final String DFA188_eofS =
        "\16\uffff";
    static final String DFA188_minS =
        "\1\31\1\uffff\1\26\1\17\1\51\1\6\1\0\1\u00a4\1\51\1\26\1\uffff\1"+
        "\17\1\26\1\0";
    static final String DFA188_maxS =
        "\1\u00a4\1\uffff\2\u00a4\1\51\1\35\1\0\1\u00a4\1\51\1\u00a4\1\uffff"+
        "\2\u00a4\1\0";
    static final String DFA188_acceptS =
        "\1\uffff\1\1\10\uffff\1\2\3\uffff";
    static final String DFA188_specialS =
        "\6\uffff\1\0\6\uffff\1\1}>";
    static final String[] DFA188_transitionS = {
            "\1\1\35\uffff\1\2\1\uffff\1\2\2\uffff\1\2\4\uffff\1\2\6\uffff"+
            "\1\2\6\uffff\2\2\10\uffff\1\2\13\uffff\1\1\76\uffff\1\3",
            "",
            "\1\4\u008d\uffff\1\5",
            "\1\7\6\uffff\1\10\2\uffff\1\6\u008a\uffff\1\5",
            "\1\11",
            "\1\12\17\uffff\1\12\6\uffff\1\1",
            "\1\uffff",
            "\1\13",
            "\1\14",
            "\1\4\u008d\uffff\1\5",
            "",
            "\1\7\6\uffff\1\10\2\uffff\1\15\u008a\uffff\1\5",
            "\1\10\u008d\uffff\1\5",
            "\1\uffff"
    };

    static final short[] DFA188_eot = DFA.unpackEncodedString(DFA188_eotS);
    static final short[] DFA188_eof = DFA.unpackEncodedString(DFA188_eofS);
    static final char[] DFA188_min = DFA.unpackEncodedStringToUnsignedChars(DFA188_minS);
    static final char[] DFA188_max = DFA.unpackEncodedStringToUnsignedChars(DFA188_maxS);
    static final short[] DFA188_accept = DFA.unpackEncodedString(DFA188_acceptS);
    static final short[] DFA188_special = DFA.unpackEncodedString(DFA188_specialS);
    static final short[][] DFA188_transition;

    static {
        int numStates = DFA188_transitionS.length;
        DFA188_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA188_transition[i] = DFA.unpackEncodedString(DFA188_transitionS[i]);
        }
    }

    class DFA188 extends DFA {

        public DFA188(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 188;
            this.eot = DFA188_eot;
            this.eof = DFA188_eof;
            this.min = DFA188_min;
            this.max = DFA188_max;
            this.accept = DFA188_accept;
            this.special = DFA188_special;
            this.transition = DFA188_transition;
        }
        public String getDescription() {
            return "470:9: ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI | VOID IDENT formalParameterList ( throwsClause )? SEMI ) | type interfaceFieldDeclaratorList SEMI )";
        }
        public int specialStateTransition(int s, IntStream input) throws NoViableAltException {
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA188_6 = input.LA(1);

                         
                        int index188_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index188_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA188_13 = input.LA(1);

                         
                        int index188_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index188_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (backtracking>0) {failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 188, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_compilationUnit_in_javaSource4506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationList_in_compilationUnit4542 = new BitSet(new long[]{0x2020100000000082L,0x000000444CF26048L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit4553 = new BitSet(new long[]{0x2020100000000082L,0x000000444CE26048L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit4565 = new BitSet(new long[]{0x2020100000000082L,0x000000444CE26048L});
    public static final BitSet FOLLOW_typeDecls_in_compilationUnit4577 = new BitSet(new long[]{0x2020100000000082L,0x000000444CE22048L});
    public static final BitSet FOLLOW_typeDeclaration_in_typeDecls4597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_typeDecls4607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_in_packageDeclaration4626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_packageDeclaration4629 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_packageDeclaration4631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_importDeclaration4656 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_STATIC_in_importDeclaration4659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_importDeclaration4662 = new BitSet(new long[]{0x0000100000010000L});
    public static final BitSet FOLLOW_DOTSTAR_in_importDeclaration4664 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_importDeclaration4667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_typeDeclaration4690 = new BitSet(new long[]{0x2000000000000080L,0x0000000000002008L});
    public static final BitSet FOLLOW_classTypeDeclaration_in_typeDeclaration4704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceTypeDeclaration_in_typeDeclaration4719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumTypeDeclaration_in_typeDeclaration4734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_typeDeclaration4749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_classTypeDeclaration4784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_classTypeDeclaration4786 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_classTypeDeclaration4788 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000810L});
    public static final BitSet FOLLOW_classExtendsClause_in_classTypeDeclaration4791 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000800L});
    public static final BitSet FOLLOW_implementsClause_in_classTypeDeclaration4794 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_classBody_in_classTypeDeclaration4797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_classExtendsClause4850 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_classExtendsClause4852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_interfaceExtendsClause4896 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeList_in_interfaceExtendsClause4898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPLEMENTS_in_implementsClause4942 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeList_in_implementsClause4944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_genericTypeParameterList4989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameter_in_genericTypeParameterList4991 = new BitSet(new long[]{0x0000800000100902L});
    public static final BitSet FOLLOW_COMMA_in_genericTypeParameterList4994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameter_in_genericTypeParameterList4996 = new BitSet(new long[]{0x0000800000100902L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_genericTypeParameterList5000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_THAN_in_genericTypeListClosing5115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_genericTypeListClosing5125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_in_genericTypeListClosing5135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_genericTypeParameter5163 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_bound_in_genericTypeParameter5165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_bound5211 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_bound5213 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_AND_in_bound5216 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_bound5218 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_ENUM_in_enumTypeDeclaration5259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_enumTypeDeclaration5261 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000800L});
    public static final BitSet FOLLOW_implementsClause_in_enumTypeDeclaration5263 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_enumBody_in_enumTypeDeclaration5266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_enumBody5313 = new BitSet(new long[]{0x0000000000000080L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_enumScopeDeclarations_in_enumBody5315 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_enumBody5317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstants_in_enumScopeDeclarations5354 = new BitSet(new long[]{0x0000100000000802L});
    public static final BitSet FOLLOW_COMMA_in_enumScopeDeclarations5357 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_enumClassScopeDeclarations_in_enumScopeDeclarations5361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_enumClassScopeDeclarations5381 = new BitSet(new long[]{0x12A0100002800082L,0x000000644EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_classScopeDeclarations_in_enumClassScopeDeclarations5383 = new BitSet(new long[]{0x12A0100002800082L,0x000000644EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants5422 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_enumConstants5425 = new BitSet(new long[]{0x0000000000000080L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants5427 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_annotationList_in_enumConstant5452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_enumConstant5454 = new BitSet(new long[]{0x0000000020800002L});
    public static final BitSet FOLLOW_arguments_in_enumConstant5457 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_classBody_in_enumConstant5460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_in_interfaceTypeDeclaration5485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_interfaceTypeDeclaration5487 = new BitSet(new long[]{0x0000000002800000L,0x0000000000000010L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_interfaceTypeDeclaration5489 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000010L});
    public static final BitSet FOLLOW_interfaceExtendsClause_in_interfaceTypeDeclaration5492 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_interfaceBody_in_interfaceTypeDeclaration5495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList5545 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_typeList5548 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_typeList5550 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_LCURLY_in_classBody5575 = new BitSet(new long[]{0x12A0140002800080L,0x000000644EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_classScopeDeclarations_in_classBody5577 = new BitSet(new long[]{0x12A0140002800080L,0x000000644EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_RCURLY_in_classBody5580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_interfaceBody5622 = new BitSet(new long[]{0x12A0140002000080L,0x000000644EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_interfaceScopeDeclarations_in_interfaceBody5624 = new BitSet(new long[]{0x12A0140002000080L,0x000000644EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_RCURLY_in_interfaceBody5627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations5665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_classScopeDeclarations5694 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations5696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_classScopeDeclarations5719 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_classScopeDeclarations5733 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_classScopeDeclarations5752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_classScopeDeclarations5754 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_classScopeDeclarations5756 = new BitSet(new long[]{0x0000100000C00000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_classScopeDeclarations5758 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_classScopeDeclarations5761 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations5765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations5769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_classScopeDeclarations5831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_classScopeDeclarations5833 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_classScopeDeclarations5835 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_classScopeDeclarations5837 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations5841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations5845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_classScopeDeclarations5904 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_classScopeDeclarations5906 = new BitSet(new long[]{0x0000000000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_classScopeDeclarations5908 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_classScopeDeclarations5911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_classScopeDeclarations5975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_classScopeDeclarations5977 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations5979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_classScopeDeclarations6024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classScopeDeclarations6034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_interfaceScopeDeclarations6065 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_interfaceScopeDeclarations6079 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_interfaceScopeDeclarations6098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_interfaceScopeDeclarations6100 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_interfaceScopeDeclarations6102 = new BitSet(new long[]{0x0000100000400000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_interfaceScopeDeclarations6104 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_interfaceScopeDeclarations6107 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations6110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_interfaceScopeDeclarations6168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_interfaceScopeDeclarations6170 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_interfaceScopeDeclarations6172 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_interfaceScopeDeclarations6174 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations6177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceScopeDeclarations6240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_interfaceFieldDeclaratorList_in_interfaceScopeDeclarations6242 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations6244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_interfaceScopeDeclarations6289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_interfaceScopeDeclarations6299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList6318 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_classFieldDeclaratorList6321 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList6323 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_classFieldDeclarator6362 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASSIGN_in_classFieldDeclarator6365 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_variableInitializer_in_classFieldDeclarator6367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6412 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_interfaceFieldDeclaratorList6415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6417 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_interfaceFieldDeclarator6456 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASSIGN_in_interfaceFieldDeclarator6458 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_variableInitializer_in_interfaceFieldDeclarator6460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_variableDeclaratorId6502 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_variableDeclaratorId6505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer6525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer6535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_arrayDeclarator6554 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_arrayDeclarator6556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_arrayDeclaratorList6590 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayInitializer6635 = new BitSet(new long[]{0x128004446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer6638 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer6641 = new BitSet(new long[]{0x128000446AA01000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer6643 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer6647 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayInitializer6652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROWS_in_throwsClause6690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentList_in_throwsClause6692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_modifierList6729 = new BitSet(new long[]{0x0020000000000082L,0x000000444CE20040L});
    public static final BitSet FOLLOW_PUBLIC_in_modifier6770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROTECTED_in_modifier6780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_modifier6790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_modifier6800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_modifier6810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NATIVE_in_modifier6820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SYNCHRONIZED_in_modifier6830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRANSIENT_in_modifier6840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOLATILE_in_modifier6850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRICTFP_in_modifier6860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifier_in_modifier6870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifier_in_localModifierList6889 = new BitSet(new long[]{0x0000000000000082L,0x0000000000000040L});
    public static final BitSet FOLLOW_FINAL_in_localModifier6930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_localModifier6940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleType_in_type6959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectType_in_type6969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_simpleType6989 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_simpleType6991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedTypeIdent_in_objectType7038 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_objectType7040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedTypeIdentSimplified_in_objectTypeSimplified7080 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_objectTypeSimplified7082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeIdent_in_qualifiedTypeIdent7122 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedTypeIdent7125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeIdent_in_qualifiedTypeIdent7127 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified7167 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedTypeIdentSimplified7170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified7172 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_IDENT_in_typeIdent7212 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_genericTypeArgumentList_in_typeIdent7215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_typeIdentSimplified7235 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_typeIdentSimplified7238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_primitiveType0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_genericTypeArgumentList7347 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgument_in_genericTypeArgumentList7349 = new BitSet(new long[]{0x0000800000100902L});
    public static final BitSet FOLLOW_COMMA_in_genericTypeArgumentList7352 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgument_in_genericTypeArgumentList7354 = new BitSet(new long[]{0x0000800000100902L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_genericTypeArgumentList7358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericTypeArgument7396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_genericTypeArgument7406 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000010L});
    public static final BitSet FOLLOW_genericWildcardBoundType_in_genericTypeArgument7408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_genericWildcardBoundType7450 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_genericWildcardBoundType7459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_genericTypeArgumentListSimplified7478 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7480 = new BitSet(new long[]{0x0000800000100902L});
    public static final BitSet FOLLOW_COMMA_in_genericTypeArgumentListSimplified7483 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7485 = new BitSet(new long[]{0x0000800000100902L});
    public static final BitSet FOLLOW_genericTypeListClosing_in_genericTypeArgumentListSimplified7489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericTypeArgumentSimplified7531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_genericTypeArgumentSimplified7541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_qualifiedIdentList7564 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_qualifiedIdentList7567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_qualifiedIdentList7569 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_LPAREN_in_formalParameterList7594 = new BitSet(new long[]{0x1280080000000080L,0x0000000002018142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_formalParameterList7622 = new BitSet(new long[]{0x0000080000000800L});
    public static final BitSet FOLLOW_COMMA_in_formalParameterList7625 = new BitSet(new long[]{0x1280000000000080L,0x0000000002018142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_formalParameterList7627 = new BitSet(new long[]{0x0000080000000800L});
    public static final BitSet FOLLOW_COMMA_in_formalParameterList7632 = new BitSet(new long[]{0x1280000000000080L,0x0000000002018142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_formalParameterList7634 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_formalParameterList7691 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_formalParameterList7768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_formalParameterStandardDecl7791 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_formalParameterStandardDecl7793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterStandardDecl7795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_formalParameterVarArgDecl7839 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_formalParameterVarArgDecl7841 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_ELLIPSIS_in_formalParameterVarArgDecl7843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterVarArgDecl7845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentifier7893 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentifier7936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentifier7940 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_annotation_in_annotationList7993 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_AT_in_annotation8031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_annotation8034 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_annotationInit_in_annotation8036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_annotationInit8060 = new BitSet(new long[]{0x128000446AA01080L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationInitializers_in_annotationInit8062 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationInit8064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationInitializer_in_annotationInitializers8101 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_annotationInitializers8104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_annotationInitializer_in_annotationInitializers8106 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationInitializers8136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_annotationInitializer8177 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASSIGN_in_annotationInitializer8180 = new BitSet(new long[]{0x128000446AA01080L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationInitializer8182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationElementValueExpression_in_annotationElementValue8205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotationElementValue8215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationElementValueArrayInitializer_in_annotationElementValue8225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_annotationElementValueExpression8248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_annotationElementValueArrayInitializer8288 = new BitSet(new long[]{0x128004446AA01880L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer8291 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_annotationElementValueArrayInitializer8294 = new BitSet(new long[]{0x128000446AA01080L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer8296 = new BitSet(new long[]{0x0000040000000800L});
    public static final BitSet FOLLOW_COMMA_in_annotationElementValueArrayInitializer8303 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_annotationElementValueArrayInitializer8307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_annotationTypeDeclaration8350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_INTERFACE_in_annotationTypeDeclaration8352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_annotationTypeDeclaration8354 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_annotationBody_in_annotationTypeDeclaration8356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_annotationBody8399 = new BitSet(new long[]{0x12A0040000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_annotationScopeDeclarations_in_annotationBody8401 = new BitSet(new long[]{0x12A0040000000080L,0x000000444EE38142L,0x0000001000000000L});
    public static final BitSet FOLLOW_RCURLY_in_annotationBody8404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_annotationScopeDeclarations8446 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_annotationScopeDeclarations8448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_annotationScopeDeclarations8462 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationScopeDeclarations8464 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationScopeDeclarations8466 = new BitSet(new long[]{0x8000100000000000L});
    public static final BitSet FOLLOW_annotationDefaultValue_in_annotationScopeDeclarations8468 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_annotationScopeDeclarations8471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_annotationScopeDeclarations8513 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_annotationScopeDeclarations8515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_annotationScopeDeclarations8560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_annotationDefaultValue8583 = new BitSet(new long[]{0x128000446AA01080L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_annotationElementValue_in_annotationDefaultValue8586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_block8607 = new BitSet(new long[]{0x73E014446AA01080L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_blockStatement_in_block8609 = new BitSet(new long[]{0x73E014446AA01080L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_RCURLY_in_block8612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_blockStatement8650 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_blockStatement8652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_blockStatement8662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockStatement8672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_localVariableDeclaration8695 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration8697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_localVariableDeclaration8699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_statement8752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSERT_in_statement8762 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement8766 = new BitSet(new long[]{0x0000100000000400L});
    public static final BitSet FOLLOW_COLON_in_statement8781 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement8785 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement8787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_statement8850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_statement8939 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement8941 = new BitSet(new long[]{0x53C010446AA01000L,0x000000B9F30D8723L,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement8945 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_ELSE_in_statement8960 = new BitSet(new long[]{0x53C010446AA01000L,0x000000B9F30D8723L,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement8964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_statement9130 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_statement9132 = new BitSet(new long[]{0x128010446A201080L,0x00000028920D8162L,0x000007F000000000L});
    public static final BitSet FOLLOW_forInit_in_statement9147 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9149 = new BitSet(new long[]{0x128010446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_forCondition_in_statement9151 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9153 = new BitSet(new long[]{0x128008446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_forUpdater_in_statement9155 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_statement9157 = new BitSet(new long[]{0x53C010446AA01000L,0x000000B9F30D8723L,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localModifierList_in_statement9194 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_statement9196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_statement9198 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_statement9200 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement9202 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_statement9204 = new BitSet(new long[]{0x53C010446AA01000L,0x000000B9F30D8723L,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_statement9321 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement9323 = new BitSet(new long[]{0x53C010446AA01000L,0x000000B9F30D8723L,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DO_in_statement9374 = new BitSet(new long[]{0x53C010446AA01000L,0x000000B9F30D8723L,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9376 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_WHILE_in_statement9378 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement9380 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_statement9423 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_statement9425 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_catches_in_statement9428 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_finallyClause_in_statement9430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_finallyClause_in_statement9435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SWITCH_in_statement9478 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement9480 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_LCURLY_in_statement9482 = new BitSet(new long[]{0x8400000000000000L});
    public static final BitSet FOLLOW_switchBlockLabels_in_statement9484 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_RCURLY_in_statement9486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SYNCHRONIZED_in_statement9512 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_statement9514 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_statement9516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_statement9562 = new BitSet(new long[]{0x128010446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement9564 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROW_in_statement9631 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_statement9633 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_statement9700 = new BitSet(new long[]{0x0000100000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_statement9702 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_statement9775 = new BitSet(new long[]{0x0000100000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_statement9777 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_statement9847 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_statement9849 = new BitSet(new long[]{0x53C010446AA01000L,0x000000B9F30D8723L,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_statement9851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_statement9918 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement9920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_statement9930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches9969 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_CATCH_in_catchClause10011 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_catchClause10014 = new BitSet(new long[]{0x1280000000000080L,0x0000000002018142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_catchClause10016 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_catchClause10018 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_catchClause10020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALLY_in_finallyClause10039 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_finallyClause10041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseLabels_in_switchBlockLabels10073 = new BitSet(new long[]{0x8400000000000002L});
    public static final BitSet FOLLOW_switchDefaultLabel_in_switchBlockLabels10075 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_switchCaseLabels_in_switchBlockLabels10078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseLabel_in_switchCaseLabels10123 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_CASE_in_switchCaseLabel10151 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_switchCaseLabel10154 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_switchCaseLabel10156 = new BitSet(new long[]{0x73E010446AA01082L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_blockStatement_in_switchCaseLabel10158 = new BitSet(new long[]{0x73E010446AA01082L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_DEFAULT_in_switchDefaultLabel10182 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_switchDefaultLabel10185 = new BitSet(new long[]{0x73E010446AA01082L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_blockStatement_in_switchDefaultLabel10187 = new BitSet(new long[]{0x73E010446AA01082L,0x000000FDFFEFA76BL,0x000007F000000000L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_forInit10211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit10233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_forCondition10321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forUpdater10363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parenthesizedExpression10403 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_parenthesizedExpression10405 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_parenthesizedExpression10407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList10448 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_expressionList10451 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_expressionList10453 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_assignmentExpression_in_expression10474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_assignmentExpression10510 = new BitSet(new long[]{0x001540A280004262L});
    public static final BitSet FOLLOW_ASSIGN_in_assignmentExpression10529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_ASSIGN_in_assignmentExpression10548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_ASSIGN_in_assignmentExpression10567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_ASSIGN_in_assignmentExpression10586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_ASSIGN_in_assignmentExpression10605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_ASSIGN_in_assignmentExpression10624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_ASSIGN_in_assignmentExpression10643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XOR_ASSIGN_in_assignmentExpression10662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOD_ASSIGN_in_assignmentExpression10681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_LEFT_ASSIGN_in_assignmentExpression10700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_ASSIGN_in_assignmentExpression10738 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_assignmentExpression_in_assignmentExpression10760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalOrExpression_in_conditionalExpression10785 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_QUESTION_in_conditionalExpression10788 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_assignmentExpression_in_conditionalExpression10791 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_conditionalExpression10793 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_conditionalExpression_in_conditionalExpression10795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalAndExpression_in_logicalOrExpression10816 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_LOGICAL_OR_in_logicalOrExpression10819 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_logicalAndExpression_in_logicalOrExpression10822 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_logicalAndExpression10843 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_LOGICAL_AND_in_logicalAndExpression10846 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_logicalAndExpression10849 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression10870 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_OR_in_inclusiveOrExpression10873 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression10876 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression10897 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_XOR_in_exclusiveOrExpression10900 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression10903 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression10924 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_AND_in_andExpression10927 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression10930 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression10951 = new BitSet(new long[]{0x0000000800040002L});
    public static final BitSet FOLLOW_EQUAL_in_equalityExpression10970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_equalityExpression10989 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression11019 = new BitSet(new long[]{0x0000000800040002L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression11049 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_INSTANCEOF_in_instanceOfExpression11052 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression11055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression11076 = new BitSet(new long[]{0x0000000003180002L});
    public static final BitSet FOLLOW_LESS_OR_EQUAL_in_relationalExpression11095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_OR_EQUAL_in_relationalExpression11114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_relationalExpression11133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_THAN_in_relationalExpression11152 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression11181 = new BitSet(new long[]{0x0000000003180002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression11215 = new BitSet(new long[]{0x0000A00000000102L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_in_shiftExpression11233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_shiftExpression11252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_LEFT_in_shiftExpression11271 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression11300 = new BitSet(new long[]{0x0000A00000000102L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression11330 = new BitSet(new long[]{0x0000004040000002L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression11348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression11367 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression11396 = new BitSet(new long[]{0x0000004040000002L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression11426 = new BitSet(new long[]{0x0002000100002002L});
    public static final BitSet FOLLOW_STAR_in_multiplicativeExpression11445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_in_multiplicativeExpression11464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOD_in_multiplicativeExpression11483 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression11512 = new BitSet(new long[]{0x0002000100002002L});
    public static final BitSet FOLLOW_PLUS_in_unaryExpression11546 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression11548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression11575 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression11577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INC_in_unaryExpression11603 = new BitSet(new long[]{0x1280000022000000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_postfixedExpression_in_unaryExpression11605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEC_in_unaryExpression11629 = new BitSet(new long[]{0x1280000022000000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_postfixedExpression_in_unaryExpression11631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression11655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_unaryExpressionNotPlusMinus11674 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOGICAL_NOT_in_unaryExpressionNotPlusMinus11723 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpressionNotPlusMinus11764 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_unaryExpressionNotPlusMinus11766 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpressionNotPlusMinus11768 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus11770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_postfixedExpression_in_unaryExpressionNotPlusMinus11805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpression_in_postfixedExpression11841 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_DOT_in_postfixedExpression11903 = new BitSet(new long[]{0x0000000002000000L,0x0000000090040000L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_postfixedExpression11953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_postfixedExpression12035 = new BitSet(new long[]{0x0000000020609002L});
    public static final BitSet FOLLOW_arguments_in_postfixedExpression12114 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_THIS_in_postfixedExpression12188 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_SUPER_in_postfixedExpression12251 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_postfixedExpression12253 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_SUPER_in_postfixedExpression12306 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_postfixedExpression12310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_postfixedExpression12312 = new BitSet(new long[]{0x0000000020609002L});
    public static final BitSet FOLLOW_arguments_in_postfixedExpression12379 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_innerNewExpression_in_postfixedExpression12450 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_LBRACK_in_postfixedExpression12507 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_postfixedExpression12509 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_postfixedExpression12511 = new BitSet(new long[]{0x0000000000609002L});
    public static final BitSet FOLLOW_INC_in_postfixedExpression12572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEC_in_postfixedExpression12596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesizedExpression_in_primaryExpression12644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primaryExpression12654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_newExpression_in_primaryExpression12664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdentExpression_in_primaryExpression12674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_primaryExpression12684 = new BitSet(new long[]{0x0000000000000000L,0x0000000090000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpression12699 = new BitSet(new long[]{0x0000000020008000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression12717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression12777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression12779 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression12781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression12848 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression12850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_primaryExpression12905 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression12907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_primaryExpression12972 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpression13105 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpression13163 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression13165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression13167 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_arguments_in_primaryExpression13191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_primaryExpression13333 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_arrayDeclarator_in_primaryExpression13392 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression13455 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_primaryExpression13457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_primaryExpression13517 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression13519 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_primaryExpression13521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_qualifiedIdentExpression13601 = new BitSet(new long[]{0x0000000020408002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_qualifiedIdentExpression13671 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentExpression13739 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_qualifiedIdentExpression13741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression13811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentExpression13872 = new BitSet(new long[]{0x2000000002000000L,0x0000000090040000L});
    public static final BitSet FOLLOW_CLASS_in_qualifiedIdentExpression13890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_qualifiedIdentExpression13953 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SUPER_in_qualifiedIdentExpression13978 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression13980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_qualifiedIdentExpression14030 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_qualifiedIdentExpression14034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentExpression14036 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression14038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_qualifiedIdentExpression14088 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression14090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_qualifiedIdentExpression14165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_qualifiedIdentExpression14231 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_qualifiedIdentExpression14233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_innerNewExpression_in_qualifiedIdentExpression14281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_newExpression14357 = new BitSet(new long[]{0x1280000002000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_primitiveType_in_newExpression14373 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_newArrayConstruction_in_newExpression14375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_newExpression14419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualifiedTypeIdentSimplified_in_newExpression14422 = new BitSet(new long[]{0x0000000020400000L});
    public static final BitSet FOLLOW_newArrayConstruction_in_newExpression14440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_newExpression14505 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_classBody_in_newExpression14507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_innerNewExpression14606 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_innerNewExpression14608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_innerNewExpression14611 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_innerNewExpression14613 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_classBody_in_innerNewExpression14615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_newArrayConstruction14661 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_arrayInitializer_in_newArrayConstruction14663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_newArrayConstruction14673 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_newArrayConstruction14675 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_newArrayConstruction14677 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LBRACK_in_newArrayConstruction14680 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_newArrayConstruction14682 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_newArrayConstruction14684 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_newArrayConstruction14688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_arguments14708 = new BitSet(new long[]{0x128008446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expressionList_in_arguments14710 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_arguments14713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_literal0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_THAN_in_synpred145115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_RIGHT_in_synpred155125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIT_SHIFT_RIGHT_in_synpred165135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bound_in_synpred175165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_synpred325694 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_synpred325696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred425733 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred425752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred425754 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred425756 = new BitSet(new long[]{0x0000100000C00000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred425758 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred425761 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred425765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred425769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred425831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred425833 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred425835 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred425837 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred425841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred425845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred425904 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred425906 = new BitSet(new long[]{0x0000000000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred425908 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_synpred425911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_synpred435719 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred435733 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred435752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred435754 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred435756 = new BitSet(new long[]{0x0000100000C00000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred435758 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred435761 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred435765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred435769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred435831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred435833 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred435835 = new BitSet(new long[]{0x0000100000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred435837 = new BitSet(new long[]{0x0000100000800000L});
    public static final BitSet FOLLOW_block_in_synpred435841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred435845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred435904 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred435906 = new BitSet(new long[]{0x0000000000800000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred435908 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_block_in_synpred435911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred435975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_synpred435977 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred435979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred446024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred506079 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred506098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred506100 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred506102 = new BitSet(new long[]{0x0000100000400000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred506104 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred506107 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred506110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred506168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred506170 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred506172 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred506174 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred506177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_synpred516065 = new BitSet(new long[]{0x1280000002000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeParameterList_in_synpred516079 = new BitSet(new long[]{0x1280000000000000L,0x0000002002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred516098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred516100 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred516102 = new BitSet(new long[]{0x0000100000400000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred516104 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred516107 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred516110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_synpred516168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred516170 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_formalParameterList_in_synpred516172 = new BitSet(new long[]{0x0000100000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_throwsClause_in_synpred516174 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred516177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred516240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_interfaceFieldDeclaratorList_in_synpred516242 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred516244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred526289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_synpred586590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred766991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclaratorList_in_synpred777040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred797125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeIdent_in_synpred797127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred907352 = new BitSet(new long[]{0x1280010000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_genericTypeArgument_in_synpred907354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericWildcardBoundType_in_synpred927408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred977625 = new BitSet(new long[]{0x1280000000000080L,0x0000000002018142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_synpred977627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_synpred997622 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_synpred997625 = new BitSet(new long[]{0x1280000000000080L,0x0000000002018142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterStandardDecl_in_synpred997627 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_synpred997632 = new BitSet(new long[]{0x1280000000000080L,0x0000000002018142L,0x0000001000000000L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_synpred997634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameterVarArgDecl_in_synpred1007691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred1017936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred1017940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_synpred1027993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifierList_in_synpred1148446 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred1148448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred1148462 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred1148464 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred1148466 = new BitSet(new long[]{0x8000100000000000L});
    public static final BitSet FOLLOW_annotationDefaultValue_in_synpred1148468 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred1148471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classFieldDeclaratorList_in_synpred1148513 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred1148515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred1168650 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred1168652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred1178662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_synpred1218960 = new BitSet(new long[]{0x53C010446AA01000L,0x000000B9F30D8723L,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_synpred1218964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_synpred1239147 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred1239149 = new BitSet(new long[]{0x128010446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_forCondition_in_synpred1239151 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred1239153 = new BitSet(new long[]{0x128008446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_forUpdater_in_synpred1239155 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred1239157 = new BitSet(new long[]{0x53C010446AA01000L,0x000000B9F30D8723L,0x000007F000000000L});
    public static final BitSet FOLLOW_statement_in_synpred1239159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCaseLabel_in_synpred14310123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred14610211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_synpred14710233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred19011764 = new BitSet(new long[]{0x1280000000000000L,0x0000000002018102L,0x0000001000000000L});
    public static final BitSet FOLLOW_type_in_synpred19011766 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred19011768 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred19011770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclarator_in_synpred21813671 = new BitSet(new long[]{0x0000000000408000L});
    public static final BitSet FOLLOW_DOT_in_synpred21813739 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_CLASS_in_synpred21813741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred22613872 = new BitSet(new long[]{0x2000000002000000L,0x0000000090040000L});
    public static final BitSet FOLLOW_CLASS_in_synpred22613890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericTypeArgumentListSimplified_in_synpred22613953 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SUPER_in_synpred22613978 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred22613980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_synpred22614030 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DOT_in_synpred22614034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred22614036 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred22614038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred22614088 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred22614090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_synpred22614165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_synpred22614231 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_arguments_in_synpred22614233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_innerNewExpression_in_synpred22614281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_synpred23414680 = new BitSet(new long[]{0x128000446A201000L,0x00000028920D8122L,0x000007F000000000L});
    public static final BitSet FOLLOW_expression_in_synpred23414682 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_RBRACK_in_synpred23414684 = new BitSet(new long[]{0x0000000000000002L});

}
